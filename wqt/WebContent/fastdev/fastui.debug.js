/**
 * version : 1.6.0.0
 * time : 2013/12/27 16:58:58
 */
/**
 * 基础运行库对外使用接口，可静态使用外挂在其上的常用方法，也可当构造方法使用，构造{@link fastDev.Core.DomObject}对象
 * @class fastDev
 * @author 袁刚
 * @singleton
 */

(function(window, undefined) {
	// 绑定到页面加载完成事件上的函数
	var loaded,
		// 当前页面是否绑定了监听页面加载完成的事件
		bindStatus = false,
		// 当前页面是否已经加载完成
		isReady = false,
		// 当前页面是否正在加载中
		inProgress = true,
		// 当前页面加载完成后的回调函数数组
		callbacks = [],
		// 空数组，convertArray方法使用
		array = [],
		// 空函数，用于给Function类型参数赋默认值
		noop = function() {},
		// 缓存document元素
		doc = window.document,
		// 匹配不带属性的标签字符串
		matchHtmlTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
		// 匹配控件实例ID
		matchInstanceId = /^@([\w\W]+)/,
		// 检查控件类名
		matchClassName = /([\w\.]*)\.([\w]*)/,
		// 扩展对象类型
		extType = { "[object Array]" : "array", "[object Date]" : "date", "[object RegExp]" : "regexp"};

	// DomObject对象参数解析函数
	function DomObject(selector, context) {
		var match, elems;
		
		selector = selector || false;

		// selector为body字符串且并未指定上下文时封装当前文档的body元素返回
		// selector为window对象时封装成返回
		// selector为Don标签格式字符串时解析标签内容，创建Dom元素
		// selector为Dom元素时直接封装返回
		// selector为数组时，剔除数组内的无效元素后封装返回
		// 不是以上五种情况的调用查询器搜索，将搜索结果封装返回
		if(selector === "body" && !context && doc.body) {
			elems = [doc.body];
		} else if(isWindow(selector)) {
			elems = [window];
		} else if( typeof selector === "string" && 
			selector.charAt(0) === "<" && 
				selector.charAt(selector.length - 1) === ">" && 
					selector.length >= 3) {
			// 如果是HTML标签格式的字符串则创建对应的Dom,设置成DomObject的参数
			if( match = matchHtmlTag.exec(selector)) {
				// 获取标签内容，创建Dom元素
				elems = [doc.createElement(match[1])];
				// 配置了元素属性的话，将元素属性与值设置到创建的Dom元素上
				if(isPlainObject(context)) {
					for(var p in context) {
						DomObject(elems[0]).attr(p, context[p]);
					}
					context = null;
				}

			} else {
				return DomObject(createByHTML(selector)).children();
			}
		} else if(selector.nodeType) {
			elems = [selector];
		} else if(isArray(selector)) {
			for(var i = 0, elem; elem = selector[i++]; ) {
				if(!elem.nodeType) {
					selector.splice(--i, 1);
				}
			}
			elems = selector;
		}

		return create("DomObject", {
			"elems" : elems,
			"selector" : selector,
			"context" : context
		});
	}

	var $ = function(selector, context) {
		var match;
		
		if(isFunction(selector)) {
			return ready(selector);
		} else if(selector && 
			(match = selector.match && 
				selector.match(matchInstanceId))) {
			return $.getInstance(match[1]);
		} else if(isDomObject(selector)) {
			return selector;
		}
		return DomObject(selector, context);
	};
	
	/**
	 * 将一个或多个源对象中的属性拷贝至目标对象中
	 * @param {Boolean} deep 是否深拷贝
	 * @param {Object|Function} target 目标对象
	 * @param {Object|Function} source 源对象
	 * @return {Object|Function} target
	 */
	function apply() {
		var src, name, copy, clone, options, copyIsArray,
			// 源对象位于arguments的起始索引
			i = 1, 
			// 默认关闭对象间的深拷贝
			deep = false,
			// 允许拷贝多个源对象中的属性至目标对象, 此处长度用以确定源对象个数
			length = arguments.length,
			
			target = arguments[0] || {};
			
			

		// 属性修正，如果第一个参数是布尔类型，则此参数是用于设定是否进行深拷贝
		// 并将第二个参数设定为目标对象，第三个及以后的参数设定为源对象
		if( typeof target === "boolean") {
			deep = target;
			target = arguments[1] || {};
			i = 2;
		}

		// 如果目标对象不是对象也不是函数，则强制设置为空对象
		if( typeof target !== "object" && !isFunction(target)) {
			target = {};
		}

		// 如果没有为目标对象设定源对象
		// 则设定源对象为当前目标对象，目标对象为fastDev
		if(length === i) {
			target = this; --i;
		}

		// 遍历arguments获取源对象
		for(; i < length; i++) {
			if(isValid( options = arguments[i])) {
				// 遍历源对象属性扩展目标对象
				for(name in options ) {
					src = target[name];
					copy = options[name];

					// 如果源对象中某个属性是目标对象，则跳过以避免重复复制
					if(target === copy) {
						continue;
					}

					// 在开启深拷贝并且源对象中的属性是纯对象或者数组时，则递归
					if(deep && copy && (isPlainObject(copy) || ( copyIsArray = isArray(copy)) )) {
						// 修正目标对象对应的属性值
						if(copyIsArray) {
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}
						// 递归拷贝
						target[name] = apply(deep, clone, copy);
					} else if(copy !== undefined) {
						target[name] = copy;
					}
				}

			}
		}
		return target;
	}

	/**
	 * 根据类全名创建命名空间
	 * @param {String} classname 命名空间路径
	 * @return {JsonObject}
	 */
	function namespace(classname) {
		var space = window;
		
		each(classname.split("."), function(i, name) {
			space = space[name] || (space[name] = {});
		});
		return space;
	}

	/**
	 * 自定义方法与作用域遍历处理每一个数组元素或对象属性
	 * @param {Object|Array} object 遍历对象
	 * @param {Fcuntion} callback 自定义句柄函数
	 * @param {Object} context 句柄函数执行域
	 * @return {Object|Array} object
	 */
	function each(object, callback, context) {
		if(!object) {
			return object;
		}
		
		var name, i = 0, length = object.length, 
			isObj = length === undefined || isFunction(object);
			
		if(isObj) {
			for(name in object ) {
				if(callback.call(context || object[name], name, object[name]) === false) {
					break;
				}
			}
		} else {
			for(var value = object[0]; i < length && callback.call(context || value, i, value) !== false; value = object[++i]);
		}
		return object;
	}

	/**
	 * 判断传入值是否为一个函数对象
	 * @param {Object} val
	 * @return {Boolean} 
	 */
	function isFunction(val) {
		return typeof val === 'function';
	}

	/**
	 * 判断传入值是否为noop
	 * @param {Object} val
	 * @return {Boolean}  
	 */
	function isNoop(val) {
		return val === noop;
	}

	/**
	 * @method isArray
	 * 判断传入值是否为数组对象
	 * @param {Object} val
	 * @return {Boolean} 
	 */
	var isArray = Array.isArray || function(val) {
		return $.typeOf(val) === "array";
	};

	/**
	 * 判断传入值是否为日期对象
	 * @param {Object} val
	 * @return {Boolean}
	 */
	function isDate(val) {
		return val instanceof Date;
	}

	/**
	 * @method isObject
	 * 判断传入值是否为Object对象
	 * @param {Object} val
	 * @return {Boolean} 
	 */
	var isObject = typeof null === "object" ? function(val) {
			return val !== null && val !== undefined && typeof val === "object" && val.ownerDocument === undefined && val.keyCode === undefined;
		} : function(val) {
			return typeof val === "object";
		};

	/**
	 * 判断传入值是否为数字对象
	 * @param {Object} val
	 * @return {Boolean} 
	 */
	function isNumber(val) {
		return !isNaN(parseFloat(val)) && isFinite(val);
	}

	/**
	 * 判断传入值是否为字符串对象
	 * @param {Object} val
	 * @return {Boolean}  
	 */
	function isString(val) {
		return typeof val === 'string';
	}

	/**
	 * 判断传入值是否为布尔对象 
	 * @param {Object} val
	 * @return {Boolean}  
	 */
	function isBoolean(val) {
		return typeof val === "boolean";
	}

	/**
	 * 判断传入值是否为有效值
	 * @param {Object} val
	 * @return {Boolean}  
	 */
	function isValid(val) {
		return val !== null && val !== undefined;
	}

	/**
	 * 判断传入值是否为对象字面量 
	 * @param {Object} val
	 * @return {Boolean}  
	 */
	function isPlainObject(val) {
		if(!isObject(val) || val.nodeType || isWindow(val)) {
			return false;
		}

		if(val.constructor && !val.hasOwnProperty("constructor") && !val.constructor.prototype.hasOwnProperty("isPrototypeOf")) {
			return false;
		}
		for(var key in val ) {}
		return key === undefined || val.hasOwnProperty(key);
	}

	/**
	 * 判断传入值是否为空对象
	 * @param {Object} val
	 * @return {Boolean}  
	 */
	function isEmptyObject(val) {
		for(var name in val ) {
			return false;
		}
		return true;
	}

	/**
	 * 判断传入值是否为空数组 
	 * @param {Object} val
	 * @return {Boolean}  
	 */
	function isEmptyArray(val) {
		return !!val.length;
	}

	/**
	 * 判断传入值是否为Element元素对象
	 * @param {Object} val
	 * @return {Boolean}   
	 */
	function isElement(val) {
		return val ? val.nodeType === 1 : false;
	}

	/**
	 * 判断传入值是否为Window对象 
	 * @param {Object} val
	 * @return {Boolean}   
	 */
	function isWindow(val) {
		return val && typeof val === "object" && "setInterval" in val;
	}
	
	/**
	 * 判断当前元素所属文档是否为HTML文档 
	 * @param {Element} elem
	 * return {Boolean}
	 */
	function isXMLDoc( elem ){
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	}
	
	/**
	 * 是否DomObject对象
	 * @param {Object} value
	 * @return {Boolean}
	 */
	function isDomObject(value) {
		return value && value.alias === "DomObject";
	}

	/**
	 * 获取唯一id
	 * @return {Number} 
	 */
	function getID() {
		return +new Date() + parseInt(+(Math.random() + "e6"), 10);
	}

	/**
	 * 将方法绑定到指定作用域执行 
	 * @param {Object} context 作用域
	 * @param {Function} handle 方法句柄
	 */
	function setFnInScope(context, handle) {
		return function() {
			return handle.apply(context, arguments);
		};
	}

	/**
	 * 将方法绑定到指定作用域执行并传参 
	 * @param {Object} context 作用域
	 * @param {Function} handle 方法句柄
	 * @param {Object|String|Number} param 参数
	 */
	function setFnInScopeByParam(context, handle) {
		return (function(arg) {
			var params = convertArray(arg), context = params.shift(), handle = params.shift();

			return function() {
				return handle.apply(context, convertArray(arguments).concat(params));
			};
		})(arguments);
	}

	/**
	 * 将传入值转换为数组
	 * @param {Object}
	 * @return {Array} 
	 */
	function convertArray(val) {
		return array.slice.call(val);
	}

	/**
	 * 在指定作用域中执行函数句柄 
	 * @param {Function} handle 函数句柄
	 * @param {Object} context 作用域
	 * @param {Object|String|Number} param 参数
	 */
	function fire() {
		var params = convertArray(arguments), handle = params.shift(), context = params.shift();

		if(!isFunction(handle)) {
			return;
		}

		handle.apply(context, params);
	}

	/**
	 * 返回传入对象的克隆
	 * @return {Object}
	 */
	function clone(obj) {
		var Getter = function() {};
		Getter.prototype = obj;
		Getter.prototype.constructor = Getter;
		return new Getter();
	}

	/**
	 * 比较俩个传入值得大小 
	 * 参数1大于参数2返回1，参数1小于参数2返回-1，相等返回0
	 * @param {Object} param1
	 * @param {Object} param2
	 * @return {Number}
	 */
	function comparator(param1, param2) {
		//如果参数1为数字，参数2为字符串
		if( typeof param1 === "number" && typeof param2 === "string") {
			return -1;
		}
		//如果参数1为字符串，参数2为数字
		if( typeof param1 === "string" && typeof param2 === "number") {
			return 1;
		}
		//如果两个参数均为数字
		if( typeof param1 === "number" && typeof param2 === "number") {
			if(param1 > param2)
				return 1;
			if(param1 === param2)
				return 0;
			if(param1 < param2)
				return -1;
		}
		// 不满足以上条件则将数据转换为字符串进行比较
		param1 += "";
		param2 += "";
		
		var len1 = param1.replace(/[^\x00-\xff]/g, '..').length,
			len2 = param2.replace(/[^\x00-\xff]/g, '..').length;
			
		if(len1 === len2) {
			return param1.localeCompare(param2);
		} else if(len1 < len2) {
			return -1;
		} else {
			return 1;
		}
	}

	loaded = doc.addEventListener ? function() {
			doc.removeEventListener("DOMContentLoaded", loaded, false);
			executeReady();
		} : function() {
			if(doc.readyState === "complete") {
				doc.detachEvent("onreadystatechange", loaded);
				executeReady();
			}
		};

	function push() {
		var args = arguments, i, length, handle;
		for( i = 0, length = args.length; i < length; i++) {
			handle = args[i];
			if(isFunction(handle)) {
				callbacks.push(handle);
			}
		}
		if(inProgress === false) {
			execute(doc);
		}
		return this;
	}

	function execute(context) {
		while(callbacks[0]) {
			callbacks.shift().call(context);
		}
		inProgress = false;
	}

	// 绑定监听页面就绪事件
	// @private
	function bindReady() {
		if(bindStatus) {
			return;
		}
		bindStatus = true;

		if(doc.readyState === "complete") {
			return window.setTimeout(executeReady, 1);
		}

		// 火狐、谷歌监听DOMContentLoaded事件
		// IE系列监听onreadystatechange事件
		if(doc.addEventListener) {
			doc.addEventListener("DOMContentLoaded", loaded, false);
		} else {
			doc.attachEvent("onreadystatechange", loaded);
		}
	}

	// 页面就绪时调用回调方法组的执行
	// @private
	function executeReady() {
		if(!isReady) {
			if(!doc.body) {
				return window.setTimeout(executeReady, 1);
			}
			isReady = true;
			execute(doc);
		}

	}

	/**
	 * 指定函数在页面文档就绪时执行
	 * @param {Function} handle
	 */
	function ready(handle) {
		bindReady();
		push(handle);
	}

	/**
	 * 创建文档片段
	 * @return {DocumentFragment}
	 */
	function createFragment() {
		return document.createDocumentFragment();
	}

	/**
	 * 根据HTML字符串创建Dom元素 
	 * @param {String} htmlStr html字符串
	 * @return {DocumentFragment}
	 */
	function createByHTML(htmlStr) {
		var 
			fragment = createFragment(),
			div = document.createElement("div");
		
		div.innerHTML = htmlStr;
		while(div.childNodes.length) {
			fragment.appendChild(div.childNodes[0]);
		}
		div = null;
		return fragment;
	}
	
	/**
	 * 类定义方法
	 * @param {String} classname 完整的类名(如:fastDev.Ui.DataGrid)
	 * @param {JsonObject} config 类配置信息
	 */
	function define(classname, config) {
		var match, Class, supClass, prop, space;
		
		// 检查类名是否完整
		if(!(match = matchClassName.exec(classname))) {
			return;
		}
		// 根据类路径建立所属命名空间
		space = namespace(match[1]);
		
		// 解析继承关系
		if(Class = parseExtend(config.extend)){
			// 继承父类配置项及全局配置
			each("_options _global".split(" "), function(idx, name) {
				prop = ( prop = Class[name]) ? clone(prop) : {};
				Class[name] = apply(prop, config[name]);
				delete config[name];
			});
		}
		
		// 扩展类属性以及方法
		Class = apply(Class || {}, config);
		
		// 注册类
		$.Core.ClassManager.regClass(classname, Class, config.alias);
		
		// 将当前类注册至命名空间中
		space[match[2]] = Class;
		
	}
	
	/**
	 * 解析继承关系
	 * @private
	 */
	function parseExtend(supClass, Class) {
		
		if(supClass) {
			supClass = $.Core.ClassManager.getClass(supClass);
			Class = extend(supClass);
		} 
		return Class;
	}
	
	/**
	 * 类实例创建
	 * @param {String} className 类名
	 * @param {Object} settings 示例配置信息
	 * @return {Object}
	 */
	function create(className, settings) {
		var 
			instance, options, global,
			// 解析类名获得对应的类
			Class = $.Core.ClassManager.getClass(className);

		try {
			if(!Class.prototype) {
				instance = clone(Class);
				// 继承父类配置
				options = clone(instance._options);
				// 继承父类全局空间
				global = clone(instance._global);
				// 读入用户配置、全局配置以及默认配置
				instance._options = apply(options, (window.ui_global_config && window.ui_global_config[className]), settings);
				instance._global = global;
				// 执行实例初始化
				constructInstance(instance, !Class.extend);
			} else {
				instance = instantiation(Class, settings || {});
			}
			return instance;
		} catch(e) {
			if(!Class) {
				$.addError("fastDev", "create", "类[" + className + "]不存在，无法创建实例");
			} else {
				$.addError("fastDev", "create", e.message);
			}
		} 
	}
	
	/**
	 * 按自定义流程执行类实例化
	 * @param {Object} Class 类
	 * @param {JsonObject} option 实例化参数
	 * @private
	 */
	function instantiation(Class, settings) {
		return Class.constructor(settings);
	}
	
	
	/**
	 * 按内部流程执行类实例化
	 * @param {Object} instance 实例
	 * @return {Object}
	 * @private
	 */
	function constructInstance(instance, nobase) {
		var name, 
			options = instance._options, 
			global = instance._global,
			// 如当前实例所属类没有父类，则走简易流程提升性能
			method = nobase ? execMethod : execAllSuperClassMethod;
			
		each("ready construct init".split(" "), function(index, name) {
			try {
				return method(instance, name, options, global);
			} catch(e) {
				$.addError(instance.alias, name, "控件初始化逻辑代码执行错误，请联系开发人员", e.message);
			}
		});
		return instance;
	}
	
	/**
	 * 类继承方法
	 * @param {Object} supClass 父类
	 * @return {Object}
	 * @member fastDev
	 */
	function extend(supClass) {
		var subClass = clone(supClass);
		subClass.superClass = supClass;
		return subClass;
	}
	
	/**
	 * 从顶层父类开始依次执行指定方法
	 * @param {Object} context 实例对象
	 * @param {String} methodName 方法名称
	 * @private
	 */
	function execAllSuperClassMethod(context, methodName) {
		var 
			currContext = context,
			// 获取当前类别名 
			alias = context.alias,
			// 获取父类作用域
			superContext = context.superClass,
			// 构建流程方法执行队列,将当前作用域的流程方法添加至队列
			execQueue = [context[methodName]],
			// 缓存流程方法参数
			options = context._options, global = context._global,
			// 生成流程方法的回调方法名称
			handleName = $.Util.StringUtil.capitalize(methodName);
			
		// 递归查找所有父类并把流程方法添加至队列
		while(superContext) {
			if(superContext[methodName] && context[methodName] !== superContext[methodName]) {
				execQueue.splice(0, 0, superContext[methodName]);
			}
			context = superContext;
			superContext = context.superClass;
		}
		try{
			// 触发流程方法执行之前事件
			fire(options["onBefore" + handleName], currContext);
		}catch(e){
			$.addError(alias, "onBefore" + handleName, "回调事件执行出错，请检查对应的回调函数", e.message);
		}

		for(var i = 0, method; method = execQueue[i]; i += 1) {
			// 从顶层父类开是执行流程方法
			if(method.call(currContext, options, global) === false) {
				return false;
			}
		}
		
		try{
			// 触发流程方法执行之后事件
			fire(options["onAfter" + handleName], currContext);
		}catch(e){
			$.addError(alias, "onAfter" + handleName, "回调事件执行出错，请检查对应的回调函数", e.message);
		}
	}
	
	/**
	 * @param {Object} context
	 * @param {String} methodName
	 * @private
	 */
	function execMethod(context, methodName) {
		var 
			options = context._options, 
			global = context._global, 
			method = context[methodName];
			
		if(method && method.call(context, options, global));
	}
	
	/**
	 * 返回查询对象的类型
	 * @param {Object} obj
	 * @return {String} 
	 */
	$.typeOf = function(obj) {
		if(obj === null || obj === undefined) {
			return String(obj);
		}

		return typeof obj === "object" ? 
			extType[extType.toString.call(obj)] || isPlainObject(obj) && "jsonobject" || "object" : 
			typeof obj;
	};
	
	$.apply = apply;

	$.apply({
		"namespace" : namespace,
		"each" : each,
		"noop" : noop,
		"isFunction" : isFunction,
		"isNoop" : isNoop,
		"isArray" : isArray,
		"isDate" : isDate,
		"isObject" : isObject,
		"isNumber" : isNumber,
		"isString" : isString,
		"isBoolean" : isBoolean,
		"isValid" : isValid,
		"isXMLDoc" : isXMLDoc,
		"isDomObject" : isDomObject,
		"isPlainObject" : isPlainObject,
		"isEmptyObject" : isEmptyObject,
		"isEmptyArray" : isEmptyArray,
		"isElement" : isElement,
		"isWindow" : isWindow,
		"getID" : getID,
		"setFnInScope" : setFnInScope,
		"setFnInScopeByParam" : setFnInScopeByParam,
		"fire" : fire,
		"clone" : clone,
		"comparator" : comparator,
		"ready" : ready,
		"convertArray" : convertArray,
		"createByHTML" : createByHTML,
		"define" : define,
		"create" : create
	});

	window.$ = window.$ || (window.fastDev = $);
})(window);
// 异步请求组件Ajax封装实现类
(function(window) {
	var
		$ = window.fastDev,
		// 匹配500错误详细信息
		matchDetails = /<pre>([^<]*)<\/pre>/,
		// 匹配500错误概要信息
		matchTitle = /<h1>([^<]*)<\/h1>/, 
		// Ajax配置项
		config = {
			// 请求地址
			"url" : "",
			// 请求类型
			"method" : "get",
			// 请求附加数据
			"data" : null,
			// 是否异步
			"async" : true,
			// 请求超时时间
			"timeout" : 30000,
			// 请求完成时回调事件
			"complete" : $.noop,
			// 请求HTTP头部信息
			"headers" : null,
			// 是否使用浏览器缓存数据(需配合浏览器设置使用)
			"cache" : false,
			// 服务调用用户名
			"username" : "",
			// 服务调用密码
			"password" : ""
		};

	function getXHR() {
		return window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
	}

	function callback() {
		var xml, match, rsp, status,
			url = this.url, 
			xhr = this.xhr, 
			timer = this.timer, 
			complete = this.complete;

		if(xhr.readyState === 4) {
			status = xhr.status;
			// 收到服务器响应时如果存在超时监控则取消监控
			if(timer) {
				window.clearTimeout(timer);
			}
			// 状态为200时封装返回数据
			// 其他状态值时封装错误信息
			rsp = { "text" : xhr.responseText };
			
			if(status !== 200){
				if(status !== 0) {
					match = matchDetails.exec(rsp.text) || matchTitle.exec(rsp.text);
				}

				rsp = {
					"status" : "system",
					"msg" : "Ajax请求失败" + ( status ? "" : ",请求" + url + "时发生错误"),
					"detailMsg" : match && match[1] ? match[1].replace(/&quot;/g, '"') : "请求超时无法获取返回结果",
					"errorStatus" : status
				};
			}
			complete(rsp);
			// 清空闭包引用
			xhr.onreadystatechange = fastDev.noop;
		}
	}

	function doAjax(setting) {
		setting = $.apply({}, config, setting);
		
		// 请求超时检查定时器
		var name, timer,
			// 请求超时时间
			timeout = setting.timeout,
			// 请求参数
			data = setting.data,
			// 请求类型
			method = setting.method,
			// 请求HTTP头部信息
			headers = setting.headers,
			// 请求地址
			url = setting.url,
			// Ajax对象
			xhr = getXHR();

		// 不缓存的话每次请求都会多穿一个cache_id参数，是浏览器的缓存功能无效
		if(!setting.cache) {
			url += (url.indexOf("?") === -1 ? "?" : "&") + "cache_id=" + (+new Date());
		}

		// 将请求参数添加至url
		if(data && method === "get") {
			url += url.indexOf("?") === -1 ? "?" : "&" + data;
		}

		xhr.open(method, url, setting.async);

		if(method === "post") {
			xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded;charset=UTF-8;');
		}

		if(headers) {
			for(name in headers) {
				xhr.setRequestHeader(name, headers[name]);
			}
		}

		if(timeout) {
			timer = window.setTimeout(function() {
				xhr.abort();
			}, timeout);
		}

		if(setting.async) {
			$.apply(setting, {
				"xhr" : xhr,
				"timer" : timer
			});
			xhr.onreadystatechange = $.setFnInScope(setting, callback);
		}

		xhr.send(data);
	}

	function jsonp(url, callback) {
		var id = +new Date();
		url = url + "callback=" + callback + "&cache_id=" + id;
		$("<script>").prop("src", url).prop("id", id).appendTo($("head"));
		$("#" + id).remove();
	}

	$.Ajax = {
		"doAjax" : doAjax,
		"jsonp" : jsonp
	};
})(window);
// 浏览器型号版本检测以及地址栏参数获取
(function(window){
	var i, type, browser_type, version, match, 
		$ = window.fastDev,
		// 匹配浏览器类型以及版本
		matchTypeVersion = /(msie|chrome|firefox)[\/\s]([\d.]+)/,
		// 浏览器描述字符串
		uaStr = window.navigator.userAgent.toLowerCase();
		
	if(match = matchTypeVersion.exec(uaStr)){
		type = match[1];
		version = match[2];
	}
	
	function getRequest(){
		var key, value, parameter, parameters,
			i = 0,
			request = {}, 
			url = window.location;
			
		parameters = decodeURI(url.search).slice(1);
		if(parameters.length) {
			parameters = parameters.split("&");
			for(; i < parameters.length; i += 1) {
				parameter = parameters[i].split("=");
				key = parameter[0];
				value = parameter[1];
				request[key] = value;
			}
		}
		return request;
	}
	
	$.Browser =  {
		// 获取浏览器地址栏参数
		"getRequest" : getRequest,
		// 当前浏览器是否为IE
		"isIE" : type === "msie",
		// 当前浏览器是否为IE6
		"isIE6" : type === "msie" && version === "6.0",
		// 当前浏览器是否为IE7
		"isIE7" : type === "msie" && version === "7.0",
		// 当前浏览器是否为IE8
		"isIE8" : type === "msie" && version === "8.0",
		// 当前浏览器是否为IE9
		"isIE9" : type === "msie" && version === "9.0",
		// 当前浏览器是否为IE10
		"isIE10" : type === "msie" && version === "10.0",
		// 当前浏览器是否为谷歌
		"isChrome" : type === "chrome",
		// 当前浏览器是否为火狐
		"isFirefox" : type === "firefox"
	};
	
	// 对运行环境进行测试
	var a, all, opt, tds, input, select, fragment, eventName, isSupported,
		div = document.createElement("div");
	
	div.setAttribute("className", "t");
	div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";

	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName( "a" )[0];

	if(!all || !all.length || !a) {
		return {};
	}

	select = document.createElement("select");
	opt = select.appendChild(document.createElement("option"));
	input = div.getElementsByTagName( "input" )[0];
	
	$.Support = {
		// 使用innerHTML创建Dom元素时是否为前面的空白字符创建文本节点
		"leadingWhitespace" : (div.firstChild.nodeType === 3 ),
		// 浏览器是否会为table元素补上子元素tbody
		"tbody" : !div.getElementsByTagName("tbody").length,
		// 浏览器通过innerHTML插入链接元素时能否创建成功,IE6/7/8中返回false
		"htmlSerialize" : !!div.getElementsByTagName("link").length,
		// 是否元素的内联样式都可以通过getAttribute访问style
		"style" : /top/.test(a.getAttribute("style")),
		// 使用getAttribute获取href时是否值不变
		"hrefNormalized" : (a.getAttribute("href") === "/a" ),
		// 浏览器是否能正确的解释透明度的样式属性
		"opacity" : /^0.55/.test(a.style.opacity),
		// 浏览器是否支持style.cssFloat
		"cssFloat" : !!a.style.cssFloat,
		// 复选框没有指定值时，默认值是否为"on"
		"checkOn" : (input.value === "on" ),
		// 浏览器是否会为Select元素设置一个默认选中项
		"optSelected" : opt.selected,
		// 测试某些特殊属性是否能被正确设置到Dom上,此问题源自IE6/7,IE6/7会将某些特殊属性解析成源生属性
		"getSetAttribute" : div.className !== "t",
		// 表单是否支持 enctype属性
		"enctype" : !!document.createElement("form").enctype,
		// 克隆一个html5元素是否会引起问题
		'html5Clone' : document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",
		// submit事件是否在冒泡阶段触发
		"submitBubbles" : true,
		// change事件是否在冒泡阶段触发
		"changeBubbles" : true,
		// 是否能用delete方法清除Dom元素上的属性值
		"deleteExpando" : true,
		// 克隆Dom元素时是否会连同绑定在元素上的事件一起克隆
		"noCloneEvent" : true,
		// 更改Dom元素样式属性display:block为display:inline时,offsetWidth是否不会被影响,ie6/7中返回true
		"inlineBlockNeedsLayout" : false,
		// 当当前元素宽度被指定值且当前元素内部宽度超出当前元素时，当前元素宽度是否会变化,ie6中返回true
		"shrinkWrapBlocks" : false,
		// 浏览器是否能正确返回marginRight样式属性值
		"reliableMarginRight" : true,
		// 使用百分比指定各margin属性值时,是否会被解析成具体像素数值
		"pixelMargin" : true
	};
	
	// 页面渲染是否符合 W3C Box Model
	$.Support.boxModel = (document.compatMode === "CSS1Compat");
	
	input.checked = true;
	// 克隆checkbox元素时是否会连同选中状态一起被复制
	$.Support.noCloneChecked = input.cloneNode(true).checked;
	
	select.disabled = true;
	// 下拉框被禁用时，子选项的禁用状态不会被改变
	$.Support.optDisabled = !opt.disabled;
	
	try {
		delete div.test;
	} catch( e ) {
		$.Support.deleteExpando = false;
	}

	if(!div.addEventListener && div.attachEvent && div.fireEvent) {
		div.attachEvent("onclick", function() {
			$.Support.noCloneEvent = false;
		});
		div.cloneNode(true).fireEvent("onclick");
	}

	input = document.createElement("input");
	input.value = "t";
	input.setAttribute("type", "radio");
	
	// Input类型被javascript修改为 radio后,value值是否不变
	$.Support.radioValue = input.value === "t";
	
	input.setAttribute("checked", "checked");

	input.setAttribute("name", "t");

	div.appendChild(input);
	fragment = document.createDocumentFragment();
	fragment.appendChild(div.lastChild);
	
	// 文档片段对象中checkbox的选中状态能否被克隆
	$.Support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
	
	// 被添加到Dom树中的checkbox是否仍然保留原来的选中状态
	$.Support.appendChecked = input.checked;
	
	fragment.removeChild(input);
	fragment.appendChild(div);
	
	if(div.attachEvent) {
		for(i in {
			submit : 1,
			change : 1
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if(!isSupported) {
				div.setAttribute(eventName, "return;");
				isSupported = ( typeof div[eventName] === "function" );
			}
			$.Support[i + "Bubbles"] = isSupported;
		}
	}

	fragment.removeChild(div);
	
	// 清空测试元素避免IE中内存泄漏
	fragment = select = opt = div = input = null;
	
	// Dom树加载完成时运行测试
	fastDev.ready(function() {
		var td, html, inner, outer, style, container, marginDiv, conMarginTop, offsetSupport, 
			positionTopLeftWidthHeight, paddingMarginBorderVisibility, paddingMarginBorder, 
			body = document.getElementsByTagName("body")[0];

		if(!body) {
			// 如果页面为frameset布局则取消测试
			return;
		}

		conMarginTop = 1;
		paddingMarginBorder = "padding:0;margin:0;border:";
		positionTopLeftWidthHeight = "position:absolute;top:0;left:0;width:1px;height:1px;";
		paddingMarginBorderVisibility = paddingMarginBorder + "0;visibility:hidden;";
		style = "style='" + positionTopLeftWidthHeight + paddingMarginBorder + "5px solid #000;";
		html = "<div " + style + "display:block;'><div style='" + paddingMarginBorder + "0;display:block;overflow:hidden;'></div></div>" + "<table " + style + "' cellpadding='0' cellspacing='0'>" + "<tr><td></td></tr></table>";

		container = document.createElement("div");
		container.style.cssText = paddingMarginBorderVisibility + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
		body.insertBefore(container, body.firstChild);

		div = document.createElement("div");
		container.appendChild(div);

		div.innerHTML = "<table><tr><td style='" + paddingMarginBorder + "0;display:none'></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		isSupported = (tds[0].offsetHeight === 0 );

		tds[0].style.display = "";
		tds[1].style.display = "none";

		// 检查隐藏状态下offsetWidth和offsetHeight是否被正确设置
		$.Support.reliableHiddenOffsets = isSupported && (tds[0].offsetHeight === 0 );

		if(window.getComputedStyle) {
			div.innerHTML = "";
			marginDiv = document.createElement("div");
			marginDiv.style.width = "0";
			marginDiv.style.marginRight = "0";
			div.style.width = "2px";
			div.appendChild(marginDiv);
			$.Support.reliableMarginRight = (parseInt((window.getComputedStyle(marginDiv, null) || {
				marginRight : 0
			} ).marginRight, 10) || 0 ) === 0;
		}

		if( typeof div.style.zoom !== "undefined") {
			div.innerHTML = "";
			div.style.width = div.style.padding = "1px";
			div.style.border = 0;
			div.style.overflow = "hidden";
			div.style.display = "inline";
			div.style.zoom = 1;
			$.Support.inlineBlockNeedsLayout = (div.offsetWidth === 3 );

			div.style.display = "block";
			div.style.overflow = "visible";
			div.innerHTML = "<div style='width:5px;'></div>";
			$.Support.shrinkWrapBlocks = (div.offsetWidth !== 3 );
		}

		div.style.cssText = positionTopLeftWidthHeight + paddingMarginBorderVisibility;
		div.innerHTML = html;

		outer = div.firstChild;
		inner = outer.firstChild;
		td = outer.nextSibling.firstChild.firstChild;

		offsetSupport = {
			doesNotAddBorder : (inner.offsetTop !== 5 ),
			doesAddBorderForTableAndCells : (td.offsetTop === 5 )
		};

		inner.style.position = "fixed";
		inner.style.top = "20px";

		offsetSupport.fixedPosition = (inner.offsetTop === 20 || inner.offsetTop === 15 );
		inner.style.position = inner.style.top = "";

		outer.style.overflow = "hidden";
		outer.style.position = "relative";

		offsetSupport.subtractsBorderForOverflowNotVisible = (inner.offsetTop === -5 );
		offsetSupport.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== conMarginTop );

		if(window.getComputedStyle) {
			div.style.marginTop = "1%";
			$.Support.pixelMargin = (window.getComputedStyle(div, null) || {
				marginTop : 0
			} ).marginTop !== "1%";
		}

		if( typeof container.style.zoom !== "undefined") {
			container.style.zoom = 1;
		}

		body.removeChild(container);
		marginDiv = div = container = null;

		$.apply($.Support, offsetSupport);
	});
})(window);
// 控件库动画实现类
(function(window) {
	// 定时器ID 
	var timerId, 
		$ = window.fastDev,
		// 待执行动画对象数据
		animationList = [],
		// 匹配样式值以及单位
		matchValueUnit = /(\d*(?:.\d+)?)(.*)/,
		// 动画开关
		off = ($.Browser.isIE6 || $.Browser.isIE7) ? true : false;
	
	// 执行动画单位时间内的一帧
	// @private
	function tick() {
		for(var i = 0, animation; animation = animationList[i++]; ) {

			if(animation.status === "terminate") {
				animationList.splice(--i, 1);
				continue;
			}

			if(animation.status !== "pause" && execAnimation(animation)) {
				animation.status = "finish";
				if($.isFunction(animation.callback)) {
					try {
						animation.callback();
					} catch(e) {
					}
				}
				animationList.splice(--i, 1);
			}
		}

		if(animationList.length === 0) {
			window.clearInterval(timerId);
			timerId = null;
		}
	}

	// 解析动画配置执行动画
	// @private
	function execAnimation(animation) {
		var elemAnimation, propAnimation, propAnimationList, 
			i = 0, j = 0,
			elemAnimationList = animation.elemAnimationList;
			
		animation.status = "runing";
		// 遍历每一个设置了动画的元素
		for(; elemAnimation = elemAnimationList[i++]; ) {
			propAnimationList = elemAnimation.propAnimationList;
			// 遍历每一个设置了动画的属性
			for(; propAnimation = propAnimationList[j++]; ) {
				if(runPropAnimation.call(propAnimation, animation, elemAnimation)) {
					// 如果当前属性动画执行完成则从属性动画数组总移除并复位数组
					elemAnimation.finishPropAnimationList.push(propAnimationList.splice(--j, 1)[0]);
				}
			}

			// 属性动画全部完成时清空元素
			if(!propAnimationList.length) {
				animation.finishElemAnimationList.push(elemAnimationList.splice(--i, 1)[0]);
			}
		}

		// 元素上的动画全部完成时删除此动画
		return !elemAnimationList.length;
	}

	// 执行动画属性帧
	// @private
	function runPropAnimation(animation, elemAnimation) {
		// 动画当前帧元素值
		var currentValue,
			// 动画是否反向移动(开始值大于结束值)
			reverse = this.reverse,
			// 动画所操作的样式名称
			name = this.name,
			// 动画开始时的样式值
			startValue = this.startValue,
			// 动画结束时的样式值
			endValue = this.endValue,
			// 执行结束标志
			finish = false,
			// 动画当前帧时间
			nowTime = +new Date(),
			// 动画开始时间
			startTime = animation.startTime,
			// 动画持续时间
			duration = animation.speed,
			// 动画执行到当前帧所消耗的时间
			time = nowTime - startTime,
			// 动画运行超时
			timeout = nowTime - startTime > duration,
			// 动画开始时的样式值与结束时的样式值得差值的绝对值
			dValue = (startValue - endValue) * -1,
			// 当前帧动画距动画开始时的样式值得偏移值
			offsetValue = animation.easing(time, dValue, duration);

		// 计算当前帧动画的元素值
		currentValue = startValue + offsetValue;
		// 正向移动则判断当前值是否大于等于结束值
		// 反向移动则判断当前值是否小于等于结束值
		finish = reverse ? currentValue <= endValue : currentValue >= endValue;
		// 当动画运行完成或者超时，直接设置为动画结束时的样式值，返回true通知外层删除此动画
		if(finish || timeout) {
			$(elemAnimation.elem).css(name, endValue);
			return true;
		} else {
			$(elemAnimation.elem).css(name, currentValue);
			return false;
		}
	}

	// 生成动画类
	// @private
	function animationFactory(elems, props, speed, easing, callback) {
		var animation = new Animation(elems, props, speed, easing, callback);
		
		addAnimation(animation);
		return animation;
	}

	// 动画类
	function Animation(elems, props, speed, easing, callback) {
		this.speed = +speed;
		this.easing = $.Arithmetic[easing] || $.Arithmetic.linear;
		this.callback = callback;
		this.elemAnimationList = [];
		this.finishElemAnimationList = [];
		this.startTime = +new Date();
		this.status = "ready";

		for(var i = 0, elem; elem = elems[i++]; ) {
			this.elemAnimationList.push(new ElemAnimation(elem, props));
		}

		if(isNaN(this.speed)) {
			this.speed = 0;
		}
	}

	function ElemAnimation(elem, props) {
		this.propAnimationList = [];
		this.elem = elem;
		this.finishPropAnimationList = [];
		for(var name in props) {
			this.propAnimationList.push(new PropAnimation(this.elem, name, props[name]));
		}
	}

	// 属性动画
	function PropAnimation(elem, name, value) {
		var 
			currentValue = $(elem).css(name), 
			startValueUnit = matchValueUnit.exec(currentValue), 
			endValueUnit = matchValueUnit.exec(value);

		this.name = name;
		this.startValue = +startValueUnit[1] || 0;
		this.endValue = +endValueUnit[1];
		this.reverse = this.startValue > this.endValue;
		this.unit = endValueUnit[2];
	}

	// 增加动画
	function addAnimation(animation) {
		animationList.push(animation);

		if(!timerId) {
			timerId = window.setInterval(tick, 13);
		}
	}

	// 反向设置动画
	function reverseAnimation(oldAnimation) {
		var oldElemAnimation, newElemAnimation, 
			oldPropAnimation, newPropAnimation,
			oldPropAnimationList, newPropAnimationList,
			newElemAnimationList, i = 0, j = 0,
			newAnimation = $.clone(oldAnimation),
			oldElemAnimationList = oldAnimation.finishElemAnimationList;
			
		// 重定向老动画中的元素动画数组的指向，使修改不影响老动画
		newAnimation.elemAnimationList = newElemAnimationList = [];
		// 遍历老元素动画数组
		for(; oldElemAnimation = oldElemAnimationList[i]; i++) {
			// 以老元素动画数组为参照给新元素动画数组每个元素赋值
			newElemAnimationList[i] = newElemAnimation = $.clone(oldElemAnimation);
			// 缓存老属性动画数组供新属性动画数组遍历赋值使用
			oldPropAnimationList = oldElemAnimation.finishPropAnimationList;
			// 重定向老元素动画中的属性动画数组的指向，使修改不影响老元素动画
			newElemAnimation.propAnimationList = newPropAnimationList = [];
			// 遍历老属性动画数组
			for(; oldPropAnimation = oldPropAnimationList[j]; j++) {
				// 以老属性动画数组为参照给新属性动画数组每个元素赋值
				newPropAnimationList[j] = newPropAnimation = $.clone(oldPropAnimation);
				// 对调元素的起始值与结束值，使动画可以反向执行
				newPropAnimation.startValue = [oldPropAnimation.startValue, oldPropAnimation.endValue];
				newPropAnimation.endValue = newPropAnimation.startValue[0];
				newPropAnimation.startValue = newPropAnimation.startValue[1];
				// 取反属性操作反向标志属性
				newPropAnimation.reverse = !newPropAnimation.reverse;
			}
		}
		// 重设新动画的开始时间
		newAnimation.startTime = +new Date();
		return newAnimation;
	}
	
	function enable(){
		off = false;
	}
	
	function disable(){
		off = true;
	}
	
	function isActive(){
		return off !== true;
	}


	$.Animate = {
		"enable" : enable,
		"disable" : disable,
		"isActive" : isActive,
		"animationFactory" : animationFactory,
		"addAnimation" : addAnimation,
		"reverseAnimation" : reverseAnimation
	};
})(window); 
// 动画算法介绍
// linear 线性动画效果
// quad 二次方的缓动效果
// cubic 三次方的缓动效果
// quart 四次方的缓动效果
// quint 五次方的缓动效果
// sine 正弦曲线的缓动效果
// expo 指数曲线的缓动效果
// circ 圆形曲线的缓动效果
// elastic 指数衰减的正弦曲线缓动效果
// back 超过范围的三次方缓动效果
// bounce 指数衰减的反弹缓动
// easeIn 从0开始加速的缓动
// easeOut 减速到0的缓动
// easeInOut 前半段从0开始加速，后半段减速到0的缓动
// @param current_time 当前时间(当前时间-开始时间)
// @param change_in_value 变化量(动画起始值与结束值的差值的绝对值)
// @param duration 动画的持续时间
(function(window) {

	function linear(t, c, d) {
		return c * t / d;
	}

	function quad_easeIn(t, c, d) {
		return c * (t /= d) * t;
	}

	function quad_easeOut(t, c, d) {
		return -c * (t /= d) * (t - 2);
	}

	function quad_easeInOut(t, c, d) {
		return (t /= d / 2) < 1 ? c / 2 * t * t : -c / 2 * ((--t) * (t - 2) - 1);
	}

	function cubic_easeIn(t, c, d) {
		return c * (t /= d) * t * t;
	}

	function cubic_easeOut(t, c, d) {
		return c * (( t = t / d - 1) * t * t + 1);
	}

	function cubic_easeInOut(t, c, d) {
		return (t /= d / 2) < 1 ? c / 2 * t * t * t : c / 2 * ((t -= 2) * t * t + 2);
	}

	function quart_easeIn(t, c, d) {
		return c * (t /= d) * t * t * t;
	}

	function quart_easeOut(t, c, d) {
		return -c * (( t = t / d - 1) * t * t * t - 1);
	}

	function quart_easeInOut(t, c, d) {
		return (t /= d / 2) < 1 ? c / 2 * t * t * t * t : -c / 2 * ((t -= 2) * t * t * t - 2);
	}

	function quint_easeIn(t, c, d) {
		return c * (t /= d) * t * t * t * t;
	}

	function quint_easeOut(t, c, d) {
		return c * (( t = t / d - 1) * t * t * t * t + 1);
	}

	function quint_easeInOut(t, c, d) {
		return (t /= d / 2) < 1 ? c / 2 * t * t * t * t * t : c / 2 * ((t -= 2) * t * t * t * t + 2);
	}

	function sine_easeIn(t, c, d) {
		return -c * Math.cos(t / d * (Math.PI / 2)) + c;
	}

	function sine_easeOut(t, c, d) {
		return c * Math.sin(t / d * (Math.PI / 2));
	}

	function sine_easeInOut(t, c, d) {
		return -c / 2 * (Math.cos(Math.PI * t / d) - 1);
	}

	function expo_easeIn(t, c, d) {
		return (t === 0) ? 0 : c * Math.pow(2, 10 * (t / d - 1));
	}

	function expo_easeOut(t, c, d) {
		return (t === d) ? 0 + c : c * (-Math.pow(2, -10 * t / d) + 1);
	}

	function expo_easeInOut(t, c, d) {
		return t === 0 ? 0 : t === d ? 0 + c : (t /= d / 2) < 1 ? c / 2 * Math.pow(2, 10 * (t - 1)) : c / 2 * (-Math.pow(2, -10 * --t) + 2);
	}

	function circ_easeIn(t, c, d) {
		return -c * (Math.sqrt(1 - (t /= d) * t) - 1);
	}

	function circ_easeOut(t, c, d) {
		return c * Math.sqrt(1 - ( t = t / d - 1) * t);
	}

	function circ_easeInOut(t, c, d) {
		return (t /= d / 2) < 1 ? -c / 2 * (Math.sqrt(1 - t * t) - 1) : c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
	}

	function elastic_easeIn(t, c, d) {
		var p, a, s;

		if (t === 0) {
			return 0;
		}

		if ((t /= d) === 1) {
			return 0 + c;
		}

		if (!p) {
			p = d * 0.3;
		}

		if (!a || a < Math.abs(c)) {
			a = c;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(c / a);
		}

		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p));
	}

	function elastic_easeOut(t, c, d) {
		var p, a, s;

		if (t === 0) {
			return 0;
		}

		if ((t /= d) === 1) {
			return 0 + c;
		}

		if (!p) {
			p = d * 0.3;
		}

		if (!a || a < Math.abs(c)) {
			a = c;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(c / a);
		}

		return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + 0);
	}

	function elastic_easeInOut(t, c, d) {
		var p, a, s;

		if (t === 0) {
			return 0;
		}

		if ((t /= d / 2) === 2) {
			return 0 + c;
		}

		if (!p) {
			p = d * (0.3 * 1.5);
		}

		if (!a || a < Math.abs(c)) {
			a = c;
			s = p / 4;
		} else {
			s = p / (2 * Math.PI) * Math.asin(c / a);
		}

		return t < 1 ? -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) : a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c;
	}

	function back_easeIn(t, c, d) {
		var s = 1.70158;
		return c * (t /= d) * t * ((s + 1) * t - s);
	}

	function back_easeOut(t, c, d) {
		var s = 1.70158;
		return c * (( t = t / d - 1) * t * ((s + 1) * t + s) + 1);
	}

	function back_easeInOut(t, c, d) {
		var s = 1.70158;
		return (t /= d / 2) < 1 ? c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) : c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
	}

	function bounce_easeIn(t, c, d) {
		return c - bounce_easeOut(d - t, c, d);
	}

	function bounce_easeOut(t, c, d) {
		if ((t /= d) < (1 / 2.75)) {
			return c * (7.5625 * t * t);
		} else if (t < (2 / 2.75)) {
			return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);
		} else if (t < (2.5 / 2.75)) {
			return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);
		} else {
			return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);
		}
	}

	function bounce_easeInOut(t, c, d) {
		return t < d / 2 ? bounce_easeIn(t * 2, c, d) * 0.5 : bounce_easeOut(t * 2 - d, c, d) * 0.5 + c * 0.5;
	}

	window.fastDev.Arithmetic = {
		"linear" : linear,
		"quad_easeIn" : quad_easeIn,
		"quad_easeOut" : quad_easeOut,
		"quad_easeInOut" : quad_easeInOut,
		"cubic_easeIn" : cubic_easeIn,
		"cubic_easeOut" : cubic_easeOut,
		"cubic_easeInOut" : cubic_easeInOut,
		"quart_easeIn" : quart_easeIn,
		"quart_easeOut" : quart_easeOut,
		"quart_easeInOut" : quart_easeInOut,
		"quint_easeIn" : quint_easeIn,
		"quint_easeOut" : quint_easeOut,
		"quint_easeInOut" : quint_easeInOut,
		"sine_easeIn" : sine_easeIn,
		"sine_easeOut" : sine_easeOut,
		"sine_easeInOut" : sine_easeInOut,
		"expo_easeIn" : expo_easeIn,
		"expo_easeOut" : expo_easeOut,
		"expo_easeInOut" : expo_easeInOut,
		"circ_easeIn" : circ_easeIn,
		"circ_easeOut" : circ_easeOut,
		"circ_easeInOut" : circ_easeInOut,
		"elastic_easeIn" : elastic_easeIn,
		"elastic_easeOut" : elastic_easeOut,
		"elastic_easeInOut" : elastic_easeInOut,
		"back_easeIn" : back_easeIn,
		"back_easeOut" : back_easeOut,
		"back_easeInOut" : back_easeInOut,
		"bounce_easeIn" : bounce_easeIn,
		"bounce_easeOut" : bounce_easeOut,
		"bounce_easeInOut" : bounce_easeInOut
	};

})(window);
// 事件操作类，主要处理各种浏览器之间事件操作的兼容性问题
(function(window){
	var 
		$ = window.fastDev,
		beforeunload  = { "bind" : beforeunload_bind, "unbind" : beforeunload_unbind },
		selectstart = { "bind" : selectstart_bind, "unbind" : selectstart_unbind },
		// 特殊事件处理
		specialHandling = { "beforeunload" : beforeunload, "selectstart" : selectstart };
		
	function beforeunload_bind(handle){
		if ($.isWindow(this)) {
			this.onbeforeunload = handle;
		}
	}
	
	function beforeunload_unbind(handle){
		if ( this.onbeforeunload === handle ) {
			this.onbeforeunload = null;
		}
	}
	
	function selectstart_bind(handle){
		this.onselectstart = handle;
	}
	
	function selectstart_unbind(handle){
		if ( this.onselectstart === handle ) {
			this.onselectstart = null;
		}
	}
	
	// 绑定事件
	// @param {Element} elem Dom元素
	//@param {String} type 事件类型
	// @param {Function} handle 事件句柄
	function bind(elem, type, handle){
		if(!$.isFunction(handle)) {
			return;
		}
		
		var hooks = specialHandling[type] || {};
		
		if( !hooks.bind || hooks.bind.call( elem, handle ) === false){
			if(elem.addEventListener) {
				// 第三个参数约定侦听器在捕捉阶段还是在冒泡阶段处理事件，默认为冒泡阶段
				// 因IE并未实现捕捉阶段的事件处理，所以为了兼容性处理，此参数一般不另行设置，以免各浏览器效果不一致
				elem.addEventListener(type, handle, false);
			} else if(elem.attachEvent) {
				elem.attachEvent("on" + type, handle);
			}
		}
	}
	
	// 删除绑定事件
	// @param {Element} elem Dom元素
	// @param {String} type 事件类型
	// @param {Function} handle 事件句柄
	function unbind(elem, type, handle) {
		if(!$.isFunction(handle)) {
			return;
		}
		
		var hooks = specialHandling[type] || {};
		
		if( !hooks.unbind || hooks.unbind.call( elem, handle ) === false){
			if(elem.removeEventListener) {
				elem.removeEventListener(type, handle, false);
			} else if(elem.detachEvent) {
				elem.detachEvent("on" + type, handle);
			}
		}
	}
	
	// 停止事件传播
	// @param {Event} event 事件对象
	function stopBubble(event) {
		if(!$.isValid(event)){
			return;
		}
		
		if(event.stopPropagation) {
			event.stopPropagation();
			event.preventDefault();
		} else {
			event.cancelBubble = true;
			event.returnValue = false; 
		}
	}
	
	$.Event =  {
		"bind" : bind,
		"unbind" : unbind,
		"stopBubble" : stopBubble
	};
})(window);
// 队列实现类，使队列中的方法按照先入先出顺序执行，支持Ajax异步使用

(function($){
	// 队列配置项
	var option = {
		// 普通执行函数配置信息时必填
		"handle" : $.noop,
		// 标明当前队列句柄类型 (ajax、normal)
		"type" : "ajax",
		// 创建ajax执行函数配置信息息时必填
		"url" : "",
		// 队列句柄类型为ajax时，指定请求类型 (get、post)
		"method" : "get",
		// 队列类型为ajax时，data做为请求的附加参数发送
		// 队列句柄类型为normal时，data做为success事件参数传入
		"data" : null,
		// 队列元素执行成功后回调
		"success" : $.noop,
		//  队列元素执行失败后回调
		"failure" : $.noop,
		// 队列元素执行完成时回调
		"complete" : $.noop,
		// ajax类型队列元素的请求超时时间
		"timeout" : 30000
	};
	
	// 创建队列中的执行句柄
	function createHandle(settings){
		return $.apply({}, option, settings);
	}
	
	function addFirst(settings){
		this.add(settings, 0);
	}
	
	function addLast(settings){
		this.add(settings);
	}
	
	function add(settings, index){
		var handle = createHandle(settings);
		
		if(index >= 0 && index < this.queueList.length) {
			this.queueList.splice(index, 0, handle);
		} else {
			this.queueList.push(handle);
		}
		
		if( handle.type === "ajax"){
			$.Core.DataBus.increaseReqCount();
		}
		this.exec();
	}
	
	function start(){
		if(this.queueList.length > 0) {
			var completeHandle,queue = this, handle = this.queueList.shift();
			
			if( handle.type === "ajax" ){
				completeHandle = handle.complete;
				handle.complete = function(rsp) {
					$.Core.DataBus.processing(rsp, handle.success, handle.failure, completeHandle);
					$.Core.DataBus.reduceReqCount();
					queue.start();
				};
				return $.Ajax.doAjax(handle);
			}
			
			try {
				handle.success(handle.handle(handle.data));
			} catch(e) {
				handle.failure(e);
			} finally {
				handle.complete();
				this.start();
			}
		} else {
			this.state = "stop";
		}
	}
	
	function exec() {
		return this.state === "stop" && this.queueList.length >0 && (this.state = "start") && this.start();
	}
	
	function getInstance(){
		return {
			"state" : "stop",
			"add" : add,
			"exec" : exec,
			"start" : start,
			"addFirst" : addFirst,
			"addLast" : addLast,
			"queueList" : []
		};
	}
	
	$.queue = getInstance();
	
	$.Queue =  {
		"getInstance" : getInstance
	};
	
})(fastDev);


/*!
 * Sizzle CSS Selector Engine v1.9.4-pre
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-06-03
 */
(function( window, undefined ) {

var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,
	$ = window.fastDev,
	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	// arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/*
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}

/*
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/*
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/*
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/*
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/*
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/*
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/*
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/*
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Expose support vars for convenience
support = Sizzle.support = {};

/*
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}

	/* Attributes
	---------------------------------------------------------------------- */
	
	// Support: IE8
	// Check if empty table cells still have offsetWidth/Height
	support.reliableHiddenOffsets = assert(function( div ) {
		var tds, isSupported;
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";
		
		return isSupported && ( tds[ 0 ].offsetHeight === 0 );
	});

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find.ID = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter.ID = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find.ID;

		Expr.filter.ID =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find.TAG = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find.CLASS = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );

			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		}

		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/*
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

/*
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr.CHILD.test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( !$.isValid(result) ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos.empty( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( !$.isValid(attr = elem.getAttribute("type")) || attr.toLowerCase() === elem.type );
		},
		
		"hidden" : function( elem ){
			return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
				(!support.reliableHiddenOffsets && (elem.style && elem.style.display) === "none");
		},
		
		"visible" : function( elem ){
			return !Expr.pseudos.hidden( elem );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos.nth = Expr.pseudos.eq;

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = $.isValid(map);

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = $.isValid(expandContext),
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find.TAG( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += !$.isValid(contextBackup) ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; $.isValid(elem = elems[i]); i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find.ID( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return !$.isValid(div.getAttribute("disabled"));
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}

	window.fastDev.Sizzle = Sizzle;
// EXPOSE

})( window );
(function($){
	var StringUtil, NumberUtil, DateUtil, UrlUtil, JsonUtil, ObjectUtil, PositionUtil,
		// 字符串左右空格匹配
		matchSpace = /(^\s*)|(\s*$)/g,
		// 字符串左边空格匹配
		matchLeftSpace = /(^\s*)/g,
		// 字符串右边空格匹配
		matchRightSpace = /(\s*$)/g,
		// 字符串中的HTML标签匹配
		matchHtml = /<(\S*?)[^>]*>.*?|< .*? \/>/g,
		// 字符串中中文字符匹配
		matchCh = /[^\x00-\xff]/g,
		// 正则表达式字符串中的特殊字符
		matchSpecialRegStr = /([.*+?^=!:\\${}()|[\\]\/\\\\])/g,
		// 匹配样式值和单位
		matchCssValueUnit = /^(-?\d+\.?\d+|-?\d)(px|%|em)?$/i,
		// 数字匹配
		matchNumber = /(?:\d*\.|)\d+/,
		// 匹配字符串中的日期值
		matchDate = /(\d+)[^\d](\d+)[^\d](\d+)(?:(?:\s(\d+)[^\d](\d+)(?:[^\d](\d+)|))(?:\.(\d+)|)|)/;
	
	
	// 删除传入值首尾空格
	// @param {String} val 需要删除空格的字符串
	function trim(val){
		 return val ? (val += '').trim ? val.trim() : val.replace(matchSpace, "") : val;
	}
	// 删除传入值左边空格
	// @param {String} val 需要删除左边空格的字符串
	function ltrim(val){
		return val ? (val += '').replace( matchLeftSpace, '' ) : val;
	}
	
	// 删除字符串右边空格
	// @param {String} val 需要删除右边空格的字符串
	function rtrim(val){
		return val ? (val += '').replace( matchRightSpace, '' ) : val;
	}
	
	// 去除传入值中的HTML标签
	// @param {String} val 需要去除HTML标签的字符串
	function trimHtml(val) {
        return val ? (val += '').replace(matchHtml, "") : val;
    }
    
    // 获取含中文的字符串长度
    // @param {String} val 需要获取长度的字符串
    function getChLength(val){
		return val ? (val += '').replace(matchCh, '..').length : 0;
    }
    
    // 将以"-"分隔的日期格式字符串转换为日期对象
    // @param {String} val 需要转换为日期的字符串
    function strParseDate(val) {
        return new Date(Date.parse(val.replace(/-/g, "/")));
    }
    
    // 将目标字符串中可能会影响正则表达式构造的字符串进行转义
    // @param {String} val 需要转换为标准格式的正则字符串
	function escapeReg(source) {
        return String(source).replace(matchSpecialRegStr, '\\$1');
    }
    
    // 字符串第一个字符大写
    // @param {String} string 需要转换首字符为大写的字符串
    // @return {String} character 需要转换为大写的字符
    function capitalize(string, character) {
        if (character) {
            return (character + "").toUpperCase();
        } else {
			return string.charAt(0).toUpperCase() + string.slice(1);
        }
    }
    
	// 将一个带px、%、em的单位值转换为整型数值
	// em单位以当前文档的字体样式（font-size）属性值转换
	// 默认情况下，1em 等于 16px
	// @param {String|Number} val 需要截除单位的值
	// @param {Number|DomObject} [max] 百分比数值转换时的被乘数，或者DOMObject对象，以便在需要时才获取元素的尺寸值
	// @param {String} [fnName] 函数名
	function stripUnits(val, max, fnName) {
        if ( !! val || val === 0) {
            if (typeof val === 'number') {
                return parseFloat(val);
            } else if (typeof val === "string") {
                var num = matchCssValueUnit.exec(val);
                if ( !! num) {
                    if (num[2] === '%') {
                        return (max === 0 ? 0 : max ? max.alias === "DomObject" ? max[fnName]() : max : 100) * num[1] / 100;
                    } else if (num[2] === 'em') {
                        return num[1] * stripUnits($(document.body).css('font-size') || 16, 16);
                    }
                    return parseFloat(num[1]);
                }
            }
        }
        return NaN;
    }
    
	// 高亮关键字
	// @param {Element} node 元素节点，其子节点上的关键字会一并处理
	// @param {RegExp} regx 匹配用的正则表达式（若关键字中包含正则表达式的元字符时，需注意要将关键字中的正则表达式元字符作转义处理）
	// @param {String} [nodeName="em"] 用于包裹文本的节点名称
	// @param {String} [className="ui-highlight"] 需添加的高亮样式名
	// @param {Object} [css] 行内样式值，必须使用普通对象形式传参
	function highLight(node, regx, nodeName, className, css) {
        if (node.nodeType === 3) {
            var match = node.data.match(regx);
            if (match) {
                // 默认使用em标签
                var highLightDom = document.createElement(nodeName || "em");
                // 默认高亮样式名ui-highlight
                highLightDom.className = className || "ui-highlight";
                // 添加行内样式
                if ($.isPlainObject(css)) {
                    for (var name in css) {
                        if (css[name] !== undefined) {
                            $.Dom.css(highLightDom, name, css[name]);
                        }
                    }
                }
                var wordNode = node.splitText(match.index);
                wordNode.splitText(match[0].length);
                var wordClone = wordNode.cloneNode(true);
                highLightDom.appendChild(wordClone);
                wordNode.parentNode.replaceChild(highLightDom, wordNode);
                return 1;
            }
        } else if ((node.nodeType === 1 && node.childNodes) && // 处理包含子元素的节点
        !/(script|style)/i.test(node.tagName) && // 排除脚本和样式节点
        !(node.tagName === nodeName.toUpperCase() && node.className === className)) { // 排除已经高亮的节点
            for (var i = 0; i < node.childNodes.length; i++) {
                i += highLight(node.childNodes[i], regx, nodeName, className);
            }
        }
        return 0;
    }
    
    // 为目标数字添加逗号分隔
	// @param {number} source 需要处理的数字
	// @param {number} length (Optional) 两次逗号之间的数字位数，默认为3位
	function comma(source, length){
		 if (!length || length < 1) {
            length = 3;
        }

        source = String(source).split(".");
        source[0] = source[0].replace(new RegExp('(\\d)(?=(\\d{' + length + '})+$)', 'ig'), "$1,");
        return source.join(".");
	}
	
	// 对目标数字进行0补齐处理
	// @param {number} source 需要处理的数字
	// @param {number} length 需要输出的长度
	function pad(source, length){
		var pre = "",
            negative = (source < 0),
            string = String(Math.abs(source));

        if (string.length < length) {
            pre = (new Array(length - string.length + 1)).join('0');
        }

        return (negative ? "-" : "") + pre + string;
	}
	
	// 数字格式化
	// @param {Number} value 待格式化数字
	// @param {String} format 目标格式(0,0.00)
	function numberFormat(value, formatStr) {
        if (!$.isString(formatStr)) {
            return value;
        }

        if (!matchNumber.test(value)) {
            return value;
        }

        value = parseFloat(value);

        var hasComma = -1 < formatStr.indexOf(','),
            psplit = formatStr.split('.');

        if (psplit.length > 1) {
            value = value.toFixed(psplit[1].length);
        } else {
            value = value.toFixed(0);
        }

        var fnum = value.toString();

        if (hasComma) {
            psplit = fnum.split('.');

            var cnum = psplit[0],
                parr = [],
                j = cnum.length,
                m = Math.floor(j / 3),
                n = cnum.length % 3 || 3;

            for (var i = 0; i < j; i += n) {
                if (i !== 0) {
                    n = 3;
                }
                parr[parr.length] = cnum.substr(i, n);
                m -= 1;
            }

            fnum = parr.join(',');

            if (psplit[1]) {
                fnum += '.' + psplit[1];
            }
        }

        return fnum;
    }
    
    function replacer(patternPart, result, pattern) {
        return pattern.replace(patternPart, result);
    }
	
	// 对目标日期对象进行格式化
	// @param {Date} date 日期对象
	// @param {string} pattern 日期格式化规则
	// 格式表达式，变量含义:
	// yyyy: 带 0 补齐的四位年表示
	// yy: 带 0 补齐的两位年表示
	// MM: 带 0 补齐的两位月表示
	// M: 不带 0 补齐的月表示
	// dd: 带 0 补齐的两位日表示
	// d: 不带 0 补齐的日表示
	// hh: 带 0 补齐的两位 12 进制时表示
	// h: 不带 0 补齐的 12 进制时表示
	// HH: 带 0 补齐的两位 24 进制时表示
	// H: 不带 0 补齐的 24 进制时表示
	// mm: 带 0 补齐两位分表示
	// m: 不带 0 补齐分表示
	// ss: 带 0 补齐两位秒表示
	// s: 不带 0 补齐秒表示
	// ms: 毫秒
	function dateFormat(date, pattern){
		 if (!$.isString(pattern)) {
            return date.toString();
        }

        if ($.isString(date)) {
            var m;
            if (m = matchDate.exec(date)) {
                date = new Date(m[1], +m[2] - 1, m[3], m[4] || 0, m[5] || 0, m[6] || 0, m[7] || 0);
            }
        }
        if (!$.isDate(date)) {
            return "";
        }

        var year = date.getFullYear(),
            month = date.getMonth() + 1,
            date2 = date.getDate(),
            hours = date.getHours(),
            minutes = date.getMinutes(),
            seconds = date.getSeconds(),
            milliSeconds = date.getMilliseconds();

        pattern = replacer(/yyyy/g, pad(year, 4),pattern);
        pattern = replacer(/yy/g, pad(parseInt(year.toString().slice(2), 10), 2),pattern);
        pattern = replacer(/MM/g, pad(month, 2),pattern);
        pattern = replacer(/M/g, month,pattern);
        pattern = replacer(/dd/g, pad(date2, 2),pattern);
        pattern = replacer(/d/g, date2,pattern);

        pattern = replacer(/HH/g, pad(hours, 2),pattern);
        pattern = replacer(/H/g, hours,pattern);
        pattern = replacer(/hh/g, pad(hours % 12, 2),pattern);
        pattern = replacer(/h/g, hours % 12,pattern);
        pattern = replacer(/ms/g, milliSeconds,pattern);
        pattern = replacer(/mm/g, pad(minutes, 2),pattern);
        pattern = replacer(/m/g, minutes,pattern);
        pattern = replacer(/ss/g, pad(seconds, 2),pattern);
        pattern = replacer(/s/g, seconds,pattern);

        return pattern;
	}
	
	// 将目标字符串转换成日期对象
	// @param {string} source 目标字符串
	// 可转换日期格式:
	// 2010/5/10
	// July,2010,3,23
	// Tuesday November 9 1996 7:30 PM
	// 2010-01-01 12:23:39
	function parse(source){
		var m;
        if ('string' === typeof source) {
            if (m = matchDate.exec(source)) {
                return new Date(m[1], +m[2] - 1, m[3], m[4] || 0, m[5] || 0, m[6] || 0, m[7] || 0);
            } else {
                return new Date(source);
            }
        }

        return new Date();
	}
	
	// 将json对象解析成地址栏参数格式字符串,特殊字符将被被编码
	// @param {Object} json 需要解析的json对象
	// @param {Boolean} encode 是否转换时做编码
	// @return {string} - 解析结果字符串，其中值将被URI编码，{a:'&1 '} ==> "a=%261%20"。
    function jsonToQuery(json, encode) {
        var result = [], itemLen;
        $.each(json, function (key, item) {
            result.push(key + '=' + parseString(item, encode));
        });

        return result.join('&');
    }
    
	// 解析目标URL中的参数成json对象
	// @param {string} url 地址字符串
	function queryToJson(url, decode) {
        var query = url.substr(url.lastIndexOf('?') + 1),
            params = query.split('&'),
            len = params.length,
            result = {}, i = 0,
            key, value, item, param;

        for (; i < len; i++) {
            if (!params[i]) {
                continue;
            }
            param = params[i].split('=');
            key = param[0];
            value = decode===true?decodeURIComponent(param[1]) : param[1];

            item = result[key];
            if ('undefined' === typeof item) {
                result[key] = value;
            } else if ($.isArray(item)) {
                item.push(value);
            } else { // 这里只可能是string了
                result[key] = [item, value];
            }
        }

        return result;
    }
    
	// 将Json格式字符串转换为Json对象
	// @param {String} str Json格式字符串
	function parseJson(str, jsonStr) {
        if (!str) {
            return null;
        }
        if (typeof str === "string") {
            jsonStr = trim(str.replace(/(^\r*\n*\t*\s*)|(\r*\n*\t*\s*$)/g, ""));
        } else {
            return str;
        }
        try {
            if (window.JSON && window.JSON.parse) {
                return window.JSON.parse(jsonStr);
            }
        } catch (e) {}

        if (/^\[[\w\W]+\]$|^\{[\w\W]*\}$/.test(jsonStr)) {
            return parseObject("return (" + jsonStr + ")")();
        } else {
            return str;
        }
    }
    
	// 将JsonObject对象转换为Json格式字符串
	// @param {JsonObject} object Json对象
	// @param {Boolean} encode 是否转换时做编码
	function parseString(obj, encode, json) {
        if ($.isString(obj)) {
            obj = encode ? encodeURIComponent(obj) : obj;
            if (json) {
                obj = "\"" + obj + "\"";
            }
            return obj;
        }

        if (window.JSON) {
            try {
                if (encode) {
                    return JSON.stringify(obj, function (k, v) {
                        if ($.isString(v)) {
                            return encodeURIComponent(v);
                        }
                        return v;
                    });
                }
                return JSON.stringify(obj);
            } catch (e) {}
        }

        var data = [];
        if ($.isArray(obj)) {
            for (var i = 0, dataItem; dataItem = obj[i]; i++) {
                data.push(parseString(dataItem, encode, true));
            }
            return "[" + data.join(",") + "]";
        }

        if ($.isPlainObject(obj)) {
            for (var p in obj) {
                data.push('"' + p + '":' + parseString(obj[p], encode, true));
            }
            return "{" + data.join(",") + "}";
        }

        return obj + "";
    }
    
	// 将字符串转换为对象
    function parseObject() {
        return Function.apply(window, arguments);
    }
    
	// 当前页面可通过fastDev访问的顶层页面window对象
	var top = (function () {
        var 
			top = window,
            test = function (name) {
                try {
                    return window[name].fastDev && !window[name].document.getElementsByTagName("frameset").length;
                } catch (e) {
                    return false;
                }
            };
        return test("top") ? window.top : test("parent") ? window.parent : top;
	})();
	
	// 将目标元素定位至参照元素在当前可视区域的附近
    // 支持跨级定位
	// @param {DomObject} target 目标元素（必须是DomObject对象）
	// @param {DomObject} reference 参照元素（必须是DomObject对象）
	// @param {Window} [context=window] 定位所处的窗口对象 ，默认为当前窗口对象
	// @param {Number} [margin=0] 目标元素与参照元素之间的额外边距值（为0时目标元素将紧贴着参照元素定位展现）
	// @param {Boolean} [allowAdjustHeight=true] 是否允许调节目标元素的高度
	// @param {String} [direction="auto"] 设置自定义弹出方向，为以下枚举值：auto（自动）、up（始终向上弹）、down（始终向下弹）
	function locate(target, reference, context, margin, allowAdjustHeight, direction) {
        if (!target || !reference || !$.isDomObject(target) || !$.isDomObject(reference) || !target.elems[0] || !reference.elems[0]) {
            return target;
        }
        margin = parseInt(margin, 10) || 0;
        allowAdjustHeight = (allowAdjustHeight === false || /up|down/.test(direction)) ? false : true;
        context = $.isWindow(context) ? context : window;
        var ref = reference.elems[0], path;
        if (context !== window && !(path = ref.locateReferencePath)) {
            var id = "@ref" + $.getID(),
                selector = ref.tagName.toLowerCase() + "[locateReferenceId='" + id + "']";
            reference.attr("locateReferenceId", id);
            path = ref.locateReferencePath = !context.fastDev ? [] : $.Util.PositionUtil.getIframePath(function ($) {
                return $(selector).hasElem();
            }, context);
        }
        var rect = $.Util.PositionUtil.getBoundingRect(reference, path),
            top = rect.top + reference.outerHeight(true) + margin,
            height = target.outerHeight(true),
            fast = context.fastDev,
            win = fast(context),
            doc = fast(context.document),
            winHeight = win.height(),
            winWidth = win.width(),
            docLeft = doc.scrollLeft(),
            docTop = doc.scrollTop(),
            upper = rect.top - docTop - margin,
            lower = docTop + winHeight - top,
            decrease = upper < height && lower < height,
            upTop = rect.top - height - margin,
            offset = {
                left: Math.max(docLeft, Math.min(rect.left, winWidth - target.outerWidth(true) + docLeft)),
                top: direction === "up" ? upTop : direction === "down" ? top : (lower > height || (decrease && !allowAdjustHeight)) ? top : upper > lower ? upTop : top
            }, targetHeight;
        if (decrease && allowAdjustHeight) {
            targetHeight = target.height();
            offset.height = Math.max(Math.max(targetHeight - height + (upper > lower ? upper : lower) - 2, Math.min(20, targetHeight)), 0);
            offset.top += upper > lower ? targetHeight - offset.height : 0;
        }
        return target.css(offset);
    }
    
	// 获取目标元素相对于浏览器窗口的绝对坐标以及目标元素的（内容）宽高信息
	// <p>若目标元素未处于当前可视区域内，则计算可能会出现偏差
	// @param {DomObject} target 目标元素，必须为DomObject对象
	// @param {Array} path 目标元素的路径信息，可以通过fastDev.Util.PositionUtil.getIframePath函数来获取
	// @return {Object} 目标元素相对于浏览器窗口的绝对left、top、width、height信息
	function getBoundingRect(target, path) {
        for (var nodes = (path = path || []).slice(0), parent = (nodes[0] || "").parent, doc = parent ? parent.fastDev(parent.document) : $(), offset = {
            left: 0,
            top: 0
        }, topDoc = doc, node, elem, position; node = nodes.shift(); doc = node.document) {
            position = (elem = node.iframe).offset();
            offset.left += (position.left - doc.scrollLeft() + (parseInt(elem.css("marginLeft"), 10) || 0) + (parseInt(elem.css("borderLeftWidth"), 10) || 0) + (parseInt(elem.css("paddingLeft"), 10) || 0));
            offset.top += (position.top - doc.scrollTop() + (parseInt(elem.css("marginTop"), 10) || 0) + (parseInt(elem.css("borderTopWidth"), 10) || 0) + (parseInt(elem.css("paddingTop"), 10) || 0));
        }
        position = (target || $()).offset();
        position.left -= path.length ? (doc = $(target.elems[0].ownerDocument)).scrollLeft() : 0;
        position.top -= path.length ? doc.scrollTop() : 0;
        return {
            left: offset.left + position.left + (topDoc.scrollLeft() || 0),
            top: offset.top + position.top + (topDoc.scrollTop() || 0),
            width: target.width(),
            height: target.height()
        };
    }
	// 从指定窗口或有权访问的顶层窗口开始，获取目标Iframe的路径信息
	// <p>用于匹配目标Iframe的回调函数，返回true值则表示匹配成功，不返回或者返回非true值，则表示匹配失败
	// <p>若查找路径上用于匹配的Iframe跨域或者未引入fastDev库，则该Iframe直接被判定为非路径节点，即所有结果路径上的Iframe必须引入fastDev库且非跨域，查找结果才是有效的
	// @param {Function} callback 用于判定当前Iframe是否是要找的iframe，该函数内的作用域为当前Iframe内部子页面的window对象
	// @param {fastDev} callback.fast 当前待判定Iframe内部子页面的fastDev对象
	// @param {DomObject} callback.iframe 当前待判定Iframe的DomObject对象
	// @param {Window} [context=top] 用于查找的起始窗口对象，未指定时则默认从有权访问的最顶层窗口开始查找
	// @return {Array[Object]} 目标Iframe从指定窗口或顶层窗口起的路径信息，每一路径子节点（数组元素）包含以下属性
	// <p>-iframe : 当前iframe节点的DomObject对象</p>
	// <p>-parent : 当前iframe的父页面窗口对象
	// <p>-window : 当前iframe内部子页面的window的DomObject对象</p>
	// <p>-document : 当前iframe内部子页面的document的DomObject对象</p>
	function getIframePath(callback, context) {
        if (typeof callback !== "function") {
            throw "回调函数未指定";
        }
        var top = $.isWindow(context) ? context : this.top,
            nodes = arguments[2] || [],
            flag = arguments[3] || [];
        if (flag[0] = callback.call(top, top.fastDev) === true) {
            return nodes;
        }
        var elems = top.fastDev("iframe").elems,
            iframe;
        while (!flag[0] && (iframe = elems.shift())) {
            try {
                context = iframe.contentWindow;
                nodes.push({
                    "parent": top,
                    "iframe": top.fastDev(iframe),
                    "window": context.fastDev(context),
                    "document": context.fastDev(context.document)
                });
                if (flag[0] = callback.call(context, context.fastDev, top.fastDev(iframe)) === true) {
                    break;
                }
                getIframePath.call(null, callback, context, nodes, flag);
                if (!flag[0]) {
                    nodes.pop();
                }
            } catch (e) {
                // iframe跨域或者未加载fastDev库
            }
        }
        return nodes;
    }
    
    // 字符串类型数据处理工具类
    StringUtil = {
		"trim" : trim,
		"ltrim" : ltrim,
		"rtrim" : rtrim,
		"trimHtml" : trimHtml,
		"getChLength" : getChLength,
		"strParseDate" : strParseDate,
		"escapeReg" : escapeReg,
		"capitalize" : capitalize,
		"stripUnits" : stripUnits,
		"highlight" : highLight,
		"highLight": highLight
    };
    
    // 数字类型数据处理工具类
    NumberUtil = {
		"comma" : comma,
		"pad" : pad,
		"format" : numberFormat
	};
	
	// 日期对象处理工具类
	DateUtil = {
		"format" : dateFormat,
		"parse" : parse
	};
	
	// URL格式数据处理工具类
	UrlUtil = {
		"jsonToQuery" : jsonToQuery,
		"queryToJson" : queryToJson
	};
	
	// json工具类
	JsonUtil = {
		"parseJson" : parseJson,
		"parseString" : parseString
	};
	
	// 对象处理工具类
	ObjectUtil = {
		"parseObject" : parseObject
	};
	
	// 定位工具类
	PositionUtil = {
		"top" : top,
		"locate" : locate,
		"getBoundingRect" : getBoundingRect,
		"getIframePath" : getIframePath
	};
	
	$.Util =  {
		"StringUtil" : StringUtil, 
		"NumberUtil" : NumberUtil, 
		"DateUtil" : DateUtil, 
		"UrlUtil" : UrlUtil, 
		"JsonUtil" : JsonUtil, 
		"ObjectUtil" : ObjectUtil, 
		"PositionUtil" : PositionUtil
	};
})(fastDev);
/**
 * @class fastDev.Core.ClassManage
 * @singleton
 * 控件类管理器，负责管理所有控件的类文件并建立维护类的别名与实际名称之间的关联
 */
(function($){
	var 
		aliasMap = {},
		classMap = {};
	
	/**
	 * 注册类
	 * @param {String} className 类名
	 * @param {Object} clazz 类对象
	 * @param {String} [classAlias] 类别名
	 */
	function regClass(className, clazz, classAlias){
		classAlias = classAlias || className;
		aliasMap[classAlias] = className;
		classMap[className] = clazz;
	}
	
	/**
	 * 根基类名或类别名获取类对象
	 * @param {Object} name 类名或类别名
	 * @return {Object|undefined}
	 */
	function getClass(name) {
		return (classMap[name] || (name = aliasMap[name]) && classMap[name]) || undefined;
	}
	
	$.Core = {
		"ClassManager" :{
			"regClass" : regClass,
			"getClass" : getClass
		}
	};
	
})(fastDev);
/**
 * @class fastDev.Core.EventManager 
 * @singleton
 * 事件管理器，当前页面所有通过控件库Api绑定的事件都会在这里进行记录并管理
 */
(function(window){
	var 
		$ = window.fastDev,
		handleMap = {},
		eventMap = {};
	
	/**
	 * 
	 * @param {Object} handle
	 * @param {Object} context
	 * @private
	 */	
	function createHandle(handle, context){
		var eventHandle = function(event) {
			event = event || window.event;
			if(event.type) {
				if(!event.target){
					event.target =  event.srcElement || event.toElement;
				}
				if(event.pageX || event.offsetX){
					var offset = $(event.target).offset();
					event.pageX = offset.left + event.offsetX;
					event.pageY = offset.top + event.offsetY;
				}
			}
			return eventHandle.handle.call(context, event);
		};
		
		eventHandle.handle = handle;
		return eventHandle;
	}
	
	/**
	 * 
	 * @param {Object} elem
	 * @param {Object} type
	 * @param {Object} handle
	 */
	function bindEvent(elem, type, handle) {
		var 
			// 事件id
			eventkey = $(elem).attr("eventkey") || $.getID(),
			// 保存原始句柄
			primary = handle,
			// 事件句柄ID
			handleID = $.getID(),
			// 获取当前元素时间信息
			eventInfo = eventMap[eventkey] = eventMap[eventkey] || {},
			// 获取当前事件类型信息
			eventType = eventInfo[type] = eventInfo[type] || {};

		handle = createHandle(handle, elem);

		handleMap[handleID] = handle;

		eventType[handleID] = primary;

		$(elem).attr("eventkey", eventkey);

		$.Event.bind(elem, type, handle);

	}
	
	/**
	 * 
	 * @param {Object} elem
	 * @param {Object} type
	 * @param {Object} handle
	 */
	function unbind(elem, type, handle) {
		var handleID, handleInfo, handleInfoList, 
			eventkey = fastDev(elem).attr("eventkey");
			
		if(!eventkey) {
			return;
		}

		// 删除事件信息
		handleInfoList = removeEventInfo(eventkey, type, handle);
		
		if(!fastDev.isValid(handleInfoList)){
			return ;
		}
		
		while(handleInfoList[0]) {
			handleInfo = handleInfoList.shift();
			handleID = handleInfo.key;
			// 取消绑定
			handle = handleMap[handleID];
			$.Event.unbind(elem, handleInfo.type, handle);
			// 删除句柄
			handleMap[handleID] = null;

			handle = null;
			handleInfo = null;
			delete handleMap[handleID];

		}
	}
	
	/**
	 * 删除事件信息
	 * @param {String} eventkey 事件信息主键
	 * @param {String} type 事件类型
	 * @param {Function} handle 函数句柄
	 * @param {eventInfo} eventInfo 事件信息
	 */
	function removeEventInfo(eventkey, type, handle, eventInfo) {
		var p, key, eventType, handleInfo, 
			handleInfoList = [];

		eventInfo = eventInfo || eventMap[eventkey];

		if(!eventInfo) {
			return [];
		}

		if($.isString(type)) {
			eventType = eventInfo[type];

			if(!eventType) {
				return;
			}

			var removeAll = !$.isFunction(handle);

			for(key in eventType) {
				if(removeAll || eventType[key] === handle) {
					eventType[key] = null;
					delete eventType[key];
					handleInfoList.push({
						type : type,
						key : key
					});
					break;
				}

			}

		} else {
			for(p in eventInfo) {

				handleInfo = this.removeEventInfo(null, p, null, eventInfo);
				
				eventInfo[p] = null;
				delete eventInfo[p];
				
				handleInfoList = handleInfoList.concat(handleInfo);
			}
			
			eventMap[eventkey] = null;
			delete eventMap[eventkey];
		}

		return handleInfoList;
	}
	
	$.apply($.namespace("fastDev.Core.EventManager"), {
		"bindEvent" : bindEvent,
		"unbind" : unbind
	});
})(window);
/**
 * @class fastDev.Core.ExceptionManager
 * @singleton
 * 异常管理器，负责记录和显示当前控件库的异常与警告信息
 */
(function($){
	var expose,
		// 程序运行异常监控模式
		mode = "medium",
		exceptionType = "error",
		// 异常信息存储对象
		errorinfo = [],
		// 日志信息存储对象
		warninfo = [],
		topFastDev = $.Util.PositionUtil.top.fastDev,
		exceptionView = [
		'<span id="ui_exception_info"></span>',
        '<div class="ui-window-tipcontent" style="_width:326px;">',
			'<div style="position: relative;text-align: right; padding: 5px 0">',
				'<input itype="Button" text="确定" onclick="fastDev.Core.ExceptionManager.closeDialog_2()" />',
				'<input itype="Button" text="下一条" {disabled} onclick="fastDev.Core.ExceptionManager.renderDialog()" />',
				'<input itype="Button" text="详细信息" onclick="fastDev.Core.ExceptionManager.toggleDetail()" />',
			'</div>',
			'<div id="ui_exception_detail" style="margin-top:10px;display:none">',
				'<div class="ui-form ui-form-wrap ui-textarea" style="height:140px; left: 0px; top: 0px; ">',
					'<textarea name="textarea" id="ui_exception_detail_box" wrap="off" readonly="readonly" class="ui-form-field ui-form-input" style="height:137px;"></textarea>',
				'</div>',
			'</div>',
		'</div>'
	];
	
	/**
	 * 创建错误信息
	 * @private
	 */
	function createErrorMsg(objname, name, error, detail) {
		return  objname + " 对象 " + name + " 方法执行异常：" + ( error.message || error ) + "{split}" + detail;
	}
	
	/**
	 * 创建警告信息
	 * @private
	 */
	function createWarnMsg(objname, name, warn, detail){
		return  objname + " 对象 " + name + " 方法执行警告：" + warn + "{split}" + detail;
	}
	
	/**
	 * 记录错误信息
	 * @param {String} objname 错误发生所在对象
	 * @param {String} name 错误发生所在方法
	 * @param {String} error 错误信息
	 * @param {String} detail 错误详细信息
	 */
	function addError(objname, name, error, detail) {
		error = createErrorMsg(objname, name, error, detail);
		errorinfo.push(error);
	}
	
	/**
	 * 记录警告信息
	 * @param {String} objname 警告发生所在对象
	 * @param {String} name 警告发生所在方法
	 * @param {String} warn 警告信息
	 * @param {String} detail 警告详细信息
	 */
	function addWarn(objname, name, warn, detail){
		warn = createWarnMsg(objname, name, warn,detail);
		warninfo.push(warn);
	}
	
	/**
	 * 显示异常信息
	 * @private 
	 */
	function showMessage(type){
		var 
			info, 
			detail, 
			exceptionView, 
			icon = "error",
			title = "程序运行",
			push = errorinfo.push,
			isError = type === "error",
			exceptionList = isError ? errorinfo : warninfo;
		
		if(!exceptionList.length){
			return false;
		}
		
		type += isError ? "错误" : (icon = "warning") && "警告";
		
		exceptionView = getExceptionView(exceptionList.length === 1);
		
		topFastDev.Core.ExceptionManager.dialog = $.create("MessageBox", {
			title : title,
			icon : icon,
			content : exceptionView,
			inside : false,
			width : "400px",
			height : "152px",
			bodyCls : "ui-tiperror",
			onAfterClose : closeDialog_1
		});
		
		if(window !== window.top){
			push.apply(topFastDev.Core.ExceptionManager[type+"info"], exceptionList.slice(1));
		}
		renderDialog(0);
	}
	
	function showError(){
		return showMessage(exceptionType = "error");
	}
	
	/**
	 * 显示警告信息 
	 */
	function showWarn(){
		return showMessage(exceptionType = "warn");
	}
	
	/**
	 * 显示当前控件库异常级别下能显示的信息
	 */
	function display() {
		
		if(mode === "low" || mode === "none"){
			return;
		}
		
		if(showError() === false && (mode === "high" || mode === "warn&error")){
			showWarn();
		}
	}
	
	/**
	 * 错误信息显示
	 * 在控件库的异常级别设定不为"low"时此方法会及时打印错误信息
	 * 在控件库的异常级别设定为"low"时会记录错误信息，可手工调用fastDev.showInfo方法查看
	 * @param {String} objname 错误所在对象
	 * @param {String} name 错误所在方法
	 * @param {String} error 错误信息
	 * @param {String} detail 错误详细信息
	 */
	function error(objname, name, errorMsg, detail) {
		addError(objname, name, errorMsg, detail);
		if(mode !== "low" && mode !== "none") {
			showError();
		}
	}
	
	/**
	 * 警告信息显示
	 * 在控件库的异常级别设定为"high"时此方法记录的警告信息才会被处理
	 * @param {String} objname 警告所在对象
	 * @param {String} name 警告所在方法
	 * @param {String} warn 警告信息
	 * @param {String} detail 警告详细信息
	 */
	function warn(objname, name, warnMsg, detail) {
		addWarn(objname, name, warnMsg, detail);
		if(this.mode === "high" && this.mode === "warn&error") {
			showWarn();
		}
	}
	
	/**
	 * 点击错误提示窗口下一跳按钮回调事件 
	 */
	function renderDialog(index){
		var 
			exceptionList = exceptionType === "error" ? errorinfo : warninfo,
			exceptionMsg = exceptionList.shift();
		
		if(!exceptionMsg){
			return;
		}
		
		if( !exceptionList.length && this.alias ){
			this.disable();
		}
		
		exceptionMsg = exceptionMsg.split("{split}");
		topFastDev("#ui_exception_info").setText(exceptionMsg[0]);
		topFastDev("#ui_exception_detail_box").prop("value", exceptionMsg[1]);
	}
	
	/**
	 * @private 
	 */
	function closeDialog_1(){
		if(exceptionType === "error"){
			showWarn();
		}
	}
	
	/**
	 * 点击错误提示窗口确定按钮回调事件 
	 */
	function closeDialog_2(){
		topFastDev.Core.ExceptionManager.dialog.close();
	}
	
	/**
	 * 点击错误提示窗口详细信息按钮回调事件 
	 */
	function toggleDetail(){
		var 
			detail = window.top.fastDev("#ui_exception_detail"),
			height = detail.isShow() ? "150px" : "302px";
			
		topFastDev("#ui_exception_detail").toggle();
		topFastDev.Core.ExceptionManager.dialog.resize({"height":height});
	}
	
	/**
	 * @private 
	 */
	function getExceptionView(hasmore){
		var view = exceptionView.join(''),
			disabled = hasmore ? 'disabled=true' : '';
			
		return view.replace("{disabled}", disabled);
	}
	
	expose = {
		/**
		 * 错误信息提示
		 * 在控件库的异常级别设定不为"low"时此方法会及时打印错误信息
		 * 在控件库的异常级别设定为"low"时会记录错误信息，可手工调用fastDev.showInfo方法查看
		 * @param {String} objname 错误所在对象
		 * @param {String} name 错误所在方法
		 * @param {String} error 错误信息
		 * @param {String} detail 错误信息详情
		 * @member fastDev
		 */
		"error" : error,
		/**
		 * 警告信息提示
		 *  在控件库的异常级别设定为"high"时此方法记录的警告信息才会被处理
		 * @param {String} objname 警告所在对象
		 * @param {String} name 警告所在方法
		 * @param {String} warn 警告信息
		 * @param {String} detail 警告信息详情
		 * @member fastDev
		 */
		"warn" : warn,
		/**
		 * 记录错误信息
		 * 此方法在任何控件库的异常级别下都不会提示用户，只会保存信息，需要手工调用fastDev.showInfo方法或依赖下一次fastDev.error才会打印出来
		 * @param {String} objname 错误所在对象
		 * @param {String} name 错误所在方法
		 * @param {String} error 错误信息
		 * @param {String} detail 错误信息详情
		 * @member fastDev
		 */
		"addError" : addError,
		/**
		 * 记录警告信息
		 * 此方法在任何控件库的异常级别下都不会提示用户，只会保存信息，需要手工调用fastDev.showInfo方法或依赖下一次fastDev.warn才会打印出来
		 * @member fastDev
		 */
		"addWarn" : addWarn,
		/**
		 * 显示当前控件库异常级别下能显示的异常信息
		 * @member fastDev
		 */
		"show" : display,
		/**
		 *  显示到目前为止记录下来未显示的错误信息(错误级别为low或none时不做处理)
		 * @member fastDev
		 */
		"showError" : showError,
		/**
		 *  显示到目前为止记录下来未显示的警告信息(错误级别为high或warn&error时才会显示)
		 * @member fastDev
		 */
		"showWarn" : showWarn
	};
	
	$.apply($.namespace("fastDev.Core.ExceptionManager"), {
		"exceptionType" : "error",
		/**
		 * @property [mode="error"]
		 * 程序运行异常监控模式
		 * 分为三种级别高(high)、中(medium)、低(low)
		 * high/warn&error : 提示开发者异常和警告 
		 * medium/error : 提示开发者异常信息 
		 * low/none : 不提示任何信息
		 */
		"mode" : "error",
		"renderDialog" : renderDialog,
		"toggleDetail" : toggleDetail,
		"closeDialog_2" : closeDialog_2
	});
	
	$.apply(expose);
})(fastDev);
/**
 * @class fastDev.Core.Base
 * @singleton
 * 所有控件的父类，定义了通用的各控件通用的属性、事件以及方法，规定了控件的创建流程(ready->construct->init)
 */
fastDev.define("fastDev.Core.Base", {
	"_options" : {
		/**
		 * @event onBeforeReady
		 * 控件准备方法调用之前执行
		 */
		"onBeforeReady" : fastDev.noop,
		/**
		 * @event onAfterReady
		 * 控件准备方法调用之后执行
		 */
		"onAfterReady" : fastDev.noop,
		/**
		 * @event onBeforeConstruct
		 * 控件构造方法调用之前执行
		 */
		"onBeforeConstruct" : fastDev.noop,
		/**
		 * @event onAfterConstruct
		 * 控件构造方法调用之后执行
		 */
		"onAfterConstruct" : fastDev.noop,
		/**
		 * @event onBeforeInit
		 * 控件初始化方法调用之前执行
		 */
		"onBeforeInit" : fastDev.noop,
		/**
		 * @event onAfterInit
		 * 控件初始化方法调用之后执行
		 */
		"onAfterInit" : fastDev.noop,
		/**
		 * @event onBeforeDestroy
		 * 控件销毁方法调用之前执行
		 */
		"onBeforeDestroy" : fastDev.noop,
		/**
		 * @event onAfterDestroy
		 * 控件销毁方法调用之后执行
		 */
		"onAfterDestroy" : fastDev.noop
	},
	"_global" : {},
	/**
	 * 保存控件配置信息方法
	 * @param {JsonObject} config 配置信息
	 */
	"setOptions" : function(config) {
		fastDev.apply(this._options, config);
		return this;
	},
	/**
	 * 获取控件配置信息方法
	 * @return {JsonObject} options
	 */
	"getOptions" : function() {
		return this._options;
	},
	/**
	 * 保存控件全局信息方法
	 * @param {JsonObject} config 配置信息
	 * @protected
	 */
	"setGlobal" : function(config) {
		fastDev.apply(this._global, config);
	},
	/**
	 * 获取控件全局信息方法
	 * @return {JsonObject} global
	 * @protected
	 */
	"getGlobal" : function() {
		return this._global;
	},
	/**
	 * 组件参数准备方法
	 * @param {Object} options 当前控件配置信息
	 * @param {Object} global 当前控件全局信息
	 * @protected
	 */
	"ready" : fastDev.noop,
	/**
	 * 组件构造方法
	 * @param {Object} options 当前控件配置信息
	 * @param {Object} global 当前控件全局信息
	 * @protected
	 */
	"construct" : fastDev.noop,
	/**
	 * 组件初始化方法
	 * @param {Object} options 当前控件配置信息
	 * @param {Object} global 当前控件全局信息
	 * @protected
	 */
	"init" : fastDev.noop,
	/**
	 * 组件销毁方法
	 * @param {Object} options 当前控件配置信息
	 * @param {Object} global 当前控件全局信息
	 */
	"destroy" : fastDev.noop
});

/**
 * @class fastDev.Data.Proxy
 * @extends fastDev.Core.Base
 * @author 袁刚
 * 数据代理实现类，协助数据集与后台进行交互的辅助类
 */
/**
 * @cfg {String} url
 * 远程数据地址
 */

/**
 * @cfg {String} [method="get"]
 * 远程请求类型
 */

/**
 * @cfg {String} [action]
 * 数据提交地址
 */

/**
 * @cfg {JsonObject} urlParam
 * load方法执行时附带参数(如果load方法传了参数则此设置不生效)
 */

/**
 * @cfg {Boolean} [async=true]
 * 是否使用异步请求，为false时，请求将会阻塞后续程序执行 
 */

/**
 * @cfg {Array[JsonObject]} data
 * 代理中的静态数据源
 */

/**
 * @cfg {Number} [timeout=0]
 * 代理超时时间,0为不设置超时时间
 */

/**
 * @cfg {String} [dataType="Json"]
 * 数据读取类型(Json,Xml,Array,String)
 */

/**
 * @cfg {fastDev.Queue} queue
 * 代理所属队列
 */

/**
 * @cfg {fastDev.Data.DataSet} dataset
 * 当前代理对应的数据集
 */

/**
 * @event  onError
 * 加载数据错误时的事件
 */

/**
 * @event onAfterLoad
 * 数据加载完成事件
 */

/**
 * @event onAfterSave
 * 数据保存完成事件
 * @private
 */

fastDev.define("fastDev.Data.Proxy", {
	"alias" : "Proxy",
	"prototype" : function(setting){
		this.setOptions(setting);

		if(this.dataset){
			this.handle = fastDev.setFnInScopeByParam(this.dataset, this.dataset.load, true, true);
		}
		
		if(!this.queue){
			this.queue = fastDev.Queue.getInstance();
		}
	}
});

fastDev.Data.Proxy.constructor = function(setting) {
	return new this.prototype(setting);
};

(function($){
		
	/**
	 * 远程数据加载
	 * @param {JsonObject/String} data Json格式键值对数据或者字符串格式数据
	 * @param {Function} [callback] 后台处理完成后的回调函数
	 * @param {Boolean} [encode=false] 是否编码
	 * @param {Boolean} [json=false] 是否提交Json格式参数(此参数为true时系统追加data为数据键：url?data=jsondata)
	 */
	function load(data, callback, encode, json) {
		var url, success, error, complete,
			// 修正传入参数
			params = correctParam(data, callback, encode, json, this.urlParam);
			
		success = this.dataset ? this.handle : 
			$.isFunction(params[1]) ? params[1] : 
			undefined;
		complete = this.dataset && $.isFunction(params[1]) ? params[1] : 
			$.isFunction(this.onAfterLoad) ? this.onAfterLoad : 
			undefined;
		error = $.isFunction(this.onError) ? this.onError : undefined;

		if( url = this.url ? encodeCustomParamForUrl(this.url) : false) {
			// 格式化提交参数
			data = formatData(params[0], params[2], params[3]);

			this.queue.add({
				"url" : url,
				"data" : data,
				"success" : success,
				"error" : error,
				"complete" : complete,
				"method" : "get",
				"async" : this.async,
				"timeout" : this.timeout
				
			});
			return true;
		}
		
		return false;
	}
	
	/**
	 * 提交数据至远程服务
	 * @param {JsonObject/String} data Json格式键值对数据或者字符串格式数据
	 * @param {Function} [callback] 后台处理完成后的回调函数
	 * @param {Boolean} [encode=false] 是否编码
	 * @param {Boolean} [json=false] 是否提交Json格式参数(此参数为true时系统追加data为数据键：url?data=jsondata)
	 */
	function save(data, callback, encode, json) {
		var 
			url, 
			// 代理所使用的队列
			queue = this.queue,
			// 修正传入参数
			params = correctParam(data, callback, encode, json),
			success = $.isFunction(params[1]) ? params[1] : undefined,
			error = $.isFunction(this.onError) ? this.onError : undefined,
			complete = $.isFunction(this.onAfterSave) ? this.onAfterSave : undefined;
		
		if(url = this.action ? encodeCustomParamForUrl(this.action) : false){
			// 格式化提交参数
			data = formatData(params[0], params[2], params[3]);
	
			queue.add({
				"url" : url,
				"data" : data,
				"method" : "post",
				"success" : success,
				"error" : error,
				"complete" : complete,
				"async" : this.async,
				"timeout" : this.timeout
			});
		}
	}
	
	/**
	 * 设置远程数据加载(load方法)时的参数
	 * @param {JsonObject} param 数据参数
	 * @removed 已作废，推荐使用 {@link #setUrlParam}
	 */
	function setParam(param) {
		return this.setUrlParam(param);
	}
	
	/**
	 * 增加远程数据加载(load方法)时的参数
	 * @param {JsonObject} param 数据参数
	 * @removed 已作废，推荐使用 {@link #addUrlParam}
	 */
	function addParam(param) {
		return this.addUrlParam(param);
	}
	
	/**
	 * 增加远程数据加载(load方法)时的参数
	 * @param {JsonObject} param 数据参数
	 */
	function addUrlParam(param){
		this.urlParam = $.apply(this.urlParam || {}, param);
		return this;
	}
	
	/**
	 * 处理提交数据
	 * @param {JsonObject} data 数据对象
	 * @param {Boolean} encode 是否编码
	 * @param {Bollean} json 是否转换成Json格式
	 * @private
	 */
	function formatData(data, encode, json) {
		return json === true ? "data=" + $.Util.JsonUtil.parseString(data, encode) : 
			$.Util.UrlUtil.jsonToQuery(data, encode);
	}
	
	/**
	 * 修正save/load方法传入参数
	 * @param {JsonObject} data 数据对象
	 * @param {Function} callback 回调函数
	 * @param {Boolean} encode 是否编码
	 * @param {Bollean} json 是否转换成Json格式
	 * @param {JsonObject} urlParam 请求参数
	 * @private
	 */
	function correctParam(data, callback, encode, json, urlParam) {
		
		var arg, hook, i, j,
			args = $.convertArray(arguments),
			len = args.length,
			params = [{}, null, true, false, {}],
			hooks = ["isPlainObject", "isFunction", "isBoolean", "isBoolean", "isPlainObject"];
		
		for( i = 0; i < len; i++){
			if(arg = args[i]){
				for( j = 0; j < 5; j++){
					if((hook = hooks[j]) && $[hook](arg)){
						params[j] = arg;
						hooks[j] = null;
						break;
					}
				}	
			}
			
		}
		
		return params;
	}
	
	/**
	 * 设置数据加载完成事件
	 * @param {Function} handle
	 * @removed 已作废，推荐使用 {@link #setOnAfterLoad}
	 */
	function bindAfterLoad(handle){
		return this.setOnAfterLoad(handle);
	}
	
	/**
	 * 对地址字符串上的参数做编码 
	 * @param {Object} url
	 * @private
	 */
	function encodeCustomParamForUrl(url){
		if(!url){
			return;
		}
		
		var params;
		
		return url.replace(/\?([^\?]+)/, function(all, params){
			params = params.split("&");
			for(var i = 0, param; param = params[i++];){
				params[i-1] = param.replace(/=([^=]*)/, matchUrlValue);
			}
			return "?" + params.join("&");
		});
	}
	
	/**
	 * 
	 * @param {Object} all
	 * @param {Object} value
	 * @private
	 */
	function matchUrlValue(all, value){
		return  "=" + encodeURIComponent(value);
	}
	
	/**
	 * 设置数据请求的远程服务地址
	 * @param {String} url 服务地址
	 */
	function setUrl(url){
		this.url = url;
		return this;
	}
	/**
	 * 设置远程请求类型
	 * @param {String} [method="get"] 
	 */
	function setMethod(method){
		this.method = method === "post" ? "post" : "get";
		return this;
	}
	
	/**
	 * 设置数据提交的远程服务地址
	 * @param {String} action 服务地址
	 */
	function setAction(action) {
		this.action = action;
		return this;
	}
	
	/**
	 * 设置load方法执行时附带参数
	 * @param {JsonObject} param
	 */
	function setUrlParam(param){
		this.urlParam = param;
		return this;
	}
	
	/**
	 * 设置是否使用异步请求，为false时，请求将会阻塞后续程序执行  
	 * @param {Boolean} [async=true]
	 */
	function setAsync(async){
		this.async = async !== false;
		return this;
	}
	
	/**
	 * 设置代理中的静态数据源
	 * @param {Array[JsonObject]} data
	 */
	function setData(data){
		this.data = data;
		return this;
	}
	
	/**
	 * 设置请求超时时间
	 * @param {Number} time 超时时间 
	 */
	function setTimeout(time) {
		this.timeout = time >= 0 ? time : 0;
		return this;
	}
	
	/**
	 * 设置数据读取类型
	 * 数据读取类型(Json,Xml,Array,String)
	 * 目前只支持json
	 * @param {Object} type
	 */
	function setDataType(type){
		this.dataType = "Json";
		return this;
	}
	
	/**
	 * 设置代理所属队列 
	 * @param {fastDev.Queue} queue
	 */
	function setQueue(queue){
		this.queue = queue;
		return this;
	}
	
	/**
	 * 设置当前代理对应的数据集 
	 * @param {fastDev.Data.DataSet} dataset
	 */
	function setDataset(dataset){
		this.dataset = dataset;
		return this;
	}
	
	/**
	 * 设置加载数据错误时的处理句柄
	 * @param {Function} onError
	 */
	function setOnError(onError){
		this.onError = onError;
		return this;
	}
	
	/**
	 * 设置数据加载完成时的处理句柄
	 * @param {Function} onAfterLoad
	 */
	function setOnAfterLoad(onAfterLoad){
		this.onAfterLoad = onAfterLoad;
		return this;
	}
	
	/**
	 * 设置数据保存完成时的处理句柄
	 * @param {Object} onAfterSave
	 */
	function setOnAfterSave(onAfterSave){
		this.onAfterSave = onAfterSave;	
		return this;
	}
	
	function setOptions(config){
		var p, setter;
		
		for(p in config){
			setter  = this["set" + p.charAt(0).toUpperCase() + p.slice(1)];
			if(fastDev.isFunction(setter)){
				setter.call(this, config[p]);
			}
		}
		return this;
	}
	
	$.Data.Proxy.prototype.prototype = {
		"setUrl" : setUrl,
		"setMethod" : setMethod,
		"setAction" : setAction,
		"setUrlParam" : setUrlParam,
		"setAsync" : setAsync,
		"setData" : setData,
		"setTimeout" : setTimeout,
		"setDataType" : setDataType,
		"setQueue" : setQueue,
		"setDataset" : setDataset,
		"setOnError" : setOnError,
		"setOnAfterLoad" : setOnAfterLoad,
		"setOnAfterSave" : setOnAfterSave,
		"setOptions" : setOptions,
		"addUrlParam" : addUrlParam,
		"load" : load,
		"save" : save,
		"setParam" : setParam,
		"addParam" : addParam,
		"bindAfterLoad" : bindAfterLoad,
		"encodeCustomParamForUrl" : encodeCustomParamForUrl
	};
	
})(fastDev);
/**
 * @class fastDev.Data.Reader
 * @extends fastDev.Core.Base
 * @author 袁刚
 * 数据读取实现类，协助数据集读取后台返回数据的辅助类
 */

(function($){
	/**
	 * 数据读取方法
	 * @param {JsonObject/String/Xml} data 原始数据
	 */
	function read(data, type){
		
		type = type || "json";
		
		var method, name = type.charAt(0).toUpperCase() + type.slice(1);
		
		switch(type){
			case "json" : method = readJson; break;
		}
		
		return $.isFunction(method) && method(data);
	}
	/**
	 * Json格式数据读取方法
	 * @param {String|JsonObject} data Json格式数据
	 */
	function readJson(data){
		return $.Util.JsonUtil.parseJson(data);
	}
	
	/**
	 * Xml格式数据读取方法(暂未实现)
	 */
	function readXml(data) {

	}
	
	/**
	 * 数组格式数据读取方法(暂未实现)
	 */
	function readArray(data) {

	}
	
	/**
	 * 根据指定的数据点读取数据片段 
	 * @param {JsonObject} data 数据对象
	 * @param {String} root 数据节点名称
	 */
	function readDataSegment(data, root) {
		
		if(!fastDev.isValid(root) || !data) {
			return data;
		}
		var rootPath = root.split("."), copy = data;
		
		while(rootPath[0]) {
			root = rootPath.shift();
			if(/^\d*$/.test(root)){
				root = +root;
			}
			copy = copy[root];
		}
		return copy || data;
	}
	
	/**
	 * 根据读取配置将数据读取到数据集中
	 * @param {Object} data 数据对象
	 * @param {Object} config 读取配置
	 */
	function readToTarget(data, config) {
		var object = config.object, root = config.root;
		
		data = this.readRoot(data, root);
		object.load(data);
	}
	
	$.apply($.namespace("fastDev.Data.Reader"), {
		"read" : read,
		"readDataSegment" : readDataSegment,
		"readToTarget" : readToTarget
	});
})(fastDev);

/**
 * @class fastDev.Data.DataSet
 * @extends fastDev.Core.Base
 * @author 袁刚
 * 数据集实现类，实现了数据增、删、改、查、排序、统计等方面的功能
 */

/**
 * @cfg {Array[JsonObject]} fields
 * 字段配置信息
 */

/**
 * @cfg {Array[JsonObject]} [data]
 * 静态数据
 */

/**
 * @cfg {JsonObject} [mapper]
 * 数据映射配置，指定后台Json数据与前台控件需要数据格式的映射
 */

/**
 * @cfg {Boolean} [backup=false]
 * 此数据集是否做原始数据备份
 */

/**
 * @cfg {Boolean} [objectify=true]
 * 是否将数据集内数据对象化处理(调用方法单独传对象化参数时，以传参为准, 未传参时使用配置) 
 */

/**
 * @cfg {String} [structure="normal"]
 * 数据结构类型 (normal|Tree)
 */

/**
 * 更新界面所使用的渲染器
 * @cfg {Function} [renderer]
 */

/**
 * @cfg {String} [root]
 * 远程数据根节点
 */

/**
 * @event onAfterLoad
 * 代理数据请求完成事件
 * @private
 */
fastDev.define("fastDev.Data.DataSet", {
	"alias" : "DataSet",
	"prototype" : function(setting){
		var data = setting.data;
		
		// 静态数据存储结束索引，正常操作下数据集会维护从0到此索引值的数据
		this.retain = data ? data.length : 0;
		// 数据存储对象
		this.records = [];
		// 备份存储对象
		this.backups = [];
		this.root = setting.root || "";
		this.backup = setting.backup === true;
		this.objectify = setting.objectify !== false;
		this.renderer = setting.renderer;
		this.onAfterLoad = fastDev.isFunction(setting.onAfterLoad) || fastDev.noop;
		// 数据读取器
		this.reader = fastDev.Data.Reader;
		// 创建数据模型对象
		this.model = fastDev.create("Model", {
			fields : setting.fields,
			mapper : setting.mapper
		});
		// 创建结构化数据
		switch(setting.structure){
			case "Tree" : this.structure = fastDev.create("S_Tree", this.model.fields); break;
		}
		// 将静态数据读入数据集
		if(data) {
			this.load(data, this.backup);
		}
	}
});

fastDev.Data.DataSet.constructor = function(setting) {
	return new this.prototype(setting);
};

(function($){
	var 
		matchNumber = /^\d*(\.\d+)?$/,
		matchNotValue = /(^{)|[\w\"\s]+(?=:)|(}$)/g;
	
	/**
	 * 数据加载
	 * @param {JsonObject} data 数据
	 * @param {Boolean} [backup=false] 是否备份数据
	 * @param {Boolean} [renderview=false] 是否用最新数据渲染界面
	 */
	function load(data, backup, renderer){
		// 重置数据集，保留初始静态数据
		this.reset();

		if(this.root) {
			data = this.reader.readDataSegment(data, this.root);
		}
		// 填充动态数据
		this.fill(data, backup === true, true, renderer === true);
	}
	/**
	 * 批量增加数据至数据集
	 * @param {Array[JsonObject]} data 数据数组
	 * @param {Boolean} [backup=false] 是否备份当前数据
	 * @param {Boolean} [objectify=true] 是否对象化当前数据
	 * @param {Boolean} [renderview=false] 是否用最新数据渲染界面
	 */
	function fill(data, backup, objectify, renderview){
		if(!(data && data.splice)) {
			return $.warn("DataSet", "fill", "数据集填充数据错误,传入的数据格式不合法,数据集只支持数组格式数据", $.Util.JsonUtil.parseString(data));
		}

		for(var i = 0, len = data.length; i < len; i += 1) {
			this.insert(data[i], backup, objectify);
		}
		
		switch(this.structure && this.structure.alias){
			case "S_Tree" : this.structure.initNodes(); break;
		}

		if(renderview === true && $.isFunction(this.renderer) && this.renderer());
	}
	
	/**
	 * 新增数据至数据集
	 * @param {JsonObject} data 数据
	 * @param {Boolean} [backup=false] 是否备份当前数据
	 * @param {Boolean} [objectify=true] 是否对象化当前数据
	 */
	function insert(data, backup, objectify) {
		
		//  将数据添加至数据集
		set.call(this, this.getSize(), data, objectify, backup);
		
		switch(this.structure && this.structure.alias){
			case "S_Tree" : add.call(this, data); break;
		}
	}
	
	/**
	 * 删除数据集中符合条件的记录
	 * @param {Function} fn 自定义匹配函数
	 */
	function remove(fn){
		return correctParam.call(this, arguments, removeImpl);
	}
	
	/**
	 * 删除数据集中符合条件的静态记录
	 * @param {Function} fn 自定义匹配函数
	 */
	function removeStaticData(fn) {
		return correctParam.call(this, arguments, removeStaticImpl);
	}
	
	/**
	 * 更新数据集中的记录
	 * @param {Function} fn 自定义匹配函数,如果返回数据则按数据修改当前项
	 */
	function update(fn) {
		return correctParam.call(this, arguments, updateImpl);
	}
	
	/**
	 * 查询数据集中符合条件的数据
	 * @param {Function} fn 自定义匹配函数,返回true/false通知结果集是否记录当前数据
	 * @return {Array}
	 */
	function select(fn) {
		return correctParam.call(this, arguments, selectImpl);
	}
	
	/**
	 * 重置当前数据集为初始状态,此方法保留静态数据
	 */
	function reset(record) {
		this.records = this.records.slice(0, this.retain);
		this.backups = this.backups.slice(0, this.retain);
		
		if(this.structure) {
			// 清空数据结构内的数据
			this.structure.clean();
			
			// 将静态数据恢复至数据集
			for(var i = 0; i < this.retain && (record = this.records[i]); ) {
				add.call(this, record);
			}
			
			// 重新初始化数据结构
			switch(this.structure.alias){
				case "Tree" : this.structure.initNodes(); break;
			}
			
		}
	}
	
	/**
	 * 清除当前数据集中的所有数据
	 */
	function clean() {
		// 重置记录集与备份,静态数据也将被清除
		this.records = [];
		this.backups = [];
		
		if(this.structure && this.structure.clean());
	}
	
	/**
	 * 获取记录集数据长度
	 * @return {Number}
	 */
	function getSize() {
		return this.records.length;
	}
	
	/**
	 * 获取记录集中指定下标的数据对象
	 * 仅传idx参数时该方法返回指定索引下标数据
	 * idx与 endIdx都传时，获取的是索引idx至索引endIdx的数据段
	 * @param {Number} idx 数据索引
	 * @param {Number} [endIdx] 数据区段结束索引
	 * @return {JsonObject|Array}
	 */
	function get(idx, endIdx) {
		return $.isNumber(idx) ? ($.isNumber(endIdx) ? this.records.slice(idx, endIdx) : this.records[idx]) : this.records[0];
		
	}
	
	/**
	 * 设置记录集中指定下标的数据对象
	 * @param {Number} idx 数据索引
	 * @param {JsonObject} record 数据对象 
	 * @param {Boolean} objectify 是否对象化
	 * @param {Boolean} backup 是否备份
	 * @return {JsonObject}
	 * @private
	 */
	function set(idx, record, objectify, backup){
		return this.records[idx] = processData.call(this, record, objectify, backup);
	}
	
	/**
	 * 删除记录集中指定下标的数据对象
	 * 仅传idx参数时该方法删除指定索引下标数据
	 * idx与 endIdx都传时，删除的是索引idx至索引endIdx的数据段
	 * @param {Number} idx 数据索引
	 * @param {Number} [endIdx] 数据区段索引
	 * @return {JsonObject|Array}
	 * @private
	 */
	function del(idx, endIdx){
		return $.isNumber(idx) ? ($.isNumber(endIdx) ? this.records.splice(idx, endIdx - idx) : this.records.splice(idx, 1)[0]) : null; 
	}
	
	/**
	 * 将数据对象插入到指定下标处
	 * @param {Number} idx 下标值
	 * @param {JsonObject} 数据
	 * @param {Boolean} objectify 是否对象化
	 * @param {Boolean} backup 是否备份
	 * @return {JsonObject|Array}
	 * @private
	 */
	function push(idx, record, objectify, backup){
		return this.records.splice(idx, processData.call(this, record, objectify, backup));
	}
	
	/**
	 * 数据加工
	 * @param {JsonObject} 数据
	 * @param {Boolean} objectify 是否对象化
	 * @param {Boolean} backup 是否备份
	 * @private
	 */
	function processData(record, objectify, backup){
		// 将数据按照数据模型中的描述进行格式化
		if($.isBoolean(objectify) ? objectify : this.objectify) {
			this.model.objectify(record);
		}
		// 处理数据备份
		if($.isBoolean(backup) ? backup : this.backup) {
			this.backups.push(record);
		}
		return record;
	}
	
	/**
	 * 对数据中的数据进行排序
	 * @param {String} fieldname 字段名称
	 * @param {String} sortord 排序规则(asc/desc)
	 */
	function sort(fieldname, sortord) {
		var 
			len = this.getSize(), 
			cond = -1, 
			change = false,
			crecord, trecord;
			
		if(sortord === "desc" && (cond *= -1));
		
		
		for(var i = 0; i < len - 1; i++) {
			for(var j = len - 1; j >= 1; j--) {
				crecord = this.get(j);
				trecord = this.get(j - 1);
				if($.comparator(crecord[fieldname], trecord[fieldname]) === cond) {
					set.call(this, j, trecord, false, false);
					set.call(this, j - 1, crecord, false, false);
					change = true;
				}
			}
		}
		return change;
	}
	
	/**
	 * 统计函数---数据量统计
	 */
	function count() {
		return this.getSize();
	}
	
	/**
	 * 统计函数---求和统计
	 * @param {String} fieldname 字段名称
	 */
	function sum(fieldname) {
		var num = 0, value;
		
		for(var i = 0; i < this.records.length; i++) {
			value = this.get(i)[fieldname];
			if(matchNumber.test(value)) {
				num += +value;
			}
		}
		return num;
	}
	
	/**
	 * 统计函数---平局值统计
	 * @param {String} fieldname 字段名称
	 */
	function avg(fieldname) {
		return this.sum(fieldname) / this.count(fieldname);
	}
	
	/**
	 * 统计函数---最大值统计
	 * @param {String} fieldname 字段名称
	 */
	function max(fieldname) {
		this.sort(fieldname, "desc");
		return this.get(0)[fieldname];
	}
	
	/**
	 * 统计函数---最小值统计
	 * @param {String} fieldname 字段名称
	 */
	function min(fieldname) {
		this.sort(fieldname, "asc");
		return this.get(0)[fieldname];
	}
	
	/**
	 * 是对数据集的数据修改无效化并并从备份中读取数据重新填充数据集
	 * 如果备份中没有数据则只会清空当前数据集
	 */
	function rollback() {
		// 清除当前数据集数据
		this.records = this.backups.slice();
	}
	
	/**
	 * 读取数据集中的指定数据段,按分页规则逻辑执行
	 * @param {Number} page 数据页数
	 * @param {Number} num 每页数据行数
	 */
	function selectByPage(page, num) {
		var start = page * num;
		return this.get(start, start + num);
	}
	
	/**
	 * 模板查询方法
	 * @param {String} text 文本
	 * @param {String} [fieldname] 数据字段名称
	 * @return {Array[JsonObject]}
	 */
	function fuzzySelect(text, fieldname, objectify) {
		if(!text) {
			return [];
		}

		if(fieldname) {
			return this.select(function(idx, data) {
				return (data[fieldname] + "").indexOf(text) !== -1;
			});
		}

		var 
			datastr, 
			records = this.select(), 
			match = RegExp(text, "g"), 
			result = [];

		for(var i = 0, record; record = records[i++]; ) {
			datastr = $.Util.JsonUtil.parseString(record).replace(matchNotValue, "");
			if(match.test(datastr) === true) {
				result.push(records.splice(i--, 1)[0]);
				match.lastIndex = 0;
			}
		}
		return result;
	}
	
	/**
	 * 改变制定数据行索引
	 * @param {Number} index 数据行索引
	 * @param {Number} targetIndex 数据行目标索引
	 */
	function changeIndex(index, targetIndex) {
		// 当前索引与目标索引一致时做无效化处理
		if(index === targetIndex) {
			return;
		}
		var record;

		// 修成源数据索引值
		if(index === "last") {
			index = this.getSize() - 1;
		} else if(index < this.retain) {
			index = this.retain;
		}
		// 将源数据从数据集中移除
		record = del.call(this, index);
		// 修正目标索引值
		targetIndex = targetIndex < this.retain ? this.retain : targetIndex;
		// 将源数据插入到目标索引位置
		push.call(this, targetIndex, record, false, false);
	}
	
	/**
	 * 增加数据至数据结构
	 * @private
	 */
	function add(data) {
		switch(this.structure && this.structure.alias){
			case "S_Tree" : this.structure.addNode(data); break;
		}
		
	}
	
	/**
	 * 设置远程数据根节点
	 * @param {String} root 根节点路径
	 */
	function setRoot(root) {
		this.root = root;
	}
	
	/**
	 * 修正增、删、改、查实现方法的参数
	 * @param {Arguments} args 外部传入参数对象
	 * @param {Function} name 实现方法句柄
	 * @private
	 */
	function correctParam(args, handle) {
		args = $.convertArray(args);
		
		var param = [null, null],
			push = param.push,
			fn = args.shift(); 
			
		push.apply(param, args);

		return handle.call(this, fn, param, this.getSize());
	}
	
	/**
	 * 删除方法实现函数 
	 * @param {Function} fn 用户定义的逻辑函数
	 * @param {Arguments} args 用户传入阐述对象
	 * @param {Number} len 数据集长度
	 * @private
	 */
	function removeImpl(fn, args, len) {
		if(!$.isFunction(fn)) {
			this.clean();
		}

		var retain = this.retain;

		for(var i = 0; i < len; i++) {
			args[0] = i;
			args[1] = this.get(i);
			if(fn.apply(window, args)) {
				del.call(this, i--);
				len--;
				if(i <= retain && i > 0) {
					retain--;
				}
			}
		}
		this.retain = retain;
	}
	
	/**
	 * 删除静态数据方法实现函数 
	 * @param {Function} fn 用户定义的逻辑函数
	 * @param {Arguments} args 用户传入阐述对象
	 * @param {Number} len 数据集长度
	 * @private
	 */
	function removeStaticImpl(fn, args, len) {
		if(!$.isFunction(fn)) {
			del.call(this, 0, this.retain);
			this.retain = 0;
			return;
		}

		for(var i = 0; i < this.retain; i++) {
			args[0] = i;
			args[1] = this.get(i);

			if(fn.apply(window, args)) {
				del.call(this, i--);
				this.retain--;
			}
		}
	}
	
	/**
	 * 修改方法实现函数 
	 * @param {Function} fn 用户定义的逻辑函数
	 * @param {Arguments} args 用户传入阐述对象
	 * @param {Number} len 数据集长度
	 * @private
	 */
	function updateImpl(fn, args, len) {
		// 更新符合条件的数据
		if(!$.isFunction(fn)) {
			return;
		}

		for(var i = 0, data, record; i < len; i++) {
			args[0] = i;
			args[1] = record = this.get(i);
			if( data = fn.apply(window, args)) {
				set.call(this, i, this.model.objectify($.apply({}, record, data)));
			}
		}
	}
	
	/**
	 * 查询方法实现函数 
	 * @param {Function} fn 用户定义的逻辑函数
	 * @param {Arguments} args 用户传入阐述对象
	 * @param {Number} len 数据集长度
	 * @private
	 */
	function selectImpl(fn, args, len) {
		if(!$.isFunction(fn)) {
			return this.get(0, this.getSize());
		}
		for(var i = 0, record, result = []; i < len; i++) {
			args[0] = i;
			args[1] = record = this.get(i);
			if(fn.apply(window, args)) {
				result.push(record);
			}
		}
		return result;
	}
	
	$.Data.DataSet.prototype.prototype = {
		"load" : load,
		"fill" : fill,
		"insert" : insert,
		"removeStaticData" : removeStaticData,
		"remove" : remove,
		"update" : update,
		"select" : select,
		"selectByPage" : selectByPage,
		"fuzzySelect" : fuzzySelect,
		"reset" : reset,
		"clean" : clean,
		"getSize" : getSize,
		"get" : get,
		"sort" : sort,
		"count" : count,
		"sum" : sum,
		"avg" : avg,
		"max" : max,
		"min" : min,
		"rollback" : rollback,
		"changeIndex" : changeIndex,
		"setRoot" : setRoot
		
	};
})(fastDev);

/**
 * @class fastDev.Data.Model
 * 数据模型实现类，实现了数据模型化的定义与转换
 */
fastDev.define("fastDev.Data.Model", {
	"alias" : "Model",
	"prototype" : function(fields, mapper){
		this.fields = {};
		
		for(var i = 0, field; field = fields[i++]; ){
			this.addField(field, mapper ? mapper[field.name] : "");
		}
	}
});

fastDev.Data.Model.constructor = function(setting) {
	return new this.prototype(setting.fields, setting.mapper);
};

(function(window){
	var 
		$ = window.fastDev,
		matchNumber = /^(?:\d*\.|)\d+$/,
		type = ["Object", "String", "Int", "Float", "Boolean", "S_Array", "S_Map", "S_Tree"],
		matchDataType = new RegExp("^(" + type.join("|") + ")$"),
		convert = {
			"Object" : convertObject,
			"String" : convertString,
			"Int" : convertInt,
			"Float" : convertFloat,
			"Boolean" : convertBoolean,
			"S_Array" : convertStructure,
			"S_Map" : convertStructure,
			"S_Tree" : convertStructure
		};
		
	/**
	 * 增加数据字段配置 
	 * @param {JsonObject} 配置名称
	 * @param {String} 映射名称
	 */
	function addField(config, mapperName){
		
		config = $.isString(config) ? { "name" : config } : config;

		config.type = matchDataType.test(config.type) ? config.type : "Object";

		switch(config.type) {
			case type[0] :
			case type[1] :
				config.defaultValue = convertString(config.defaultValue);
				break;
			case type[2] :
			case type[3] :
				config.defaultValue = matchNumber.test(config.defaultValue) ? +config.defaultValue : 0;
				break;
			case type[4] :
				config.defaultValue = config.defaultValue === true;
				break;
			case type[5] :
			case type[6] :
			case type[7] :
				config.structure = config.type;
				config.type = "Structure";
				break;
		}

		config.mapping = mapperName || config.mapping || "";
		config.convert = $.isFunction(config.convert) ? config.convert : null;

		this.fields[config.name] = config;
	}
	
	/**
	 * 将传入数据以当前数据模型进行转换
	 * @param {JsonObject} data 数据
	 */
	function objectify(data){
		var option, value, fn, model, fields = this.fields;
			
		for(var name in fields) {
			option = fields[name];
			fn = option.convert || convert[option.type];
			// 获取数据映射数据
			value = data[option.mapping];
			// 数据映射不存在时根据字段名称获取数据
			if( !$.isValid(value) ){
				value = getValueForName(data, name);
				//value = getValueForName(data, name);
			}
			//value = !$.isValid(value) ? getValue(data, name) : value;
			// 根据字段名称获取到数据时，根据字段类型转换数据
			// 获取不到数据时，将当前字段值设置为字段默认值
			data[name] = $.isValid(value) ? fn(value) : option.defaultValue;
		}
		return data;
	}
	
	function getValueForName(data, name){
		var dataPath, len, value = data[name];
		
		if( value === undefined ){
			dataPath = name.split(".");
			len = dataPath.length;
			
			if( len === 1){
				return value;
			}
			
			
			for(var i = 0 ; i < len ; i ++){
				if((data = data[dataPath[i]]) === undefined){
					break;
				}
			}
			
			return data;
		}
		return value;
	}
	
	function convertObject(val) {
		return val;
	}
	
	function convertString(val) {
		return $.isValid(val) ? val + "" : "";
	}
	
	function convertInt(val) {
		val = window.parseInt(val);
		return window.isNaN(val) ? 0 : val;
	}
	
	function convertFloat(val) {
		val = window.parseFloat(val);
		return window.isNaN(val) ? 0 : val;
	}
	
	function convertBoolean(value) {
		return !!value;
	}
	
	function convertStructure(value, type, model) {
		return $.create(type, {
			"data" : value,
			"model" : model
		});
	}
	
	$.Data.Model.prototype.prototype = {
		"addField" : addField,
		"objectify" : objectify
	};
	
})(window);
/**
 * @class fastDev.Data.Tree
 * 多叉树结构化对象，实现将普通的一维数组的树数据转化成多叉树结构的数据
 */
fastDev.define("fastDev.Data.Tree", {
	"alias" : "S_Tree",
	"prototype" : function(fields) {
		this.alias = "S_Tree";
		this.map = {};
		this.invalid = [];
		this.nodeclass = fields ? this.careteNodePrototype(fields) : fastDev.Data.Node;
	}
});

fastDev.Data.Tree.constructor = function(fields) {
	return new this.prototype(fields);
};

(function($){
	/**
	 *  初始化节点之间的父子关系
	 */
	function initNodes() {
		var 
			node,
			i = 0,
			parentid,
			parentnode,
			len = this.invalid.length,
			invalid = [];
		
		// 在无效节点数组中需找到有效节点
		for( ; node = this.invalid[i++]; ){
			// 获取节点的父节点id
			parentid = node.parentid;
			// 获取父节点
			parentnode = this.map[parentid];
			// 如果父节点存在则将当前节点添加至父节点
			// 如果没有父节点且节点中的父节点id无效则当前节点应是根节点
			// 不满足以上条件的节点为游离在数结构之外的无效节点
			if(parentnode) {
				this.map[parentid].addChild(node);
			}else if(parentid === null || parentid === undefined || parentid === "") {
				this.root = node;
			}else{
				invalid.push(node);
			}
		}
		
		if(len !== 0 || len !== invalid.length) {
			this.invalid = invalid;
		}
	}
	
	/**
	 * 增加一个节点
	 * @param {JsonObject} nodeinfo 节点描述信息
	 */
	function addNode(nodeinfo) {
		var 
			node = this.map[nodeinfo.id], 
			parentnode = this.map[nodeinfo.parentid];

		if(parentnode) {
			if(node) {
				this.updateNode(nodeinfo);
			} else {
				node = this.createNode(nodeinfo);
				parentnode.addChild(node);
			}
		} else {
			if(!node) {
				node = this.createNode(nodeinfo);
				this.invalid.push(node);
			}
		}
	}
	
	/**
	 * 创建一个节点对象
	 * @param {JsonObject} nodeinfo 节点描述信息
	 */
	function createNode(nodeinfo) {
		var node = this.nodeclass.constructor(nodeinfo);
		
		this.map[nodeinfo.id] = node;
		return node;
	}
	
	/**
	 * 删除一个节点
	 * @param {String} id 节点id
	 */
	function removeNode(id) {
		var node, parentnode, ids = id.split(",");
			
		for(var i = 0; id = ids[i]; i++) {
			node = this.map[id];
			if(!node) {
				continue;
			}
			parentnode = this.map[node.parentid];
			if(parentnode) {
				parentnode.removeChild(node);
			}
		}
	}
	
	/**
	 * 更改一个节点信息（节点ID不可更改）
	 * @param {JsonObject} nodeinfo
	 */
	function updateNode(nodeinfo) {
		var id = nodeinfo.id, node = this.map[id];
		
		if(node) {
			node.update(nodeinfo.parentid, nodeinfo.text);
		}
	}
	
	/**
	 * 获取根节点
	 * @return {fastDev.Data.Node}
	 */
	function getRoot() {
		return this.root;
	}
	
	/**
	 * 根据id指定获取节点
	 * @param {String} id 节点id
	 * @return {fastDev.Data.Node}
	 */
	function getNode(id) {
		return this.map[id];
	}
	
	/**
	 * 移动节点至指定父节点
	 * @param {String} id 待移动节点id
	 * @param {String} parentid 目标节点id
	 */
	function moveNode(id, parentid) {
		var node = this.map[id], parentnode = this.map[parentid];
		
		if(node && parentnode) {
			this.removeNode(id);
			parentnode.addChild(node);
		}
	}
	
	function sort() {
		this.root.sort();
	}
	
	function getSize() {
		return this.root.getSize();
	}
	
	/**
	 * 构建节点对象原型
	 * @param {Array} fields 属性数组
	 * @private
	 */
	function careteNodePrototype(fields) {
		var 
			name,
			prototype = [], 
			nodeclass = function() {};
			
		nodeclass.prototype = $.Data.Node;
		nodeclass = new nodeclass();
		for(var key in fields) {
			prototype.push("\tthis." + key + " = " + "setting." + key + ";\n");
		}
		prototype.push("\tthis.children = [];\n");
		nodeclass.prototype = $.Util.ObjectUtil.parseObject("setting", prototype.join(''));
		$.apply(nodeclass.prototype.prototype, $.Data.Node.prototype.prototype);
		return nodeclass;
	}
	
	function clean(){
		this.map = {};
		this.root = null;
	}
	
	fastDev.Data.Tree.prototype.prototype = {
		"initNodes" : initNodes,
		"addNode" : addNode,
		"createNode" : createNode,
		"removeNode" : removeNode,
		"updateNode" : updateNode,
		"getRoot" : getRoot,
		"getNode" : getNode,
		"moveNode" : moveNode,
		"sort" : sort,
		"getSize" : getSize,
		"careteNodePrototype" : careteNodePrototype,
		"clean" : clean
	};
})(fastDev);
/**
 * @class fastDev.Data.Node
 */
fastDev.define("fastDev.Data.Node", {
	"alias" : "S_Node",
	"prototype" : function(setting) {
		this.id = setting.id;
		this.parentid = setting.parentid;
		this.text = setting.text;
		this.children = [];
	}
});

fastDev.Data.Node.constructor = function(setting) {
	return new this.prototype(setting);
};

(function($){
	/**
	 * 增加子节点 
	 * @param {fastDev.Data.Node} node
	 */
	function addChild(node) {
		this.children.push(node);
		return this;
	}
	
	/**
	 * 删除子节点
	 * @param {fastDev.Data.Node} node
	 */
	function removeChild(node) {
		if(!node) {
			return;
		}
		
		var id = node.id || node;
		
		for(var i = 0; node = this.children[i++]; ) {
			if(node.id === id) {
				this.children.splice(i, 1);
				break;
			}
		}
	}
	
	/**
	 * 更新当前节点属性 
	 * @param {Object} parentid
	 * @param {Object} text
	 */
	function update(parentid, text) {
		this.parentid = parentid || this.parentid;
		this.text = text || this.text;
	}
	
	/**
	 * 返回当前节点子节点长度 
	 */
	function getSize() {
		return this.children.length;
	}
	
	/**
	 * 根据ID对当前节点的子节点进行排序 
	 */
	function sort() {
		if(this.children.length !== 0) {
			this.children.sort(comparator);
			for(var i = 0, node; node = this.children[i++]; ) {
				node.sort();
			}
		}
	}
	
	/**
	 * 比较俩个节点Id 
	 * @param {fastDev.Data.Node} node1
	 * @param {fastDev.Data.Node} node2
	 * @private
	 */
	function comparator(node1, node2) {
		return $.comparator(node1.id, node2.id);
	}
	
	/**
	 * 遍历当前节点的子节点
	 * @param {Object} fn
	 * @param {Object} level
	 */
	function each(fn, level) {
		level++;
		
		for(var i = 0, len = this.children.length, child; child = this.children[i++]; ){
			fn.call(child, level, i === 0, i === len -1, child.children.length === 0);
			child.each(fn, level);
		}
	}
	
	fastDev.Data.Node.prototype.prototype = {
		"addChild" : addChild,
		"removeChild" : removeChild,
		"update" : update,
		"getSize" : getSize,
		"sort" : sort,
		"each" : each
	};
	
})(fastDev);
/**
 * @class fastDev.Core.ControlBus
 * @extends fastDev.Core.Base
 * @singleton
 * 控件总线，输入控制层的一部分，负责做管理控件库的总体，如逻辑异常处理、HTML模式定义的编译以及控件的实例
 */
(function(window){
	// 检测Session过期的服务地址
	var action, 
		$ = window.fastDev,
		// 检测Session过期完成后的回调方法
		checkComplete = $.noop,
		instanceMap = {},
		queueMap = {},
		matchWhitespace = /[\\x20\\t\\r\\n\\f]/g,
		parseConfig = $.Browser.isIE && !$.Browser.isIE10 ? parseConfig_IE : parseConfig_Other,
		// 匹配属性值
		matchAttrVal = /(.*)(?=\(\)$)|^#\{(.*)\}|^(true|false)$/i,
		// 匹配布尔值属性
		matchBooleanAttr = /\s(disabled|readonly|selected|multiple|checked)|\s+([^=]*)=/gi,
		// 匹配特殊itype，此类itype不被解析
		matchSpecialTag = /template|control|boolean|normal|number|date|text|spacer|separator|end|button/,
		// 事件类型
		eventType = ["onchange", "onsubmit", "onreset", "onselect", "onblur", 
			"onfocus", "onkeydown", "onkeypress", "onkeyup", "onclick", "ondblclick", 
			"onmousedown", "onmousemove", "onmouseout", "onmouseover", "onmouseup"],
		specialParse = {
			// 手风琴
			"Accordion" : parseContentForAccordion,
			// 复选框组
			"CheckBoxGroup" : parseItems,
			// 面包屑
			"BreadCrumb" : parseItems,
			// 按钮
			"Button" : parseSubItems,
			// 表格
			"DataGrid" : parseColumns,
			// 单选框组
			"RadioGroup" : parseItems,
			"Tabs" : parseContent,
			"Toolbar" : parseItems,
			"Select" : parseOption,
			"Panel" : parsePanelContent,
			"AutoComplete" : parseAutoCompleteItems,
			"FileUpload" : parseFileUploadBtns,
			"SWFFileUpload" : parseFileUploadBtns,
			"ChooseList" : parseChooseListContent,
			"DatePicker" : parseDataPickerExpressions,
			"TextBox" : parseTextBoxValue,
			"Tooltip" :  parseTooltipContent
		},
		// 属性映射，高版本IE、chrome、firefox会将大小写混杂的属性名统一以小写替换
		AttrMapper = {
			"saveinstance" : "saveInstance",
			// Column
			"truetext" : "trueText",
			"falsetext" : "falseText",
			"defaultvalue" : "defaultValue",
			"controltype" : "controlType",
			"summarytype" : "summaryType",
			"summarytext" : "summaryText",
			"summaryrenderer" : "summaryRenderer",
			"titlestyle" : "titleStyle",
			"titlecls" : "titleCls",
			"idcolumn" : "idColumn",
			// DataGrid
			"summarytpl" : "summaryTpl",
			"sortfield" : "sortField",
			"limitsortfield" : "limitSortField",
			// ToolBar
			"iconcls" : "iconCls",
			// SelectTree
			"initsource" : "initSource",
			"asyncdatasource" : "asyncDataSource",
			"topparentid" : "topParentid",
			"openfloor" : "openFloor",
			"treetype" : "treeType",
			"showline" : "showLine",
			"showico" : "showIco",
			"rootvalue" : "rootValue",
			"currentId" : "currentId",
			"onlyselectedleaf" : "onlySelectedLeaf",
			"partchkvalue" : "partchkValue",
			"onlyleafvalue" : "onlyLeafValue",
			"customfields" : "customFields",
			"onnodeclick" : "onNodeClick",
			"onafterload" : "onAfterLoad",
			//tabs
			"allowcache" : "allowCache",
			"showclosebtn" : "showCloseBtn",
			"iconstyle" : "iconStyle",
			"iframewidth" : "iframeWidth",
			"iframeheight" : "iframeHeight",
			//chooselist
			"textfield" : "textField",
			"valuefield" : "valueField",
			"onlyleaf" : "onlyLeaf",
			"iscopy" : "isCopy",
			"ongetselecteditems" : "onGetSelectedItems",
			"ongetallitems" : "onGetAllItems",
			"onremoveitems" : "onRemoveItems",
			"onadditems" : "onAddItems",
			"ongettext" : "onGetText",
			"ongetvalue" : "onGetValue",
			"ongetitems" : "onGetItems",
			"onrefresh" : "onRefresh"
		};
		
	/**
	 * 检测Session是否过期，页面如果没有与后台交互的代码可以调用此方法检查Session，否则无需调用
	 * @param {String} url 检测服务地址
	 * @param {Function} checkComplete 检测完成后回调函数
	 */
	function checkSession(url, checkComplete){
		// 无Session过期检测服务
		if(!url && !action) {
			return;
		}
		// 修正服务地址
		if(url && url !== action) {
			action = url;
		} else {
			url = action;
		}
		if($.isFunction(checkComplete)) {
			checkComplete = checkComplete;
		}

		// 开始检测
		$.get(url);
	}
	
	/**
	 * 保存控件实例
	 * @param {String} id 实例ID
	 * @param {Object} instance 实例对象
	 */
	function saveInstance(id, instance) {
		if(!id || !instance) {
			return;
		}
		instanceMap[id] = instance;
	}
	
	/**
	 * 获取控件实例
	 * @param {String} id
	 * @return {Object} 实例对象
	 */
	function getInstance(id) {
		if($.isString(id) && id.replace(matchWhitespace, "").length > 0) {
			return instanceMap[id];
		}
	}
	
	/**
	 * 保存队列实例
	 * @param {String} id 实例ID
	 * @param {Object} instance 队列对象
	 */
	function saveQueue(id, queue) {
		if(!id || !queue) {
			return;
		}
		queueMap[id] = queue;
	}
	
	/**
	 * 获取队列实例
	 * @param {String} id
	 * @return {Object} 队列对象
	 */
	function getQueue(id) {
		if($.isString(id) && id.replace(matchWhitespace, "").length > 0) {
			return queueMap[id];
		}
	}
	
	/**
	 * 编译HTML模式代码
	 * @param {String} [key=itype] html模式关键字
	 * @param {Element} [context] 编译范围
	 */
	function compile(key, context, compel) {
		$("[itype]", context).each(parseHtml, key || "itype", compel);
	}
	
	/**
	 * 绑定Session过期检查完成后的回调句柄
	 * @param {Function} handle 函数句柄
	 */
	function bindCheckComplete(handle) {
		checkComplete = handle;
	}
	/**
	 * 触发Session过期检查完成后的回调句柄
	 * @param {String} msg Session信息
	 * @private
	 */
	function fireTimeout(msg) {
		checkComplete(msg);
	}
	
	/**
	 * 解析关键HTML描述
	 * @param {Element} elem 用于描述的Dom节点
	 * @private
	 */
	function parseHtml(index, elem, key, compel) {
		// 获取控件类型
		var parser, config, control,
			domObj = $(elem),
			type = domObj.attr("itype");
			
		if(compel !== true && (!$.isValid(type) || (key === "itype" && domObj.attr("compile") === "false"))) {
			return;
		}
		

		if(matchSpecialTag.test(type)) {
			return;
		}

		parser = specialParse[type];
		// 删除节点上的itype属性
		domObj.removeAttr("itype");
		// 解析描述节点的配置属性
		config = parseConfig(elem, type, domObj);
		config.container = config.container || domObj.parent();
		config.defineMode = "html";

		// 处理特殊控件的描述
		if($.isValid(parser)) {
			parser(config, elem);
		}
		// 清除浏览器自动绑定的事件
		cleanSysEvent(elem);

		// 创建控件
		control = $.create(type, config);
		// 替换描述节点
		if(type === "Form") {
			return;
		}

		$(control.elems).replace(elem);
	}
	
	/**
	 * 解析HTML属性配置（IE）
	 * @param {Element} elem
	 * @private
	 */
	function parseConfig_IE(elem, type, domObj) {
		var str = elem.outerHTML.replace(elem.innerHTML, "");

		var key, value, begin, end, match,
			config = {}, 
			index = str.indexOf(" "), 
			len = str.length;
			
		domObj = domObj || $(elem);
			
		for(; index < len; index = end) {
			matchBooleanAttr.lastIndex = index;
			match = matchBooleanAttr.exec(str);

			if(!$.isValid(match)) {
				break;
			}
			
			if(match[1]) {
				key = match[1].toLowerCase();
				value = true;
				end = match.index + key.length;
			} else {
				begin = match.index;
				key = match[2];
				key = $.Browser.isIE && !$.Browser.isIE10 ? key : (AttrMapper[key] || key);
				value = (elem.attributes[key] || {}).nodeValue || "";
				end = matchBooleanAttr.lastIndex + (value + "").length;
				value = formatValue(key, value);

			}

			config[key] = value;
		}
		return config;
	}
	
	/**
	 * 解析HTML属性配置（除IE外其他）
	 * @param {Element} elem
	 * @private
	 */
	function parseConfig_Other(elem, type, domObj) {
		domObj = domObj || $(elem);
		
		if(!$.isValid(type)) {
			return parseConfig_IE(elem, type, domObj);
		}

		var node, value, option, 
			config = {},
			clazz = $.Core.ClassManager.getClass(type);
			
		if(clazz) {
			option = clazz._options;
			for(var p in option){
				if( node = elem.attributes[p]) {
					value = formatValue(p, node.nodeValue);
					config[p] = value;
				}
				
			}
		}
		return config;
	}
	
	/**
	 * 特殊值解析
	 * @param {String} key 属性键
	 * @param {String} value 属性值
	 * @return {Object}
	 * @private
	 */
	function formatValue(key, value, match) {
		if( match = matchAttrVal.exec(value)) {
			if(value = match[1] || match[2]) {
				value = value.indexOf(".") === -1 ? window[value] : 
					$.Util.ObjectUtil.parseObject("return window."+value)();
			} else if(value = match[3]) {
				value = value === "true";
			}
		}

		if(/style/i.test(key) && value) {
			var css, 
				style = value.split(";");
				
			value = {};
			while(style[0]) {
				css = style.shift().split(":");
				value[css[0]] = css[1];
			}
		}
		return value;
	}
	
	/**
	 * @private 
	 */
	function cleanSysEvent(elem) {
		for(var i = 0, eventname; eventname = eventType[i++]; ){
			elem[eventname] = null;
		}
	}
	
	/**
	 * 解析子项描述
	 * @param {JsonObject} config 配置对象
	 * @param {Array[Element]} elems 子项描述节点
	 * @private
	 */
	function gatherInfo(elems) {
		var items = [];
		
		for(var i = 0, elem; elem = elems[i++];){
			items.push(parseConfig(elem));
		}
		return items.length ? items : null;
	}
	
	/**
	 * 保存子项Dom内容
	 * @private
	 */
	function gatherInfoparseContent(elems) {
		var childs,
			items = [];
		
		for(var i = 0, elem; elem = elems[i++];){
			items.push(parseConfig(elem));
			childs = $(elem).children(0);
			if(childs.elems.length > 0) {
				items[items.length - 1].content = childs;
			}
		}
		
		return items.length ? items : null;
	}
	
	// --------------- 控件特殊解析实现 ---------------
	/**
	 * @private 
	 */
	function parseContentForAccordion(config, elem){
		var 
			items = [], 
			elems = $(elem).children("div").elems;
			
		for(var i = 0; elem = elems[i];i++){
			items.push(parseConfig(elem));
			items[i].content = $(elem).attr("compile", "false").html();
			items[i].id = items[i].id || $.getID();
		}
		
		config.items = items.length ? items : null;
	}
	
	/**
	 * 常用Div子项解析
	 * @private
	 */
	function parseItems(config, elem) {
		var elems = $(elem).children("div").elems;
		
		return $.isValid(config) ? (config.items = gatherInfo(elems)) : gatherInfo(elems);
		
	}
	
	/**
	 * 按钮子项解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parseSubItems(config, elem) {
		var elems = $(elem).children("div").elems;
		config.subItems = gatherInfo(elems);
	}
	
	/**
	 * DataGrid列解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parseColumns(config, elem) {
		var domObj, name, type, toolBar, controlCfg, parser, column, items,
			columns = [], 
			elems = $(elem).children("div").elems;
			
		for(var i = 0; elem = elems[i++];){
			domObj = $(elem);
			name = domObj.attr("name");
			
			switch (name) {
				case "top-toolbar":
					toolBar = parseConfig(elem);
					parseItems(toolBar, elem);
					config.toolBar = toolBar;
					break;
				case "bottom-toolbar":
					config.pageItems = parseItems(null, elem);
					break;
				case "pageSizeList":
					config.pageSizeList = parseItems(null, elem);
					break;
				case "controlCfg":
					type = config.editby || config.controlType;
					
					if($.isValid(type)) {
						controlCfg = parseConfig(elem, type);
						if(parser = specialParse[type]) {
							parser(controlCfg, elem);
						}
						config.controlCfg = controlCfg;
					}
					break;
				case "rowDetail":
					config.rowDetail = elem.innerHTML;
					break;
				default:
					column = parseConfig(elem);
					if(domObj.children("div").hasElem()) {
						parseColumns(column, elem);
					}
					columns.push(column);
			}
		}
		
		config.columns = columns.length ? columns : null;
	}
	
	/**
	 * Accordion、Tabs子项解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parseContent(config, elem) {
		var elems = $(elem).children("div").elems;
		
		return $.isValid(config) ? (config.items = gatherInfoparseContent(elems)) : gatherInfoparseContent(elems);
	}
	
	/**
	 * Select 子项解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parseOption(config, elem) {
		var option, value, text, selected,
			i = 0,
			items = [], 
			push = items.push,
			domObj = $(elem),
			matchValue = /value=/,
			matchSelected = /selected/,
			elems = domObj.children("option").elems;
		
		if(!elems.length) {
			elems = domObj.children("div").elems;
		}
		
		for(i = 0; elem = elems[i++];){
			option = $(elem);
			value = matchValue.test(elem.outerHTML) ? option.prop("value") || option.attr("value") : null;
			text = option.getText() || option.html() || option.attr("text");
			selected = matchSelected.test(elem.outerHTML);
			items.push({"value" : value, "text" : text, "selected" : selected});
			
		}
		
		
		if($.isArray(config.items)) {
			push.apply(items, config.items);
		}
		
		config.items = items;
	}
	
	/**
	 * Panel内容解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parsePanelContent(config, elem) {
		config.htmlContent = $(elem).children();
	}
	
	/**
	 * AutoComplete子项解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parseAutoCompleteItems(config, elem) {
		
		var 
			domObj = $(elem),
			items = domObj.children("div"),
			fields = domObj.children("div[name='fields']");
			
		if(fields.hasElem()){
			config.fields = gatherInfo(fields.children("div").elems);
		}
		
		fields.remove();
		
		if(items.hasElem){
			config.items = gatherInfo(items.elems);
		}
	}
	
	/**
	 * FileUpload按钮解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parseFileUploadBtns(config, elem) {
		var domObj = $(elem),
			btnName = ["chooseBtn", "uploadBtn"];
		
		for(var i = 0, name; name = btnName[i++];){
			if(elem = domObj.find("div[name='" + name + "']").elems[0]){
				config[name] = gatherInfo([elem])[0];
			}
		}
		
	}
	
	/**
	 * ChooseList items、widget和buttons解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parseChooseListContent(config, elem) {
		var name, widget, template,
			domObj = $(elem),
			items = domObj.children("div[name='items']"),
			fields = domObj.children("div[name='fields']"),
			buttons = domObj.children("div[name='buttons']");
			
		if(buttons.hasElem()){
			config.buttons = gatherInfo(buttons.children("div").elems) || [];
		}
		
		if(items.hasElem()){
			config.items = gatherInfo(items.children("div").elems);
		}
		
		if(fields.hasElem()) {
			config.fields = gatherInfo(fields.children("div").elems);
		}
		
		
		$.each(["leftTop", "leftBottom", "rightTop", "rightBottom"], function(idx, name) {
			template = domObj.children("div[name='" + name + "']");
			if(template.hasElem()) {
				config[name] = "";
				config[name + "Height"] = template.attr("height") || template.outerHeight(true);
				config[name + "Element"] = template.children();
			}
		});
		
		domObj.children("div[name$='Widget']").each(function(idx, element) {
			element = $(element);
			name = element.attr("name").match(/^(left|right)Widget/);
			if(name) {
				name = name[1];
				widget = config[name + "Widget"] = gatherInfo(element.elems)[0] || {};
				widget.name = name;
				
				if(( element = element.children("div")).hasElem()) {
					$.apply(widget, {
						mode : "html",
						type : element.attr("itype"),
						widgetElement : element,
						isNotDefaultContainer : !! element.attr("container"),
						options : parseConfig(element.elems[0], element.attr("itype")) || {}
					});
					
					$.each($.Ui.ChooseList.initPredefine(config, widget), function(name, value) {
						if(!!value) {
							element.attr(name, value);
						}
					});
				}
			}
		});
	}
	
	/**
	 * DatePicker表达式组解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parseDataPickerExpressions(config, elem) {
		var element, exp,
			domObj = $(elem);
			
		$.each(["includes", "excludes"], function(idx, name) {
			if(( element = domObj.children("div[name='" + name + "']")).hasElem()) {
				config[name] = [];
				exp = name.slice(0, 7);
				$.each(gatherInfo(element.children("div").elems) || [], function(i, expr) {
					if(expr[exp]) {
						config[name].push(expr[exp]);
					}
				});
			}
		});
	}
	
	/**
	 * TextBox value值解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parseTextBoxValue(config, elem) {
		if(config.type === "textarea") {
			config.value = $.isValid(config.value) ? config.value + "" : elem.innerHTML;
		}
	}
	
	/**
	 * Tooltip 内容解析
	 * @param {Object} config
	 * @param {Object} elem
	 * @private
	 */
	function parseTooltipContent(config, elem){
		var elems = $(elem).children("div").elems;
		if($.isValid(config)) {
			$.each(gatherInfoparseContent(elems),function(index, option){
				if(!config[option.name]){
					if(option.name==="tooltipContent"&&config.contentEL){
						
					}else{
						config[option.name] = elems[index].innerHTML;
					}
				}
				$(elems[index]).remove();
			});
		} else {
			return gatherInfoparseContent(elems);
		}
	}
	
	var expose = {
		/**
		 * 保存控件实例
		 * @method
		 * @param {String} id 实例ID
		 * @param {Object} instance 实例对象
		 * @member fastDev
		 */
		"saveInstance" : saveInstance,
		/**
		 * 获取控件实例
		 * @method
		 * @param {String} id
		 * @return {Object} 实例对象
		 * @member fastDev
		 */
		"getInstance" : getInstance,
		/**
		 * 保存队列实例
		 * @method
		 * @param {String} id 实例ID
		 * @param {Object} instance 队列对象
		 * @member fastDev
		 */
		"saveQueue" : saveQueue,
		/**
		 * 获取队列实例
		 * @method
		 * @param {String} id
		 * @return {Object} 队列对象
		 * @member fastDev
		 */
		"getQueue" : getQueue
	};
	$.apply(expose);
	
	$.Core.ControlBus = $.apply({
		"checkSession" : checkSession,
		"compile" : compile,
		"bindCheckComplete" : bindCheckComplete
	}, expose);
	
})(window);
/**
 * @class fastDev.Core.DataBus
 * @extends fastDev.Core.Base
 * @singleton
 * 数据总线，输入控制层的一部分，负责管理数据的统一加载、接受以及数据异常的处理
 */

(function($){
	var dataReader, onReqComplete,
		reqCount = 0;
	/**
	 * 数据处理
	 * @param {Object} result 返回结果
	 * @param {Function} success 成功回调
	 * @param {Function} complete 完成回调
	 * @private
	 */
	function processing(data, success, error, complete){
		var msg, status, handle, detailMsg,
			reader = $.Core.DataBus.dataReader,
			type = data.xml && data.xml.attributes ? "xml" : "json";
			
		if(data.text || data.xml){
			data = $.Data.Reader.read(type === "xml" ? data.xml : data.text, type);
			data = data === null ? {} : data;
			if(reader && $.isFunction(reader)) {
				data = reader(data) || data;
			}
		}
		
		// 获取数据部分的状态信息
		status = data.status;

		switch(status){
			case "system" :
				if(error && !(detailMsg = error(data)));
				break;
			case "timeout" :
				handle = status === "timeout" ? doTimeout : doSystem;
				handle(data.msg, detailMsg || data.detailMsg);
				break;
			default :
				if(success && success(data));
				break;
		}
			
		return complete && complete(data);
	}
	
	/**
	 * 处理系统错误
	 */
	function doSystem(msg, detailMsg) {
		$.addError("Ajax", "doAjax", msg, detailMsg);
	}
	
	/**
	 * 处理Session过期
	 */
	function doTimeout(msg) {
		$.Core.ControlBus.fireTimeout(msg);
	}
	
	/**
	 * 设置数据读取器，数据总线处理数据时回调此方法，可用于统一处理数据
	 * @param {Function} reader 数据读取函数
	 */
	function setDataReader(reader) {
		dataReader = $.isFunction(reader) && reader;
	}
	
	/**
	 * 请求队列数增加
	 */
	function increaseReqCount() {
		reqCount++;
	}
	
	/**
	 * 请求队列数减少
	 */
	function reduceReqCount() {
		if(reqCount) {
			reqCount--;
		}
		execReqComplete();
	}
	
	/**
	 * 绑定所有请求队列执行完成事件
	 * @param {Function} handle
	 */
	function bindReqComplete(handle) {
		onReqComplete = $.isFunction(handle) && handle;
	}
	
	/**
	 * 执行所有请求队列完成事件
	 * @private
	 */
	function execReqComplete() {
		if(!reqCount && !$.show() && $.isFunction(onReqComplete) && onReqComplete());
	}
	
	$.Core.DataBus = {
		"processing" : processing,
		"setDataReader" : setDataReader,
		"increaseReqCount" : increaseReqCount,
		"reduceReqCount" : reduceReqCount,
		"bindReqComplete" : bindReqComplete
	};
})(fastDev);
/**
 * @class fastDev.Core.DomObject
 * @extends fastDev.Core.Base
 * 当前类为Dom操作的封装，实现了Dom的常用操作,包括检索、事件、属性、样式、动画这几个方面
 */
fastDev.define("fastDev.Core.DomObject", {
	"alias" : "DomObject",
	"prototype" : function(selector, context, elems) {
		this.elems = [];
		this.alias = "DomObject";
		var push = this.elems.push;
		
		if(elems) {
			this.elems = elems;
			return;
		} else if(fastDev.isString(selector)) {
			if(fastDev.isArray(context)){
				for(var i=0, contextList = context; context = contextList[i++]; ){
					push.apply(this.elems, fastDev.Sizzle(selector, context));
				}
			}else{
				this.elems = fastDev.Sizzle(selector, context);
			}
		}
	}
});

fastDev.Core.DomObject.constructor = function(setting) {
	return new this.prototype(setting.selector, setting.context, setting.elems);
};

(function (window){
	var 
		domImpl = {},
		$ = window.fastDev, 
		boxModel = $.Support.boxModel,
		// 需要特殊处理的样式名
		cssSpecialName = {
			"float" : $.Browser.isIE ? "styleFloat" : "cssFloat"
		}, 
		cssSpecialHandling = {},
		// 特殊样式的前缀
		cssPrefixes = ["Webkit", "O", "Moz", "ms"],
		// 值为数字不带单位的样式
		cssNumber = {
			"fontWeight" : true,
			"lineHeight" : true,
			"opacity" : true,
			"zIndex" : true,
			"zoom" : true
		}, 
		cssShow = {
			"position" : "absolute",
			"visibility" : "hidden",
			"display" : "block"
		},
		// 值为normal时获取实际值
		cssNormalTransform = {
			"letterSpacing" : 0,
			"fontWeight" : 400
		}, 
		cssExpand = ["Top", "Right", "Bottom", "Left"],
		// 属性兼容映射
		propMapping = {
			"tabindex" : "tabIndex",
			"readonly" : "readOnly",
			"for" : "htmlFor",
			"class" : "className",
			"maxlength" : "maxLength",
			"cellspacing" : "cellSpacing",
			"cellpadding" : "cellPadding",
			"rowspan" : "rowSpan",
			"colspan" : "colSpan",
			"usemap" : "useMap",
			"frameborder" : "frameBorder",
			"contenteditable" : "contentEditable"
		},
		// 匹配值为数字的样式
		matchCssValue = /(?:\d*\.|)\d+/, 
		matchAlphaValue = /alpha\([^)]*\)/i,
		// 匹配增量值或减量值
		matchRelNum = /^([-+])=([\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|))/i,
		// 匹配透明度值
		matchOpacityValue = /opacity=([^)]*)/,
		// 匹配值为布尔类型的属性
		matchBooleanProp = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;
		
	if($.Browser.isIE) {
		// 当前浏览器为IE系列时，透明度需要特殊处理
		cssSpecialHandling.opacity = {
			"get" : function(elem) {
				return matchOpacityValue.test((elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? (0.01 * parseFloat(RegExp.$1) ) + "" : "1";
			},
			"set" : function(elem, value) {
				var style = elem.style, currentStyle = elem.currentStyle, opacity = $.isNumber(value) ? "alpha(opacity=" + value * 100 + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";

				style.zoom = 1;

				if(value >= 1 && $.Util.StringUtil.trim(filter.replace(matchAlphaValue, "")) === "" && style.removeAttribute) {

					style.removeAttribute("filter");

					if(currentStyle && !currentStyle.filter) {
						return;
					}
				}

				style.filter = matchAlphaValue.test(filter) ? filter.replace(matchAlphaValue, opacity) : filter + " " + opacity;
			}
		};
	}

	// 火狐谷歌使用getComputedStyle
	// ie系列使用currentStyle
	var curCSS = window.getComputedStyle ? function(elem, name) {
			var val, computed = window.getComputedStyle(elem, null);
	
			if(computed) {
				val = computed.getPropertyValue(name) || computed[name];
	
				if(val === "" && !CONTAINS(elem.ownerDocument, elem)) {
					val = styleImpl(elem, name);
				}
			}
			return val;
		} : document.documentElement.currentStyle ? function(elem, name) {
			var val, style = elem.style, currentStyle = elem.currentStyle;
	
			if(currentStyle) {
				val = elem.currentStyle[name];
			}
	
			// 如果获取的值无效则直接获取内联样式
			if(!$.isValid(val) && style && style[name]) {
				val = style[name];
			}
			return val === "" ? "auto" : val;
		} : $.noop;

	// IE下removeChild不释放内存
	var removeChild = $.Browser.isIE ? function() {
			var garbage;
			return function(node) {
				if(node && node.tagName !== 'BODY') {
					garbage = garbage || document.createElement('DIV');
					garbage.appendChild(node);
					garbage.innerHTML = '';
				}
			};
		}() : function(node) {
			if(node && node.parentNode && node.tagName !== 'BODY') {
				node.parentNode.removeChild(node);
			}
		};
	// 将以"-"分隔的字符串转换为驼峰格式
	// @private
	function camelCase(value) {
		return value.replace(/-([a-z]|[0-9])/ig, $.Util.StringUtil.capitalize);
	}

	function getWindow(elem) {
		return $.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
	}
	
	function FIND(elem, selector) {
		return $.Sizzle(selector, elem);
	}

	// 判断指定Dom元素是否包含目标Dom元素
	// @param {Element} source 指定对象
	// @param {Element} target 目标对象
	// @return {Booelan}
	function CONTAINS(source, elem) {
		if(document.documentElement.contains) {
			return source !== elem && (source.contains ? source.contains(elem) : true);
		} else if(document.documentElement.compareDocumentPosition) {
			return !!(source.compareDocumentPosition(elem) && 16);
		} else {
			return false;
		}
	}
	
	// 克隆Dom元素
	// @param {Element} elem 克隆原型
	// @param {Boolean} [deep=true] 是否克隆其子元素
	function CLONE(elem, deep) {
		return elem.cloneNode(deep !== false);
	}

	// 获取body元素的位置
	function bodyOffset(body) {
		var top = body.offsetTop, left = body.offsetLeft;

		top += parseFloat(cssImpl(body, "marginTop")) || 0;
		left += parseFloat(cssImpl(body, "marginLeft")) || 0;

		return {
			top : top,
			left : left
		};
	}

	// 获取浏览器所持有的特殊带前缀的样式
	function getSpecialCss(style, name) {
		var oldName = name, i = cssPrefixes.length, capName = name.charAt(0).toUpperCase() + name.slice(1);

		while(i--) {
			name = cssPrefixes[i] + capName;
			if( name in style) {
				return name;
			}
		}
		return oldName;
	}

	// 用于内联样式处理
	// 内联样式 : 写在标签style属性中的样式
	function styleImpl(elem, name, val) {
		// 元素有效性校验
		if(!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
			return;
		}

		var match, type, style = elem.style, specialHandling;
		// 去除样式名中的下划线并将下划线后面第一个字母转换为大写
		name = camelCase(name);
		// 获取当前样式名对应的兼容名称
		name = cssSpecialName[name] || name;
		// 获取当前样式名的特殊处理句柄
		specialHandling = cssSpecialHandling[name];
		// 如果标准样式中找不到则尝试在特殊样式中查找
		if(!( name in style)) {
			cssSpecialName[name] = getSpecialCss(style, name);
		}
		// 值有效时做设置操作，无效时做获取操作
		if($.isValid(val)) {
			type = typeof val;
			// 如果传入值类型为字符串则转换为数字
			if(type === "string" && ( match = matchRelNum.exec(val))) {
				val = (match[1] + 1 ) * match[2] + parseFloat(cssImpl(elem, name));
				type = "number";
			}
			// 样式值有效性校验
			if(type === "number" && isNaN(val)) {
				return;
			}
			// 对特例之外的样式附加单位
			if(type === "number" && !cssNumber[name]) {
				val += "px";
			}
			if(!specialHandling || !specialHandling.set || specialHandling.set(elem, val) !== undefined) {
				style[name] = val;
			}
		} else {
			if(specialHandling && specialHandling.get && ( val = specialHandling.get(elem)) !== undefined) {
				return val;
			}
			return style[name];
		}
	}

	// 用于内部样式以及外部样式处理
	// 内部样式：定于在head标签中的样式
	// 外部样式 : 引用的外部定义的css文件
	function cssImpl(elem, name) {
		var val, specialHandling, style = elem.style;
			// 去除样式名中的下划线并将下划线后面第一个字母转换为大写
			name = camelCase(name);
			// 获取当前样式名对应的兼容名称
			name = cssSpecialName[name] || name;
			// 获取当前样式名的特殊处理句柄
			specialHandling = cssSpecialHandling[name];

		// 如果标准样式中找不到则尝试在特殊样式中查找并缓存此特殊样式
		if(!( name in style)) {
			cssSpecialName[name] = getSpecialCss(style, name);
		}

		if(specialHandling && specialHandling.get) {
			return specialHandling.get(elem);
		}

		val = curCSS(elem, name);

		// 当值为normal时，返回对应的数值
		if(val === "normal" && name in cssNormalTransform) {
			val = cssNormalTransform[name];
		}
		return val;
	}

	function widhtHeight(elem, value, type, extra) {
		var doc = elem.document;
		// elem为window或者document时，只能获取宽高值
		// 处理window的宽高值获取
		if($.isWindow(elem)) {
			var docElemProp = doc.documentElement["client" + type];
			return boxModel && docElemProp || doc.body && doc.body["client" + type] || docElemProp;
		}

		// 处理document的宽高值获取
		if(elem.nodeType === 9) {
			doc = elem.documentElement;

			if(doc["client" + type] >= doc["scroll" + type]) {
				return doc["client" + type];
			}

			return Math.max(elem.body["scroll" + type], doc["scroll" + type], elem.body["offset" + type], doc["offset" + type]);
		}

		// 值有效时当前操作为设置
		// 值无效时当前操作为获取
		if($.isValid(value)) {
			styleImpl(elem, type.toLowerCase(), value);
		} else {
			// offsetWidth为0时元素可能处于隐藏状态
			// 需要先将元素显示出来再获取宽高
			// offsetWidth不为0时直接获取
			if(elem.offsetWidth !== 0) {
				return widthHeightImpl(elem, type, extra);
			} else {
				var old = {}, val, name;
				// 修正元素样式，使其可以被浏览器解析宽高
				for(name in cssShow ) {
					old[name] = elem.style[name];
					elem.style[name] = cssShow[name];
				}

				val = widthHeightImpl(elem, type, extra);
				// 还原元素样式，使其恢复之前的邢台
				for(name in cssShow ) {
					elem.style[name] = old[name];
				}

				return val;
			}
		}
	}

	function widthHeightImpl(elem, name, extra) {
		var val, i, len = 4;

		if(name === "Width") {
			val = elem.offsetWidth;
			i = 1;
		} else {
			val = elem.offsetHeight;
			i = 0;
		}
		// offsetWidth/offsetHeight值默认是包括了border值与padding值
		// 当extra没有值时是要获取内容宽度/高度，执行语句1、语句3，offsetWidth/offsetHeight值 - padding值 - border值
		// 当extra为padding时是要获取内容宽度/高度+padding，执行语句3，offsetWidth/offsetHeight值 - border值
		// 当extra为border时是要获取内容宽度/高度+padding+border，直接返回offsetWidth/offsetHeight值
		// 当extra为margin时是要获取内容宽度/高度+padding+border+margin，执行语句2，offsetWidth/offsetHeight值 + margin值
		if(val > 0) {
			if(extra !== "border") {
				for(; i < len; i += 2) {
					if(!extra) {
						// 语句1
						val -= parseFloat(cssImpl(elem, "padding" + cssExpand[i])) || 0;
					}
					if(extra === "margin") {
						// 语句2
						val += parseFloat(cssImpl(elem, extra + cssExpand[i])) || 0;
					} else {
						// 语句3
						val -= parseFloat(cssImpl(elem, "border" + cssExpand[i] + "Width")) || 0;
					}
				}
			}
			return val;
		}

		// 获取内部样式/外部样式中的值
		val = cssImpl(elem, name);

		// 获取内联样式中的值
		if(val < 0 || val === null) {
			val = elem.style[name];
		}

		val = parseFloat(val) || 0;

		// 从内联样式/内部样式/外部样式中获取的宽度/高度值仅仅是内容宽度/高度值，不包含padding/border/margin值
		// 当extra没有值时是要获取内容宽度/高度，直接返回样式值
		// 当extra为padding时是要获取内容宽度/高度+padding，执行语句1，使用样式值 + padding值
		// 当extra为border时是要获取内容宽度/高度+padding+border，执行语句1、语句2，使用样式值 + padding值 + border值
		// 当extra为margin时是要获取内容宽度/高度+padding+border+margin，执行语句1、语句2、语句3，使用样式值 + padding值 + border值 + margin值
		if(extra) {
			for(; i < len; i += 2) {
				// 语句1
				val += parseFloat(cssImpl(elem, "padding" + cssExpand[i])) || 0;
				if(extra !== "padding") {
					// 语句2
					val += parseFloat(cssImpl(elem, "border" + cssExpand[i] + "Width")) || 0;
				}
				if(extra === "margin") {
					// 语句3
					val += parseFloat(cssImpl(elem, extra + cssExpand[i])) || 0;
				}
			}
		}
		return val;
	}

	function scrollTopLeft(elem, value, type, prop) {
		var top = prop.indexOf("Y") !== -1, win = getWindow(elem);

		// 获取滚动条位置
		if(value === undefined) {
			return win ? win[prop] ? win[prop] : boxModel && win.document.documentElement[type] || win.document.body[type] : elem[type];
		}
		// 设置滚动条位置
		if(win) {
			win.scrollTo(!top ? value : $(win).scrollLeft(), top ? value : $(win).scrollTop());
		} else {
			elem[type] = value;
		}

	}

	function getOffset(elem, doc) {
		doc = doc || elem.ownerDocument;

		var top, left, rect, body = doc.body, docElem = doc.documentElement;

		try {
			// 获得指定元素的左，上，右和下分别相对浏览器视窗的位置
			rect = elem.getBoundingClientRect();
		} catch(e) {
		}

		// 获取位置出错时返回默认值
		// 元素不在文档中时直接按当前获取的位置返回
		if(!rect || !CONTAINS(docElem, elem)) {
			return rect ? {
				top : rect.top,
				left : rect.left
			} : {
				top : 0,
				left : 0
			};
		}

		// IE中document文档实际并不在(0,0)的位置，在它周围有一个小（通常有2px）边框
		// document.body.clientLeft和document.body.clientTop包含了这个边框的宽度
		// 获取到的位置值 + 滚动条卷去的值 - document文档边框
		var win = getWindow(doc), clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, scrollTop = win.pageYOffset || boxModel && docElem.scrollTop || body.scrollTop, scrollLeft = win.pageXOffset || boxModel && docElem.scrollLeft || body.scrollLeft;

		top = rect.top + scrollTop - clientTop;
		left = rect.left + scrollLeft - clientLeft;

		return {
			top : top,
			left : left
		};
	}

	function setOffset(elem, options) {
		var currentPosition = cssImpl(elem, "position");

		// 默认定位设置位置属性无效，需要先改变其定位属性
		if(currentPosition === "static") {
			elem.style.position = "relative";
		}

		var 
			currentTop, 
			currentLeft, 
			props = {}, 
			currentOffset = getOffset(elem),
			top = css( elem, "top" ),
			left = css( elem, "left" ),
			// 是否需要重新计算位置值
			calculatePosition = (currentPosition === "absolute" || currentPosition === "fixed" ) && [top, left].join("").indexOf("auto") !== -1;

		// 如果当前定位类型是绝对定位并且有未设定的位置值时
		if(calculatePosition) {
			// 获取当前元素与相对定位元素之间的位置值差
			currentPosition = position(elem);
			currentTop = currentPosition.top;
			currentLeft = currentPosition.left;
		} else {
			// 直接获取当前元素的定位值
			top = cssImpl(elem, "top");
			left = cssImpl(elem, "left");
			currentTop = parseFloat(top) || 0;
			currentLeft = parseFloat(left) || 0;
		}

		// 用指定定位值 - 当前定位值得到位置的偏移量 + 当前元素与相对定位元素之间的差值得到最终值设定给元素
		if($.isValid(options.top)) {
			props.top = (options.top - currentOffset.top ) + currentTop;
		}
		if($.isValid(options.left)) {
			props.left = (options.left - currentOffset.left ) + currentLeft;
		}
		css(elem, props);
	}

	/**
	 * 返回当前对象相对于父元素的位置
	 * @return {Object}
	 */
	function position(elem) {
		// 计算指定元素与指定元素的相对定位元素之间的定位值之差
		// 需要排除掉相对定位元素的border值和指定元素的margin值
		// 因此方法是在指定元素的定位类型为绝对定位时调用，所以忽悠相对定位元素的padding值
		var
			// 找到当前元素的相对定位元素
			offsetParent = elem.offsetParent,
			// 获取当前元素的定位值
			elemOffset = getOffset(elem),
			// 如果当前元素的相对定位元素为body或者html元素的话忽悠其所造成的影响
			// 否则或者当前元素的相对定位元素的位置值
			parentOffset = "HTMLBODY".indexOf(offsetParent.nodeName) === -1 ? offset(offsetParent) :
				{ "top" : 0, "left" : 0 };

		elemOffset.top -= parseFloat(cssImpl(elem, "marginTop")) || 0;
		elemOffset.left -= parseFloat(cssImpl(elem, "marginLeft")) || 0;

		parentOffset.top += parseFloat(cssImpl(offsetParent, "borderTopWidth")) || 0;
		parentOffset.left += parseFloat(cssImpl(offsetParent, "borderLeftWidth")) || 0;

		return {
			top : elemOffset.top - parentOffset.top,
			left : elemOffset.left - parentOffset.left
		};
	}

	function filterByNodeType(elem, nodeType, type) {
		if(nodeType === "all") {
			return elem;
		}

		nodeType = nodeType || 1;
		if($.isNumber(nodeType)) {
			while(elem && elem.nodeType !== nodeType) {
				elem = domImpl[type](elem);
			}
		}
		return elem;
	}

	/**
	 * 设置/获得Dom元素文本
	 * @param {String} text 文本
	 * @return {String/Number/fastDev.Core.DomObject}
	 * 此方法做设置用时返回{@link fastDev.Core.DomObject},做获取用时返回文本
	 */
	function text(elem, val) {
		var node, nodeType, childList = children(elem, 3);
		// val值有效时重设当前元素文本节点值
		// val值无效时回去当前元素文本节点值
		if($.isValid(val)) {
			// 创建文本节点
			node = $.createByHTML(val);
			// 删除当前元素上的其他文本节点
			for(var i = 0, textNode; textNode = childList[i++]; ) {
				remove(textNode);
			}
			// 将新建的文本节点添加到元素上
			append(elem, node);
		} else if( nodeType = elem.nodeType) {
			val = "";

			// 火狐使用textContent获取文本内容
			// IE系列使用innerText获取文本内容
			// 谷歌俩者都支持
			if(nodeType === 1 || nodeType === 9 || nodeType === 11) {
				if( typeof elem.innerText === 'string') {
					return elem.innerText.replace(/\r/g, '');
				} else {
					return elem.textContent;
				}
			} else if(nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			return val;
		}
	}


	/**
	 * 设置/获得Dom元素属性值(适用于Dom源生属性)
	 * @param {String} name 属性名称
	 * @param {String|Number} [value] 属性值
	 * @return {String/Number/fastDev.Core.DomObject}
	 * 此方法做设置用时返回{@link fastDev.Core.DomObject},做获取用时返回属性值
	 */
	function prop(elem, name, value) {
		// 忽略非控件
		var nodeType = elem.nodeType, ret;
		// 忽略文本、注释、属性节点
		if(!elem || nodeType === 3 || nodeType === 8 || nodeType === 2) {
			return;
		}

		name = propMapping[name] || name;
		if($.isValid(value)) {
			elem[name] = value;
		} else {
			ret = elem[name];
			return  ret === "undefined" || ret===undefined ? null : ret;
		}
	}

	/**
	 * 删除当前对象下所有元素指定属性(适用于Dom源生属性)
	 * @param {String} name 属性名称
	 * @return {fastDev.Core.DomObject}
	 */
	function removeProp(elem, name) {
		name = propMapping[name] || name;
		if(matchBooleanProp.test(name)) {
			elem[name] = false;
		} else {
			try {
				elem[name] = undefined;
				delete elem[name];
			} catch( e ) {
			}
		}
	}

	// 判断属性是否拥有指定属性值(适用于Dom源生属性)
	// 未开放
	function hasProp(elem, name) {
		return $.isValid(prop(elem, name));
	}

	/**
	 * 设置/获得Dom元素属性值(适用于自定义属性)
	 * @param {String} name 属性名称
	 * @param {String|Number} [value] 属性值
	 * @return {String/Number/fastDev.Core.DomObject}
	 * 此方法做设置用时返回{@link fastDev.Core.DomObject},做获取用时返回属性值
	 */
	function attr(elem, name, value) {
		var nodeType = elem.nodeType, node;
		// 忽略文本、注释、属性节点
		if(!elem || nodeType === 3 || nodeType === 8 || nodeType === 2) {
			return;
		}

		if(!elem.getAttribute || propMapping[name]) {
			return prop(elem, name, value);
		}

		if(value !== undefined) {
			elem.setAttribute(name, "" + value);
		} else {
			return (node = elem.attributes[name]) && node.nodeValue || elem.getAttribute(name);
		}
	}

	/**
	 * 删除当前对象下所有元素指定属性(适用于自定义属性)
	 * @param {String} name 属性名称
	 * @return {fastDev.Core.DomObject}
	 */
	function removeAttr(elem, name) {
		if(name && elem.nodeType === 1) {
			attr(elem, name, "");
			elem.removeAttribute(name);
		}
	}

	// 判断属性是否拥有指定属性值(适用于自定义属性)
	// 未开放
	function hasAttr(elem, name) {
		return $.isValid(attr(elem, name));
	}

	/**
	 * 重设当前对象下所有子元素样式名
	 * @param {String} class 样式名称
	 * @return {fastDev.Core.DomObject}
	 */
	function setClass(elem, classname) {
		prop(elem, "class", classname);
	}

	/**
	 * 为当前对象下所有子元素增加指定样式名
	 * @param {String} class 样式名称
	 * @return {fastDev.Core.DomObject}
	 */
	function addClass(elem, classname) {
		var currentClassName = " " + prop(elem, "class") + " ";
		if(currentClassName.indexOf(" " + classname + " ") === -1) {
			currentClassName += classname + " ";
		}

		elem.className = $.Util.StringUtil.trim(currentClassName);
	}

	/**
	 * 删除当前对象下所有元素的指定样式名
	 * @param {String} class 样式名称
	 * @return {fastDev.Core.DomObject}
	 */
	function removeClass(elem, classname) {
		var currentClassName = " " + prop(elem, "class") + " ";
		classname = currentClassName.replace(" " + classname + " ", " ");
		elem.className = $.Util.StringUtil.trim(classname);
	}

	/**
	 * 判断当前对象首个元素是否包含指定样式名
	 * @param {String} classname 样式名称
	 * @return {Boolean}
	 */
	function hasClass(elem, classname) {
		var currentClassName = " " + prop(elem, "class") + " ";
		return currentClassName.indexOf(" " + classname + " ") >= 0;
	}

	/**
	 * 在俩个指定样式之间进行切换 "classname1,classname2"
	 * @param {String} class 样式名称
	 * @return {Boolean}
	 */
	function toggleClass(elem, classname) {
		classname = classname.split(",");

		if(classname.length === 2 && $.isString(classname[0]) && $.isString(classname[1])) {
			if(hasClass(elem, classname[0])) {
				removeClass(elem, classname[0]);
				addClass(elem, classname[1]);
			} else {
				removeClass(elem, classname[1]);
				addClass(elem, classname[0]);
			}
		}
	}

	/**
	 * 设置/获取Dom元素style属性值
	 * @param {String} name 样式属性名称
	 * @param {String} [value] 样式属性值
	 * @return {Number/String/fastDev.Core.DomObject}
	 * 此方法做设置用时返回{@link fastDev.Core.DomObject},做获取用时返回样式值
	 */
	function css(elem, name, value) {
		if($.isPlainObject(name)) {
			$.each(name, function(key, value) {
				styleImpl(elem, key, value);
			});
			return;
		}
		return value !== undefined ? styleImpl(elem, name, value) : cssImpl(elem, name);
	}

	/**
	 * 清除当前对象下所有Element元素Style属性值
	 * @param {String} name 样式属性名称
	 * @return {fastDev.Core.DomObject}
	 */
	function removeCss(elem, name) {
		name = (name || "").split(",");
		$.each(name, function(i, item) {
			styleImpl(elem, item, "");
		});
	}

	/**
	 * 将当前对象下所有Element元素设置为隐藏
	 * @return {fastDev.Core.DomObject}
	 */
	function hide(elem) {
		styleImpl(elem, "display", "none");
		removeClass(elem, "ui-display");
	}

	/**
	 * 将当前对象下所有Element元素设置为可见
	 * @return {fastDev.Core.DomObject}
	 */
	function show(elem) {
		removeCss(elem, "display");
		removeClass(elem, "ui-hidden");
	}

	/**
	 * 判断当前对象首个元素是否可见
	 * @return {Boolean}
	 */
	function isShow(elem) {
		return !(hasClass(elem, "ui-hidden") || cssImpl(elem, "display") === "none");
	}

	/**
	 * 如果当前Dom元素可见则设置为不可见，否则设置为可见
	 * @return {fastDev.Core.DomObject}
	 */
	function toggle(elem) {
		return isShow(elem) ? hide(elem) : show(elem);
	}

	/**
	 * 设置/获取Element绝对位置top,left
	 * @param {JsonObject} [options] 元素目标坐标值
	 * @param {String} [options.top]  元素目标top值
	 * @param {String} [options.left]  元素目标left值
	 * @return {fastDev.Core.DomObject/JsonObject}
	 * 此方法做设置用时返回{@link fastDev.Core.DomObject},做获取用时返回位置信息
	 */
	function offset(elem, options) {
		var doc = elem && elem.ownerDocument;

		if(!doc) {
			return;
		}

		if(elem === doc.body) {
			return bodyOffset(elem);
		}

		if($.isValid(options)) {
			setOffset(elem, options);
		}

		return getOffset(elem, doc);
	}

	/**
	 * 获取/设置Dom元素宽度（内容）
	 * @param {String} [value] 宽度值
	 * @return {Number|fastDev.Core.DomObject}
	 * 此方法做设置用时返回{@link fastDev.Core.DomObject},做获取用时返回宽度值
	 */
	function width(elem, value) {
		if(!$.isValid(elem)) {
			return;
		}
		return widhtHeight(elem, value, "Width");
	}

	// 设置Dom元素宽度
	// @param {Element} elem Dom元素
	// @param {String} value 宽度值
	function setWidth(elem, value) {
		styleImpl(elem, "width", value);
	}

	/**
	 * 获取Dom元素宽度(内容+padding)
	 * @return {Number}
	 */
	function innerWidth(elem) {
		return widhtHeight(elem, undefined, "Width", "padding");
	}

	/**
	 * 获取Dom元素宽度（内容+padding+border）
	 * @param {Boolean} [margin=false] 是否包含margin值
	 * @return {Number}
	 */
	function outerWidth(elem, margin) {
		return widhtHeight(elem, undefined, "Width", margin ? "margin" : "border");
	}

	/**
	 * 获取/设置Dom元素高度(内容)
	 * @param {String} [value] 高度值
	 * @return {Number/fastDev.Core.DomObject}
	 * 此方法做设置用时返回{@link fastDev.Core.DomObject},做获取用时返回高度值
	 */
	function height(elem, value) {
		return widhtHeight(elem, value, "Height");
	}

	// 设置Dom元素高度
	// @param {Element} elem Dom元素
	// @param {String} value 高度度值
	function setHeight(elem, value) {
		styleImpl(elem, "height", value);
	}

	// 获取高度(内容+padding)
	// @param {Element} elem Dom元素
	/**
	 * 获取高度(内容+padding)
	 * @return {Number}
	 */
	function innerHeight(elem) {
		return widhtHeight(elem, undefined, "Height", "padding");
	}

	/**
	 * 获取高度(内容+padding+border)
	 * @param {Boolean} [margin=false] 是否包含margin值
	 * @return {Number}
	 */
	function outerHeight(elem, margin) {
		return widhtHeight(elem, undefined, "Height", margin ? "margin" : "border");
	}

	/**
	 * 获取/设置水平滚动条X坐标值
	 * @param {Number} [value] X坐标值
	 * @return {fastDev.Core.DomObject/Number} domObj/value
	 * 此方法做设置用时返回{@link fastDev.Core.DomObject},做获取用时返回X坐标值
	 */
	function scrollLeft(elem, value) {
		return scrollTopLeft(elem, value, "scrollLeft", "pageXOffset");
	}

	/**
	 * 获取/设置垂直滚动条Y坐标值
	 * @param {Number} [value] Y坐标值
	 * @return {fastDev.Core.DomObject/Number} domObj/value
	 * 此方法做设置用时返回{@link fastDev.Core.DomObject},做获取用时返回Y坐标值
	 */
	function scrollTop(elem, value) {
		return scrollTopLeft(elem, value, "scrollTop", "pageYOffset");
	}

	/**
	 * 获取子元素对象
	 * @param {String} selector 匹配条件(当前对象内包含多个Element元素时可设置条件过滤)
	 * @param {Number} [nodeType=1] 节点类型
	 * @return {fastDev.Core.DomObject}
	 */
	function children(elem, nodeType) {
		var childList = [];
		nodeType = $.isNumber(nodeType) ? nodeType : 1;
		for(var i = 0, childNodes = elem.childNodes, len = childNodes.length; i < len; i += 1) {
			if((nodeType && childNodes[i].nodeType !== nodeType) && nodeType !== 0) {
				continue;
			}
			childList.push(childNodes[i]);
		}
		return childList;
	}

	/**
	 * 删除指定Dom元素所有子元素对象
	 * @return {fastDev.Core.DomObject}
	 */
	function empty(elem) {
		if(elem.nodeType !== 1) {
			return;
		}

		while(elem.firstChild) {
			removeChild(elem.firstChild);
		}
	}

	/**
	 * 获取当前对象父元素
	 * @param {String} selector 匹配条件(当前对象内包含多个Element元素时可设置条件过滤)
	 * @return {fastDev.Core.DomObject}
	 */
	function parent(elem) {
		return elem.parentNode;
	}

	/**
	 * 获取当前对象所有祖先元素
	 * @param {String} selector 匹配条件(当前对象内包含多个Element元素时可设置条件过滤)
	 * @return {fastDev.Core.DomObject}
	 */
	function parents(elem) {
		var elems = [];
		do {
			elem = parent(elem);
			if(elem && elem.nodeType !== 9) {
				elems.push(elem);
			}
		} while(elem);
		return elems;
	}

	/**
	 * 获取当前对象的首个子节点
	 * @param {String} selector 匹配条件(当前对象内包含多个Element元素时可设置条件过滤)
	 * @param {Number} [nodeType=1] 节点类型
	 * @return {fastDev.Core.DomObject}
	 */
	function first(elem, nodeType) {
		elem = elem.firstChild;
		return filterByNodeType(elem, nodeType, "next");
	}

	/**
	 * 获取当前对象的最后一个子节点
	 * @param {String} selector 匹配条件(当前对象内包含多个Element元素时可设置条件过滤)
	 * @param {Number} [nodeType=1] 节点类型
	 * @return {fastDev.Core.DomObject}
	 */
	function last(elem, nodeType) {
		elem = elem.lastChild;
		return filterByNodeType(elem, nodeType, "prev");
	}

	/**
	 * 获取当前对象的下一个兄弟节点
	 * @param {String} selector 匹配条件(当前对象内包含多个Element元素时可设置条件过滤)
	 * @param {Number} [nodeType=1] 节点类型
	 * @return {fastDev.Core.DomObject}
	 */
	function next(elem, nodeType) {
		elem = elem.nextSibling || undefined;
		return filterByNodeType(elem, nodeType, "next");
	}

	/**
	 * 获取当前对象的上一个兄弟节点
	 * @param {String} selector 匹配条件(当前对象内包含多个Element元素时可设置条件过滤)
	 * @param {Number} [nodeType=1] 节点类型
	 * @return {fastDev.Core.DomObject}
	 */
	function prev(elem, nodeType) {
		elem = elem.previousSibling;
		return filterByNodeType(elem, nodeType, "prev");
	}

	/**
	 * 设置当前对象文本
	 * @param {String} text 文本
	 * @return {fastDev.Core.DomObject}
	 */
	function setText(elem, val) {
		text(elem, val === undefined ? "" : val);
	}

	/**
	 * 获取当前对象文本
	 * @return {String}
	 */
	function getText(elem) {
		return text(elem);
	}

	/**
	 * 为当前对象内所有Element元素增加文本
	 * @param {String} text 文本值
	 * @return {fastDev.Core.DomObject}
	 */
	function addText(elem, val) {
		var textNode, childList = children(elem, 3), index = childList.length - 1;

		val = $.isValid(val) ? val : "";

		if(index !== -1) {
			textNode = childList[index];
			textNode.nodeValue += val;
		} else {
			textNode = $.createByHTML(val);
			append(elem, textNode);
		}
	}

	/**
	 * 将目标元素添加至当前对象中
	 * @param {Element/fastDev.Core.DomObject} target 目标元素
	 * @return {fastDev.Core.DomObject}
	 */
	function append(elem, target) {
		if(elem && target && elem.appendChild && target.nodeType) {
			elem.appendChild(target);
			return;
		}

		if(target.elems && target.elems.length) {
			return append(elem, target.elems);
		}

		if($.isArray(target) && $.each(target, function(i, item) {
			append(elem, item);
		})) {
		}
	}

	/**
	 * 将当前对象所有Element元素从页面移除
	 * @return {fastDev.Core.DomObject}
	 */
	function remove(elem) {
		removeChild(elem);
	}

	/**
	 * 将当前对象添加至目标元素之后
	 * @param {Element/fastDev.Core.DomObject} target 目标元素
	 * @return {fastDev.Core.DomObject}
	 */
	function insertAfter(elem, target, parentnode) {
		if( parentnode = target && ($.isDomObject(target) && target.hasElem() && parent( target = target.elems[0]) || target.nodeType && parent(target))) {
			if(last(parentnode) === target) {
				append(parentnode, elem);
			} else {
				target = next(target);
				insertBefore(elem, target);
			}
		}
	}

	/**
	 * 将当前对象添加至目标元素之前
	 * @param {Element/fastDev.Core.DomObject} target 目标元素
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function insertBefore(elem, target, parentnode) {
		if( parentnode = target && ($.isDomObject(target) && target.hasElem() && parent( target = target.elems[0]) || target.nodeType && parent(target))) {
			parentnode.insertBefore(elem, target);
		}
	}

	/**
	 * 用当前对象替换目标元素
	 * @param {Element/fastDev.Core.DomObjec} target 目标元素
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function replace(elem, target, parentnode) {
		if( parentnode = target && ($.isDomObject(target) && target.hasElem() && parent( target = target.elems[0]) || target.nodeType && parent(target))) {
			parentnode.replaceChild(elem, target);
		}
	}

	/**
	 * 激活当前对象内所有元素上指定类型的事件
	 * @param {String} type 事件类型
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function fire(elem, type) {
		if(elem[type]) {
			elem[type]();
		}
	}

	/**
	 * 为当前对象内所有元素绑定事件
	 * @param {String} type 事件类型
	 * @param {Function} handle 事件句柄
	 * @param {Object} [context] 事件作用域
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function bind(elem, type, handle, context) {
		if($.isValid(context)) {
			handle = $.setFnInScope(context, handle);
		}
		$.Core.EventManager.bindEvent(elem, type, handle);
	}

	/**
	 * 删除当前对象内所有元素所绑定的事件
	 * @param {String} type 事件类型
	 * @param {Function} handle 事件句柄
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function unbind(elem, type, handle) {
		$.Core.EventManager.unbind(elem, type, handle);
	}


	/**
	 * 往当前对象中增加Element元素
	 * @param {Element/fastDev.Core.DomObject} target
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function addElement(target) {
		if(target && target.nodeType) {
			this.elems.push(target);
			return this;
		}

		while($.isArray(target)) {
			this.addElement(target.shift());
		}
		return this;
	}

	/**
	 * 获取当前对象首个元素样式名称
	 * @return {String}
	 */
	function getClass() {
		return prop(this.elems[0], "class");
	}

	function html(htmlStr) {
		if($.isValid(htmlStr)) {
			each.call(this, function(i, elem) {
				elem.innerHTML = htmlStr;
			});
			return this;
		} else {
			return this.elems[0] && this.elems[0].innerHTML || "";
		}
	}

	/**
	 * 将当前对象添加至至目标元素下
	 * @param {Element/fastDev.Core.DomObject} target
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function appendTo(target) {
		if(target.append) {
			target.append(this);
		} else if(target.nodeType) {
			fastDev(target).append(this);
		}
		return this;
	}

	/**
	 * 在当前对象中查找符合条件的元素
	 * @param {String} selector 查询条件
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function find(selector) {
		var elem, i = 0, ret = [], push = ret.push;
		for(; elem = this.elems[i++]; ) {
			push.apply(ret, FIND(elem, selector));
		}
		return $(ret);
	}

	/**
	 * 判断当前对象是否包含目标元素
	 * @param {Element/fastDev.Core.DomObject} target 目标元素
	 * @return {Boolean}
	 */
	function contains(target) {
		var elem, i = 0, elems;
		if(target && target.nodeType) {
			for(; elem = this.elems[i++]; ) {
				if(CONTAINS(elem, target)) {
					return true;
				}
			}
			return false;
		}

		if($.isDomObject(target)) {
			for( i = 0, elems = target.elems; elem = elems[i++]; ) {
				if(contains.call(this, elem) === false) {
					return false;
				}
			}
			return true;
		}
	}

	/**
	 * 克隆当前对象
	 * @param {Boolean} [deep=true] 是否克隆其子元素
	 * @return {fastDev.Core.DomObject}
	 */
	function clone(deep) {
		var elem, i = 0, ret = [];
		for(; elem = this.elems[i++]; ) {
			ret.push( CLONE(elem, deep) );
		}
		return $(ret);
	}

	/**
	 * 使用自定义函数遍历当前对象的Element元素
	 * @param {Function} handle 遍历执行方法
	 * @param {Object} arguments 遍历执行方法参数
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function each() {
		var elem, i = 0, 
			elems = this.elems, 
			params = $.convertArray(arguments), 
			handle = params[0];
			
		params.splice(1, 0, null);
		
		for(; elem = elems[i]; i++) {
			params[0] = i;
			params[1] = elem;
			if(handle.apply(elem, params) === false){
				break;
			}
		}
		return this;
	}

	/**
	 * 判断当前对象是否包含Element元素
	 * @return {Boolean}
	 */
	function hasElem() {
		return this.elems.length > 0;
	}

	/**
	 * 判断当前对象是否包含Element元素(已作废，推荐使用hasElem)
	 * @return {Boolean}
	 */
	function isEmpty() {
		return !this.elems.length;
	}

	/**
	 * 元素动画调用
	 * @param {JsonObject} props 动画终止样式值
	 * @param {Number} speed 动画执行时间(毫秒)
	 * @param {String} easing 动画执行算法
	 * @param {Function} callback 动画执行完成回调
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function animate(props, speed, easing, callback) {
		// 如果动画效果被关闭则取消后续动画构建代码执行
		if(!fastDev.Animate.isActive()){
			speed = 0;
		}
		
		if(!this.animationList) {
			this.animationList = [];
		}

		if(!this.activateAnimateion) {
			this.activateAnimateion = fastDev.Animate.animationFactory(this.elems, props, speed, easing, fastDev.setFnInScope(this, animateComplete));
			this.activateAnimateion.handle = callback;
		} else {
			if(!this.waitList) {
				this.waitList = [];
			}

			this.waitList.push({
				"props" : props,
				"speed" : speed,
				"easing" : easing,
				"callback" : callback
			});
		}
		this.animationList.push(this.activateAnimateion);
		return this;
	}

	/**
	 * 动画完成回调函数
	 * @private
	 */
	function animateComplete() {
		var nextAnimation, callback = this.activateAnimateion.handle;

		if(fastDev.isFunction(callback)) {
			callback();
		}
		this.activateAnimateion = null;

		if( nextAnimation = this.waitList.shift()) {
			this.animate(nextAnimation.props, nextAnimation.speed, nextAnimation.easing, nextAnimation.callback);
		}
	}

	/**
	 * 停止动画
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function pauseAnimate() {
		if(this.activateAnimateion) {
			this.activateAnimateion.pauseTime = (+new Date()) - this.activateAnimateion.startTime;
			this.activateAnimateion.status = "pause";
		}
		return this;
	}

	/**
	 * 恢复被停止的动画
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function resumeAnimate() {
		if(this.activateAnimateion && this.activateAnimateion.status === "pause") {
			this.activateAnimateion.startTime = (+new Date()) - this.activateAnimateion.pauseTime;
			this.activateAnimateion.status = "runing";
		}
		return this;
	}

	/**
	 * 终止动画执行，被终止的动画不可恢复不可回退不触发回调)
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function terminateAnimate() {
		if(this.activateAnimateion) {
			this.activateAnimateion.status = "terminate";
		}
	}

	/**
	 * 回退到上一次动画执行状态
	 * @return {fastDev.Core.DomObject} domObj
	 */
	function undoAnimate() {
		if(this.activateAnimateion || !this.animationList.length) {
			return;
		}

		var lastAnimateion = this.animationList.pop(), newAnimateion = fastDev.Animate.reverseAnimation(lastAnimateion);
		this.animationList.splice(0, 0, lastAnimateion);
		fastDev.Animate.addAnimation(this.activateAnimateion = newAnimateion);
	}
	
	domImpl = {
		"attr" : attr,
		"addClass" : addClass,
		"addText" : addText,
		"append" : append,
		"bind" : bind,
		"css" : css,
		"contains" : contains,
		"clone" : clone,
		"children" : children,
		"empty" : empty,
		"fire" : fire,
		"find" : find,
		"first" : first,
		"getText" : text,
		"hide" : hide,
		"height" : height,
		"hasAttr" : hasAttr,
		"hasProp" : hasProp,
		"hasClass" : hasClass,
		"isShow" : isShow,
		"insertAfter" : insertAfter,
		"insertBefore" : insertBefore,
		"innerWidth" : innerWidth,
		"innerHeight" : innerHeight,
		"last" : last,
		"next" : next,
		"offset" : offset,
		"outerWidth" : outerWidth,
		"outerHeight" : outerHeight,
		"prop" : prop,
		"prev" : prev,
		"parent" : parent,
		"parents" : parents,
		"position" : position,
		"remove" : remove,
		"replace" : replace,
		"removeCss" : removeCss,
		"removeProp" : removeProp,
		"removeAttr" : removeAttr,
		"removeClass" : removeClass,
		"show" : show,
		"setText" : text,
		"setWidth" : setWidth,
		"setHeight" : setHeight,
		"scrollLeft" : scrollLeft,
		"scrollTop" : scrollTop,
		"setClass" : setClass,
		"text" : text,
		"toggle" : toggle,
		"toggleClass" : toggleClass,
		"unbind" : unbind,
		"width" : width,
		"addElement" : addElement,
		"getClass" : getClass,
		"appendTo" : appendTo,
		"html" : html,
		"each" : each,
		"hasElem" : hasElem,
		"isEmpty" : isEmpty,
		"animate" : animate,
		"pauseAnimate" : pauseAnimate,
		"resumeAnimate" : resumeAnimate,
		"terminateAnimate" : terminateAnimate,
		"undoAnimate" : undoAnimate
	};

	function getMultitaskMethod(fn) {
		return function() {
			var param = $.convertArray(arguments), ret = null;
			param.splice(0, 0, null);
			for(var i = 0, elem; elem = this.elems[i++]; ) {
				param[0] = elem;
				if( ret = fn.apply(this, param)) {
					break;
				}
			}
			return ret !== undefined ? ret : this;
		};
	}

	function getSizzleMethod(fn) {
		return function() {
			var elems, selector,
				ret = [],
				param = $.convertArray(arguments);
			
			param.splice(0, $.isString(param[0]) && (selector = param[0]) ? 1 : 0, null);
			
			for(var i = 0, elem; elem = this.elems[i++]; ) {
				param[0] = elem;
				elems = fn.apply(this, param);
				ret = elems && ($.isArray(elems) ? ret.concat(elems) : ret.push(elems) && ret);
				// ret = $.isArray(elems) && ret.concat(elems) || elems && ret.push(elems) && ret;
			}
			return $(selector && $.Sizzle.matches(selector, ret) || ret);
		};
	}

	function getSingletaskMethod(fn) {
		return function() {
			var param = $.convertArray(arguments), ret = null;
			if(this.hasElem()) {
				param.splice(0, 0, this.elems[0]);
				ret = fn.apply(this, param);
			}
			return ret === undefined && this || ret;
		};
	}
		
	var 
		methodName, 
		i = 0, 
		sizzle = ["children", "parent", "parents", "first", "last", "next", "prev"], 
		singletask = ["append", "insertAfter", "insertBefore", "replace", "position", "isShow", "hasClass"],
		multitask = ["bind", "unbind", "prop", "removeProp", "attr", "removeAttr", "setClass", 
			"addClass", "toggleClass", "removeClass", "css", "removeCss", "hide", "show", 
			"toggle", "offset", "width", "innerWidth", "outerWidth", "height", "innerHeight", 
			"outerHeight", "scrollLeft", "scrollTop", "empty", "setText", "getText", "addText", 
			"text", "remove", "fire"];



	for(; methodName = multitask[i++]; ) {
		domImpl[methodName] = getMultitaskMethod(domImpl[methodName]);
	}

	for( i = 0; methodName = sizzle[i++]; ) {
		domImpl[methodName] = getSizzleMethod(domImpl[methodName]);
	}

	for( i = 0; methodName = singletask[i++]; ) {
		domImpl[methodName] = getSingletaskMethod(domImpl[methodName]);
	}
	
	$.Core.DomObject.prototype.prototype = domImpl;

})(window);

/**
 * @class fastDev.Core.Template
 * @extends fastDev.Core.Base
 * @author  袁刚
 * 控件展现模板实现，负责解析控件内定义的界面规则并生成DomObject对象
 */
fastDev.define("fastDev.Core.Template", {
	"alias" : "Template",
	"prototype" : function(setting) {
		// 模板内容
		this.content = setting.content || setting.htmlList;
		// 模板参数
		this.params = setting.params;
		// 模板所属控件
		this.control = setting.name || "自定义模板";
		// 动态模板存储对象
		this.dynamicMap = {};
		// 模板关键字捕捉正则
		this.capturekey = /(?:<tpl\s(dynamic|each|if|else\sif|else)\s*([^>]*)\>)|(?:<\/tpl>)/g;
		// 参数占位符捕捉正则
		this.captureParam = /#\{([^\}]*)\}/g;
		// 数据占位符捕捉正则
		this.captureData = /\{([^\}]*)\}/g;
		// 小于号占位符捕捉正则
		this.captureLTSign = /&lt;/g;
		// 大于号占位符捕捉正则
		this.captureGTSign = /&gt;/g;
		// 动态模板名称捕捉正则
		this.captureDynamicName = /name\s*=\s*(.*)/;
		// 避免嵌套渲染中变量重名
		this.loopLevel = 0;
		// 模板内容有效性校验
		if(fastDev.isArray(this.content)) {
			this.content = this.content.join("");
		} else if(!fastDev.isString(this.content)) {
			fastDev.addError("Template", "construct", "传入的模板内容不合法");
		}
		// 去除可能导致模板编译出错的格式字符
		this.content = this.content.replace(/[\r\t\n]/g, "");
		// 编译模板内容，生成静态模板函数以及动态模板函数
		var fnContent = this.compile(this.content);
		try {
			// 编译静态模板生成函数
			this.staticTemplate = fastDev.Util.ObjectUtil.parseObject("params", fnContent);
		} catch(e) {
			fastDev.addError("Template", "construct", this.control + " 解析静态模板异常：" + e.message);
		}
	},
	/**
	 * 模板内容编译 
	 * @param {String} 模板内容
	 * @param {Number} index 解析起始下标 
	 * @param {Boolean} isDynamic 当前是否在编译动态模板
	 * @private
	 */
	"compile" : function(content, index, isDynamic) {
		var begin, end, key, match, parseInfo,
		// 代码层次
		level = 0,
		// 模板内容长度
		len = content.length,
		// 函数内容
		fnContent = ['var html=[];\n'];

		// 正则匹配开始标志
		index = index || 0;

		for(; index < len; index = end) {
			// 设置正则匹配的起始下标
			this.capturekey.lastIndex = index;
			match = this.capturekey.exec(content);

			// 匹配不到任何模板关键字时，将所有模板内容当HTML代码添加至函数中
			if(match === null) {
				this.pushHtml(fnContent, content.substring(index, len));
				break;
			}
			// 记录当前匹配的起始与结束下标
			begin = match.index;
			end = this.capturekey.lastIndex;
			
			// 当当前这次匹配与上次匹配之间的非模板关键字字符当HTML代码添加至函数中
			if(index < begin) {
				this.pushHtml(fnContent, content.substring(index, begin));
			}

			if( key = match[1]) {
				parseInfo = this.parseKey(fnContent, match[2], key, content, end ,level);
				level = parseInfo[0];
				end = parseInfo[1];
			} else if(match[3]) {
				
			} else if(match[0] === "</tpl>") {
				if(level === 0) {
					break;
				}
				fnContent.push(" } \n");
				level--;
			}
		}
		fnContent.push("return html.join('');");
		
		if( isDynamic === true ){
			return [end, fnContent.join("")];
		}
		
		return fnContent.join("");
	},
	/**
	 * 将HTML代码加入模板函数内容中 
	 * @param {Array} fnContent 模板函数内容数组
	 * @param {String} html HTML代码
	 * @private
	 */
	"pushHtml" : function(fnContent, html) {
		var params = this.params;
		fnContent.push("html.push('" + html.replace(this.captureParam, function(all, match){
			if(params && params[match] === undefined){
				params[match] = "";
			}
			return "' + params[\""+ match +"\"] + '";
		}).replace(this.captureData, "' + item[\"$1\"] + '")  + "'); \n");
	},
	/**
	 * 解析模板关键字 
	 * @param {Array} fnContent 模板函数内容数组
	 * @param {String} content 解析关键字附加内容
	 * @param {String} key 模板关键字
	 * @param {String} template 完整模板字符串
	 * @param {Number} end 当前关键字下辖内容起始下标
	 * @param {Number} level 当前解析层级
	 * @private
	 */
	"parseKey" : function(fnContent, content, key, template, end, level) {
		switch(key) {
			case "if" :
				this.parseIf(fnContent, content);
				level++;
				break;
			case "else" :
				this.parseElse(fnContent);
				break;
			case "else if" :
				this.parseElseIf(fnContent, content);
				break;
			case "each" :
				this.parseEach(fnContent, content);
				level++;
				break;
			case "dynamic" :
				end = this.parseDynamic(template, content, end);
				break;
		}
		return [level, end];
	},
	/**
	 * 解析 if 关键字 
	 * @param {Array} fnContent 模板函数内容数组
	 * @param {String} cond if关键字内的条件
	 * @private
	 */
	"parseIf" : function(fnContent, cond) {
		cond = cond.replace(this.captureLTSign, "<").replace(this.captureGTSign, ">").replace(this.captureParam, "params.$1").replace(this.captureData, "item.$1");
		fnContent.push("if" + cond + "{\n");
	},
	/**
	 * 解析 else 关键字 
	 * @param {Array} fnContent 模板函数内容数组
	 * @private
	 */
	"parseElse" : function(fnContent) {
		fnContent.push("} else {");
	},
	/**
	 *  解析 else if 关键字 
	 * @param {Array} fnContent 模板函数内容数组
	 * @param {String} cond if关键字内的条件
	 * @private
	 */
	"parseElseIf" : function(fnContent, cond) {
		this.parseIf(fnContent, cond);
		fnContent.push("} else " + fnContent.pop());
	},
	/**
	 * 解析 each 关键字 
	 * @param {Array} fnContent 模板函数内容数组
	 * @private
	 */
	"parseEach" : function(fnContent){
		var i = "i" + this.loopLevel++;
		fnContent.push("for( var " + i + " = 0, item, dateSeq, rowid ; item = data[" +i+"]; " + i + "++ ){ \n");
		fnContent.push("rowid =  ( params.rowid || 0 ) + "+ i + " + 1;\n");
	},
	/**
	 * 解析 dynamic 关键字 
	 * @param {String} template 完整模板字符串
	 * @param {String} content 动态模板其他信息
	 * @param {Number} index 动态模板开始下标
	 * @private
	 */
	"parseDynamic" : function(template, content, index){
		var name, match, fnContent, dynamicInfo;
		
		match = this.captureDynamicName.exec(content);
		name = match ? match[1] : "d_" + fastDev.getID();
		// 编译动态模板
		dynamicInfo = this.compile(template, index, true);
		// 获取动态模板内容
		fnContent = dynamicInfo[1];
		try {
			// 生成动态模板函数并保存
			this.dynamicMap[name] = fastDev.Util.ObjectUtil.parseObject("params","data", fnContent);
		} catch(e) {
			fastDev.addError("Template", "construct", this.control + " 解析动态模板异常：" + e.message);
		}
		// 返回动态模板结束下标
		return dynamicInfo[0];
	},
	/**
	 * 生成静态模板内容 
	 * @param {JsonObject} params 静态模板所使用到的参数组合
	 */
	"buildStaticTemplate" : function(params){
		return fastDev(this.staticTemplate(params));
	},
	"createStaticHtml" : function(){
		return this.buildStaticTemplate(this.params);
	},
	/**
	 * 生成动态模板内容 
	 * @param {String} name 动态模板名称
	 * @param {JsonObject} params 动态模板所使用到的参数组合
	 * @param {Array} data 动态模板中所使用到的数据数组
	 */
	"buildDynamicTemplate" : function(name, params, data, context){
		var dynamic = this.getDynamic(name);
		return context.fastDev(dynamic(params, data));
	},
	/**
	 * 根据动态模板名称获取动态模板 
	 * @param {String} name 动态模板名称
	 */
	"getDynamic" : function(name){
		if(fastDev.isValid(name) && name.length){
			return this.dynamicMap[name];
		}
		
		for(name in this.dynamicMap){
			return this.dynamicMap[name];
		}
	}
});

fastDev.Core.Template.prototype.prototype = fastDev.Core.Template;

fastDev.Core.Template.constructor = function(content) {
	return new this.prototype(content);
};
/**
 * @class fastDev.Core.Ajax
 * @singleton
 * 异步请求组件Ajax封装实现类 
 */

/**
 * @cfg {String} url
 * 请求地址 
 */

/**
 * @cfg {String} [method="get"] 
 * 请求类型
 */

/**
 * @cfg {JsonObject} data
 * 请求附加数据 
 */

/**
 * @cfg {Boolean} [async=true]
 * 是否异步请求 
 */

/**
 * @cfg {Number} [timeout=30000] 
 * 请求超时时间
 */

/**
 * @cfg {Boolean} [cache=false]
 * 是否使用浏览器缓存数据 
 */

/**
 * @cfg {Boolean} [encode=false] 
 * 是否对传入的附加数据编码
 */

/**
 * @cfg {Boolean} [json=false]
 * 是否使用json格式传递数据(如启用，后台接受key为data) 
 */

/**
 * @cfg {fastDev.Queue} queue
 * 当前请求所属队列
 */

/**
 * @event success
 * 请求成功时回调事件
 * @param {JsonObject} data 返回的请求结果
 */

/**
 * @event error
 * 请求成功时回调事件
 * @param {JsonObject} data 请求失败错误信息
 */

/**
 * @event complete
 * 请求完成时回调事件
 * @param {JsonObject} data 成功时返回请求结果，失败时返回错误信息
 */

/**
 * @method get
 * Ajax异步请求get请求实现
 * @param {String} url 后台服务地址
 * @param {JsonObject} setting Ajax配置，参见{@link fastDev.Core.Ajax}
 * @return {fastDev.Data.Proxy}
 * @member fastDev
 */

/**
 * @method post
 * Ajax异步请求post请求实现
 * @param {String} url 后台服务地址
 * @param {JsonObject} setting Ajax配置，参见{@link fastDev.Core.Ajax}
 * @return {fastDev.Data.Proxy}
 * @member fastDev
 */

/**
 * @method ajax
 * Ajax异步请求实现
 * @param {String} url 后台服务地址
 * @param {JsonObject} setting Ajax配置，参见{@link fastDev.Core.Ajax}
 * @return {fastDev.Data.Proxy}
 * @member fastDev
 */

(function($){
	function parseArgs(args){
		return args.length === 1 ? ( $.isString(args[0]) ? {"url" : args[0]} : args[0] ) :
			(args[1].url = args[0]) && args[1]; 
	}
	
	function createProxy(setting){
		setting.onAfterLoad = setting.complete;
		setting.onError = setting.error;
		
		return fastDev.create("Proxy", setting)[setting.type === "post" ? "save" : "load"](
			setting.data, 
			setting.success, 
			setting.encode || true, 
			setting.json || false
		);
	}
	
	/**
	 * @method ajax
	 * Ajax异步请求实现
	 * @param {String} url 后台服务地址
	 * @param {JsonObject} setting Ajax配置，参见{@link fastDev.Core.Ajax}
	 * @return {fastDev.Data.Proxy}
	 */
	function ajax(){
		return createProxy(parseArgs(arguments));
	}
	
	/**
	 * @method get
	 * Ajax异步请求get请求实现
	 * @param {String} url 后台服务地址
	 * @param {JsonObject} setting Ajax配置
	 * @return {fastDev.Data.Proxy}
	 */
	function get(url, setting){
		setting = parseArgs(arguments);
		setting.type = "get";
		return createProxy(setting);
	}
	
	/**
	 * @method post
	 * Ajax异步请求post请求实现
	 * @param {String} url 后台服务地址
	 * @param {JsonObject} setting Ajax配置
	 * @return {fastDev.Data.Proxy}
	 */
	function post(url, setting){
		setting = parseArgs(arguments);
		setting.type = "post";
		return createProxy(setting);
	}
	
	$.Core.Ajax = {
		"get" : get,
		"post" : post,
		"ajax" : ajax
	};
	
	$.apply($.Core.Ajax);
})(fastDev);
/**
 * 所有组件的父类，内部做了组件的通用属性定义以及通用方法实现
 * @class fastDev.Ui.Component
 * @extends fastDev.Core.Base
 * @singleton
 */
fastDev.define("fastDev.Ui.Component", {
	extend : "fastDev.Core.Base",
	_options : {
		/**
		 * @cfg {String} id
		 * 控件id
		 */
		"id" : "",
		/**
		 * @cfg {String} name
		 * 控件name
		 * @private
		 */
		"name" : "",
		/**
		 * @cfg {Boolean} [display=true]
		 * 是否显示控件
		 */
		"display" : true,
		/**
		 * @cfg {String} width
		 * 控件宽度配置
		 */
		"width" : "",
		/**
		 * @cfg {String} height
		 * 控件高度配置
		 */
		"height" : "",
		/**
		 * @cfg {String} left
		 * 组件X坐标值
		 * @private
		 */
		"left" : "",
		/**
		 * @cfg {String} top
		 * 组件Y坐标值
		 * @private
		 */
		"top" : "",
		/**
		 * @cfg {String} cls
		 * 控件样式类名,默认最上层的容器classname
		 * @private
		 */
		"cls" : "",
		/**
		 * @cfg {JsonObject} style
		 * 控件样式属性,默认最上层的容器style
		 * @private
		 */
		"style" : null,
		/**
		 * @cfg {Boolean} [autoFit=false]
		 * 宽高是否自适应容器
		 * @private
		 */
		"autoFit" : false,
		/**
		 * @cfg {String} initSource
		 * 初始数据源地址，此属性一般用来设置控件的初始值
		 */
		"initSource" : "",
		/**
		 * @cfg {String} dataSource
		 * 值来源数据源地址，此属性一般用来设置控件的当前值
		 */
		"dataSource" : "",
		/**
		 * @cfg {String|JsonObject} value
		 * 控件的值
		 */
		"value" : "",
		/**
		 * @cfg {String|fastDev.Core.DomObject}
		 * 指定控件所属容器
		 */
		"container" : "",
		/**
		 * @cfg {Boolean} [saveInstance=false]
		 * 是否保存控件实例
		 */
		"saveInstance" : false,
		/**
		 * @cfg {Boolean} [saveQueue=false]
		 * 是否保存队列实例
		 */
		"saveQueue" : false,
		/**
		 * @cfg {String|fastDev.Queue} queue
		 * 当前控件所使用的队列
		 */
		"queue" : "",
		/**
		 * @cfg {JsonObject} mapper
		 * 数据映射配置，指定后台Json数据与前台控件需要数据格式的映射
		 * 数据集相关配置之一
		 */
		"mapper" : null,
		/**
		 * @cfg {Boolean} [backup=false]
		 * 设定数据集是否默认备份数据
		 * 数据集相关配置之一
		 * @private
		 */
		"backup" : false,
		/**
		 * @cfg {String} [structure="normal"]
		 * 数据结构类型,数据集相关配置之一
		 * @private
		 */
		"structure" : "normal",
		/**
		 * @cfg {Array[JsonObject]} items
		 * 组件静态数据
		 */
		"items" : null,
		/**
		 * @cfg {Boolean} [autoLoad=tru]
		 * 数据自动加载
		 * @private
		 */
		"autoLoad" : true,
		/**
		 * @cfg {Boolean} [enableDataSet=true]
		 * 是否启用数据集
		 * @protected
		 */
		"enableDataSet" : true,
		/**
		 * @cfg {Boolean} [enableInitProxy=true]
		 * 是否启用数据代理(用于辅助加载initSource)
		 * @protected
		 */
		"enableInitProxy" : true,
		/**
		 * @cfg {Boolean} [enableDataProxy=true]
		 * 是否启用数据代理(用于辅助加载dataSource)
		 * @protected
		 */
		"enableDataProxy" : true,
		/**
		 * @cfg {String} [defineMode="js"]
		 * 定义模式
		 * @private
		 */
		"defineMode" : "js",
		/**
		 * @cfg {Boolean} [autoRenderer=true]
		 * 自动渲染
		 * @private
		 */
		"autoRenderer" : true,
		/**
		 * @event onAfterLoadInit
		 * InitSource数据返回后回调触发
		 */
		"onAfterLoadInit" : fastDev.noop,
		/**
		 * @event onAfterLoadData
		 * DataSource数据返回后回调触发
		 */
		"onAfterLoadData" : fastDev.noop,
		/**
		 * @event onAfterInitRender
		 * InitSource数据被控件处理完成后触发
		 */
		"onAfterInitRender" : fastDev.noop,
		/**
		 * @event onAfterDataRender
		 * DataSource数据被控件处理完成后触发
		 */
		"onAfterDataRender" : fastDev.noop
	},
	/**
	 * 实现控件配置初始化与修正
	 * @param {JsonObject} options 当前控件配置信息
	 * @param {JsonObject} global 当前控件全局信息
	 * @protected
	 */
	"ready" : function(options, global) {
		// 初始化容器
		var cwidth, cheight, container = options.container;
		
		if(fastDev.isString(container) && container.length > 0) {
			container = fastDev("#" + container);
		} else {
			container = fastDev(container);
		}
		
		options.container = container;
		this.elems = [];
		// 获取容器宽度值
		cwidth = options.container.width();
		cheight = options.container.height();
		// 配置中宽度值有效，单位为px时，获取宽度值中的数值作为宽度值
		// 配置中宽度值有效，单位为em时，获取em值 * 16作为宽度值
		// 配置中宽度值有效，单位为%时，获取按容器宽度百分比计算出的值作为宽度值
		// 配置中宽度值无效，获取容器的宽度作为宽度值
		global.width = parseInt(fastDev.Util.StringUtil.stripUnits(options.width || cwidth, cwidth), 10);
		global.height = parseInt(fastDev.Util.StringUtil.stripUnits(options.height || cheight, cheight), 10);
		options.id = options.id || fastDev.getID();
	},
	/**
	 * 实现控件静态界面部分构造
	 * @param {JsonObject} options 当前控件配置信息
	 * @param {JsonObject} global 当前控件全局信息
	 * @protected
	 */
	"construct" : function(options, global) {
		
		var queue, params = {},
			tplParam = this.tplParam, 
			// 是否启用数据集
			enableInitProxy = options.enableInitProxy,
			// 是否启用数据代理
			enableDataProxy = options.enableDataProxy,
			// 是否启用数据集
			enableDataSet = options.enableDataSet,
			// 静态数据
			items = options.items,
			// 静态值
			value = options.value,
			// 组件初始化数据地址
			initSource = options.initSource,
			// 组件当前值数据地址
			dataSource = options.dataSource,
			// 组件初始化数据数据模型
			fields = this.fields;

		if(enableDataSet === true) {
			this.dataset = fastDev.create("DataSet", {
				"fields" : fields,
				"data" : items,
				"mapper" : options.mapper,
				"structure" : options.structure,
				"backup" : options.backup,
				"renderer" : fastDev.setFnInScope(this, this.onAfterLoadInit)
			});
		}

		if(enableInitProxy === true || enableDataProxy === true) {

			if(options.queue) {
				global.queue = fastDev.isString(options.queue) ? fastDev.getQueue(options.queue) : options.queue;
			}
			// initSource与DataSource共用一个队列，保证initSource先加载
			queue = global.queue = global.queue ? global.queue : fastDev.Queue.getInstance();
			
			// 保存控件所在队列
			if(options.saveQueue === true) {
				fastDev.saveQueue(options.id, global.queue);
			}

			// 检测是否启用数据集
			if(enableInitProxy === true) {
				this.initProxy = fastDev.create("Proxy", {
					"url" : initSource,
					"queue" : queue,
					"method" : "post",
					"dataset" : this.dataset
				});
			}
			// 检测是否启用数据代理
			if(enableDataProxy === true) {
				this.dataProxy = fastDev.create("Proxy", {
					"url" : dataSource,
					"queue" : queue,
					"data" : value,
					"onAfterLoad" : fastDev.setFnInScope(this, this.onAfterLoadData)
				});
			}
		}
		// 初始化模板
		// 初始化模板所需参数
		if(tplParam) {
			for(var i = 0, name; name = tplParam[i]; i++) {
				value = options[name];
				params[name] = value === undefined ? global[name] : value;
			}
		}

		global.params = params;

		// 使用模板函数
		if(this.staticTemplate) {
			this._renderStaticHtml(params);
			return;
			// 使用模板字符串
		} 
		
		if(fastDev.isArray(this.template)) {
			this.template = this.constructor.prototype.template = fastDev.create("Template", {
				"content" : this.template,
				"name" : this.alias
			});
		}
		
		if(this.template && this.template.alias === "Template"){
			// 渲染组件静态展现部分至页面
			this.renderStaticHtml();
		}
	},
	/**
	 * 实现控件各事件代理的初始化与绑定
	 * @param {JsonObject} options 当前控件配置信息
	 * @param {JsonObject} global 当前控件全局信息
	 * @protected
	 */
	"init" : function(options, global) {
		// 加载系统任务至对应的代理中，并删除临时配置
		var 
			initProxy = this.initProxy, 
			dataProxy = this.dataProxy;

		// 保存控件示例
		if(options.saveInstance === true) {
			fastDev.saveInstance(options.id, this);
		}

		if(!initProxy || !initProxy.load()) {
			this.onAfterLoadInit();
		}

		if(!dataProxy || !dataProxy.load()) {
			if(global.queue) {
				global.queue.add({
					"type" : "normal",
					"handle" : fastDev.setFnInScope(this, this.onAfterLoadData)
				});
			} else {
				this.onAfterLoadData(options.value);
			}
		}
	},
	/**
	 * 实现控件动态界面部分的构造与初始化
	 * @param {JsonObject} options 当前控件配置信息
	 * @param {JsonObject} global 当前控件全局信息
	 * @protected
	 */
	"constructItems" : fastDev.noop,
	/**
	 * 将Dom元素合并至当前Dom元素集
	 * @param {Element} elem Dom元素
	 * @private
	 */
	"merge" : function(elem) {
		if(!elem) {
			return this;
		}
		if(elem.nodeType) {
			this.elems.push(elem);
		} else if(fastDev.isArray(elem)) {
			this.elems = this.elems.concat(elem);
		} else if(elem.elems) {
			this.merge(elem.elems);
		}
		return this;
	},
	/**
	 * 渲染到指定目标
	 * @param {fastDev.Core.DomObject} container 指定容器目标
	 * @return {fastDev.Core.DomObject}
	 */
	"renderTo" : function(container) {
		return container.append(this.elems);
	},
	/**
	 * 传入指定数据更新数据集
	 * @param {JsonObject} config 更新参数
	 * @param {Array} config.data 更新使用到的数据
	 * @param {Boolean} [config.backup=false] 是否备份当前传入数据
	 * @param {Boolean} [config.renderer=false] 是否使用更新后的数据渲染界面
	 * @param {Boolean} [config.overwrite=true] 是否覆盖已有数据
	 */
	"refreshDataSet" : function(config) {
		if(config.overwrite !== false) {
			this.dataset.reset();
		}

		this.dataset.fill(config.data, config.backup, true, config.renderer);
	},
	/**
	 * initSource数据源刷新，如果传入url参数值，则用url参数值替代配置的initSource值进行刷新
	 * @param {JsonObject/String} [config] 刷新参数({@link fastDev.Data.Proxy})/刷新地址 
	 */
	"initRefresh" : function(config) {
		this.initProxy.setOptions(config);
		this.initProxy.load();
	},
	/**
	 * dataSource数据源刷新，如果传入href参数值，则用href参数值替代配置的dataSource值进行刷新
	 * @param {JsonObject/String} [config] 刷新参数/刷新地址
	 */
	"dataRefresh" : function(config) {
		if(fastDev.isValid(config) && fastDev.isPlainObject(config)) {
			this.dataProxy.setOptions(config);
		}
		this.dataProxy.load();
	},
	/**
	 * 设置控件ID属性值
	 * @param {String} id ID属性值
	 */
	"setID" : function(id) {
		fastDev(this.elems[0]).prop("id", id);
		return this;
	},
	/**
	 * 获取控件ID属性值
	 * @return {String}
	 */
	"getID" : function() {
		return fastDev(this.elems[0]).prop("id");
	},
	/**
	 * 显示控件
	 */
	"show" : function() {
		fastDev(this.elems).show();
		return this;
	},
	/**
	 * 隐藏控件
	 */
	"hide" : function() {
		fastDev(this.elems).hide();
		return this;
	},
	/**
	 * 判断控件是否显示状态
	 * @return {Boolean}
	 * @private
	 */
	"isShow" : function() {
		return fastDev(this.elems).isShow();
	},
	/**
	 * 在当前对象Dom集中查找满足指定条件的元素
	 * @param {String} selector 条件
	 * @return {fastDev.Core.DomObject}
	 */
	"find" : function(selector) {
		
		var result = [], push = result.push;
		
		fastDev(this.elems).each(function(idx, elem){
			push.apply(result, fastDev.Sizzle(selector , elem));
		});
		//var result = fastDev.Sizzle(selector, this.elems);
		push.apply(result, fastDev.Sizzle(selector, null, null, this.elems));
		//result = result.concat(fastDev.Query.filter(selector, this.elems));
		return fastDev(result);
	},
	/**
	 * 销毁当前对象Dom集
	 */
	"destroy" : function() {
		fastDev(this.elems).remove();
	},
	/**
	 * 渲染组件静态显示部分至容器中
	 */
	"renderStaticHtml" : function() {
		var 
			template = this.template, 
			options = this._options, 
			container = options.container, 
			domobj = template.buildStaticTemplate(this._global.params);
			
		// 将静态Dom合并至当前组件中
		this.merge(domobj);
		try {
			// 渲染当前静态Dom至页面容器中
			if(container && container.append && options.autoRenderer) {
				container.append(this);
			}
		} catch(e) {
			fastDev.addError(this.alias, "renderStaticHtml", "构建静态模板异常：" + e.message);
		}
	},
	"_renderStaticHtml" : function(params) {

		var elem, 
			options = this._options, 
			container = options.container, 
			html = this.staticTemplate(params);
			
		if(html === "") {
			return;
		}
		
		elem = fastDev(html);
		this.merge(elem);
		if(container && container.append && options.autoRenderer) {
			container.append(this);
		}
	},
	/**
	 * 初始化动态模板
	 * @param {String} [name] 模板名称
	 * @param {Array[fastDev.Data.Record]} [dataList] 数据记录集
	 */
	"initDynamicHtml" : function(name, dataList) {
		try {
			dataList = dataList || this.dataset.select();
			return this.template.initDynamic(dataList, name).fragment;
		} catch(e) {
			fastDev.addError(this.alias, "initDynamicHtml", e.message);
		}
	},
	/**
	 * 渲染动态模板(覆盖上次渲染)
	 * @param {DomObject} container 容器
	 * @param {String} [name] 模板名称，默认返回第一个动态模板
	 * @param {Window} [context] 全局作用域，默认为当前window对象
	 * @param {Array} [data] 渲染模板所使用的数据，默认获取数据集中所有数据
	 * @param {Boolean} [overwirte=true] 是否重写容器内容，设置为false则不会清空容器内容
	 */
	"renderDynamicHtml" : function() {
		var container, name, context, data, overwrite, domobj,
			// 生成模板所需参数
			params = this._global.params,
			// 为方便做参数修正，将参数列表转为数组
			args = fastDev.convertArray(arguments);
			
		// 容器无效时，当次动态模板渲染终止
		container = args[0];
		if(!container || !container.append || !container.empty) {
			fastDev.addError(this.alias, "renderDynamicHtml", "未指定动态模板容器，无法渲染动态模板");
		}

		// 修正模板名称
		if(!fastDev.isString(args[1])) {
			args.splice(1, 0, "");
		}

		if(!fastDev.isWindow(args[2])) {
			args.splice(2, 0, window);
		}

		if(!fastDev.isArray(args[3])) {
			args.splice(3, 0, this.dataset.select());
		}

		if(!fastDev.isBoolean(args[4])) {
			args.splice(4, 0, true);
		}

		name = args[1];
		context = args[2];
		data = args[3];
		overwrite = args[4];
		
		domobj = this.template.buildDynamicTemplate(name, params, data, context);
		//domobj = this.template.initDynamic(data, name).fragment;

		if(overwrite === true) {
			container.empty();
		}
		container.append(domobj);

		return domobj;
	},
	/**
	 * 生成动态模板内容并渲染至指定容器中
	 * @param {DomObject} container 容器
	 * @param {String} [name] 模板名称
	 * @param {Array} [data] 指定渲染模板用的数据
	 * @param {Boolean} [merge] 是否将生成的内容托管给所属控件
	 * @param {Window} [context] 当前动态模板所属窗口(跨级时使用，其他时候不需要设置此参数)
	 * @param {Boolean} [empty] 是否清空容器内已有的内容
	 * @private
	 */
	"_renderDynamicHtml" : function() {
		var name, data, elem, merge, context, empty, 
			args = fastDev.convertArray(arguments),
			container = args[0];
			
		name = fastDev.isString(args[1]) ? args[1] : args.splice(1, 0, null) && "dynamicTemplate";
		data = fastDev.isArray(args[2]) ? args[2] : args.splice(2, 0, null) && this.dataset.select();
		merge = fastDev.isBoolean(args[3]) ? args[3] : args.splice(3, 0, null) && false;
		context = fastDev.isWindow(args[4]) ? args[4] : args.splice(4, 0, null) && window;
		empty = fastDev.isBoolean(args[5]) ? args[5] : true;

		elem = context.fastDev(this[name](this._global.params, data));
		
		if(merge) {
			this.merge(elem);
		}
		
		if(container && container.append) {
			if(empty === true) {
				container.empty();
			}
			container.append(elem);
		}
	},
	/**
	 * 渲染动态模板(追加至上次渲染之后)
	 * @param {DomObject} container 容器
	 * @param {String} [name] 模板名称，默认返回第一个动态模板
	 * @param {Window} [context] 全局作用域，默认为当前window对象
	 * @param {Array} [data] 渲染模板所使用的数据，默认获取数据集中所有数据
	 * @private
	 */
	"appendDynamicHtml" : function(container, name, context, data) {
		var args = [].slice.call(arguments);
		// 修正模板名称
		if(!fastDev.isString(args[1])) {
			args.splice(1, 0, "");
		}

		if(!fastDev.isWindow(args[2])) {
			args.splice(2, 0, window);
		}

		if(!fastDev.isArray(args[3])) {
			args.splice(3, 0, this.dataset.select());
		}
		
		args[4] = false;
		
		this.renderDynamicHtml.apply(this, args);
	},
	/**
	 * 保存HTML字符串数组为模板原型
	 * @param {Array} template 字符串数组
	 */
	"setTemplate" : function(template) {
		this.constructor.prototype.template = template;
	},
	/**
	 * 将value值保存至配置中
	 * @param {Object} value
	 * @protected
	 */
	"loadAndSetValue" : function(data) {
		data = this.proxy.readerDate(data);
		this.setValue(data);
	},
	/**
	 * initProxy加载完成回调句柄
	 * @private
	 */
	"onAfterLoadInit" : function() {
		var 
			options = this._options, 
			global = this._global;
		// initSource数据加载完成回调
		fastDev.fire(options.onAfterLoadInit, this);
		// 构建控件数据部分界面
		this.constructItems(options, global);
		// 设置当前控件显示状态
		if(options.display === false) {
			this.hide();
		}
		// 控件数据部分界面构建完成回调
		fastDev.fire(options.onAfterInitRender, this);
	},
	/**
	 * dataProxy加载完成回调句柄
	 * @private
	 */
	"onAfterLoadData" : function(data) {
		data = data || this._options.value;
		// 控件当前值加载完成回调
		fastDev.fire(this._options.onAfterLoadData, this);
		// 设置控件当前值
		if(fastDev.isValid(data)) {
			this.setValue(data);
		}
		// 控件值设置完成回调
		fastDev.fire(this._options.onAfterDataRender, this);
	},
	/**
	 * 子类设置当前组件值的接口
	 * @protected
	 */
	"setValue" : fastDev.noop,
	/**
	 * 重设initSource的请求参数
	 * @param {JsonObject} param
	 */
	"setInitReqParam" : function(param) {
		if(this.initProxy) {
			this.initProxy.setParam(param);
		}
	},
	/**
	 * 增加initSource的请求参数
	 * @param {JsonObject} param
	 */
	"addInitReqParam" : function(param) {
		if(this.initProxy) {
			this.initProxy.addParam(param);
		}
	},
	/**
	 * 重设dataSource的请求参数
	 * @param {JsonObject} param
	 */
	"setDataReqParam" : function(param) {
		if(this.dataProxy) {
			this.dataProxy.setParam(param);
		}
	},
	/**
	 * 增加dataSource的请求参数
	 * @param {JsonObject} param
	 */
	"addDataReqParam" : function(param) {
		if(this.dataProxy) {
			this.dataProxy.addParam(param);
		}
	}
});

fastDev.apply({
	/**
	 * 是否组件对象
	 * @param {Object} value
	 * @return {Boolean}
	 * @member fastDev
	 */
	"isComponent" : function(value) {
		return fastDev.Ui.Component.isPrototypeOf(value);
	}
});
/**
 * @class fastDev.Ui.Toolbar
 * @author liuRuiTao
 * @extends fastDev.Ui.Component
 * 工具栏控件，支持定义文本、按钮、输入框、下拉框等控件<p>
 * 作者：袁刚
 * 
 *		<div itype="Toolbar">
 *			<div itype="text" text="工具栏文本"></div>
 *			<div itype="spacer"></div>
 *			<div plain=true text="增加" iconCls="icon-add"></div>
 *			<div itype="separator"></div>
 *			<div plain=true text="修改" iconCls="icon-edit"></div>
 *			<div itype="separator"></div>
 *			<div plain=true text="保存" iconCls="icon-save"></div>
 *			<div itype="separator"></div>
 *			<div plain=true text="删除" iconCls="icon-delete"></div>
 *			<div itype="end"></div>
 *			<div iconCls="icon-search" text="搜索"></div>
 *			<div itype="separator"></div>
 *			<div iconCls="icon-print" text="打印"></div>
 *		</div>
 */
fastDev.define("fastDev.Ui.Toolbar", {
	"extend" : "fastDev.Ui.Component",
	"alias" : "Toolbar",
	"_options" : {
		"enableDataSet"  : false,
		"enableInitProxy" : false,
		"enableDataProxy" : false,
		/**
		 * 内容项
		 * @cfg {Array[JsonObject]/String} items 子项配置数组
		 * @cfg {String} [items.itype="button"] 子项的类型
		 *  "text" : 文本
		 *  "button" : 按钮
		 *  "textbox" : 文本框
		 *  "select" : 下拉框
		 *  "spacer(-)" : 空格分隔符
		 *  "separator(|)" : 竖线分隔符
		 *  "end(>)" ： 左侧布局结束符
		 */
		"items" : null
	},
	"_global" : {
		"width" : "100%"
	},
	// 工具栏子项构造器
	"_itemCtor" : {
		"text" : function(item) {
			return fastDev('<span class="ui-button-text '+(item.cls || "")+'">' + item.text + '</span>').appendTo(item.container);
		},
		"button" : function(item) {
			return fastDev.create("Button", item);
		},
		"textbox" : function(item) {
			return fastDev.create("TextBox", item);
		},
		"select" : function(item) {
			return fastDev.create("Select", item);
		},
		"spacer" : function(item) {
			return fastDev('<span class="ui-space '+(item.cls || "")+'"></span>').appendTo(item.container);
		},
		"separator" : function(item) {
			return fastDev('<span class="ui-toolbar-line '+(item.cls || "")+'"></span>').appendTo(item.container);
		}
	},
	/**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
	"template" : [
		'<div class="ui-toolbar ui-toolbar-bg #{cls}" style="width: #{width}">', 
			'<div class="ui-left"></div>', 
			'<div class="ui-right"></div>', 
		'</div>'
	],
	/**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
	"tplParam" : ["width", "cls"],
	// 使用父类文档说明
	"ready" : function() {
		this._itemMap = {};
	},
	// 使用父类文档说明
	"construct" : function(options, global) {
		// 默认子项容器为左侧
		global.leftContainer = fastDev(this.elems).first();
		global.rightContainer = global.leftContainer.next();
		global.shell = global.leftContainer;
	},
	// 使用父类文档说明
	"init" : function(options, global) {
		// 构造子项
		this.constructItems(options.items);
	},
	// 使用父类文档说明
	"constructItems" : function(items) {
		// 子项配置校验
		if(!fastDev.isArray(items)) {
			return;
		}

		var container = this._global.shell;

		for(var i = 0, item; item = items[i]; i++) {
			this.addItem(item, container);
		}
	},
	/**
	 * 处理items为标准模式
	 * @private
	 */
	"parseItem" : function(item) {
		// 子项默认类型为按钮
		if(!fastDev.isString(item)) {
			item.itype = item.itype || "button";
			return;
		}
		
		// js定义时子项的简写解析
		switch(item) {
			case "-":
				return {
					itype : "spacer"
				};
			case "|":
				return {
					itype : "separator"
				};
			case ">":
				return {
					itype : "end"
				};
			default :
				return {
					itype : "text",
					text : item
				};
		}
	},
	/**
	 * 解析单个标签
	 * @private
	 */
	"constructItem" : function(item, container) {
		
		var 
			// 子项类型
			type = item.itype,
			// 子项构造器
			ctor = this._itemCtor[type], 
			// 子项ID
			id = item.id,
			global = this._global;
			
		// 如果找不到构造器则切换容器至右侧，如果值合法的情况下只有end标识会找不到构造器
		if(ctor) {
			item.container = container;
			item = ctor(item);
			if(fastDev.isValid(id)) {
				this._itemMap[id] = item;
			}
		} else {
			global.shell = container = global.rightContainer;
		}
	},
	/**
	 * 添加一个Item
	 * @since 1.4
	 * @param {Object} options item控件属性
	 * @param {String} position 控件位置left或者right 默认为right
	 */
	"addItem" : function(options, position) {
		var 
			global = this._global,
			container = fastDev.isString(position) ? global[position + "Container"] : 
				global.shell;

		if(container.isEmpty()) {
			return;
		}
		
		// 解析子项
		options = this.parseItem(options) || options;
		// 创建子项
		this.constructItem(options, container);
		return this;
	},
	/**
	 * 删除工具栏子项 
	 * @param {String} id 子项ID
	 */
	"removeItem" : function(id){
		if(this._itemMap[id]) {
			this._itemMap[id].destroy();
			this._itemMap[id] = null;
			delete this._itemMap[id];
		}
	},
	/**
	 * 启用工具栏子项
	 * @param {String} id 子项ID
	 */
	"enable" : function(id) {
		if(this._itemMap[id]) {
			this._itemMap[id].enable();
		}
	},
	/**
	 * 禁用工具栏子项
	 * @param {String} id 子项ID
	 */
	"disable" : function(id) {
		if(this._itemMap[id]) {
			this._itemMap[id].disable();
		}
	},
	/**
	 * 获取子项对象 
	 * @param {String} id 子项ID
	 */
	"getItem" : function(id){
		return this._itemMap[id];
	}
});
/**
 * @class fastDev.Ui.Box
 * @extends fastDev.Ui.Component
 * Box类继承自component,所有输入类控件的基础类控件，其子类包括输入框、密码框、文本域、下拉框等
 */
fastDev.define("fastDev.Ui.Box", {
	"extend" : "fastDev.Ui.Component",
	"alias" : "Box",
	"_options" : {
		/**
		 * @cfg {String} [rule]
		 * 设定控件的校验规则，多个规则使用分号(;)分割
		 */
		"rule" : "",
		/**
		 * @cfg {Boolean} [async=false]
		 * 使用ajax访问远程服务校验时是否使用同步
		 */
		"async" : false,
		/**
		 * @cfg {Boolean} [readonly=false]
		 * 设定控件状态只读(true)/非只读[false]
		 */
		"readonly" : false,
		/**
		 * @cfg {String} iwidth
		 * 控件宽度配置项,HTML模式时在IE6、7下使用input标签声明输入框宽度时的兼容属性
		 */
		"iwidth" : "",
		/**
		 * @cfg {Boolean} [disabled=false]
		 * 设定控件状态启用(false)/禁用(true)
		 */
		"disabled" : false,
		/**
		 * @cfg {String} [errorMode="float"]
		 * 设定校验出错时错误信息提示方式  
		 * float : 浮动提示错误信息 
		 * custom : 自定义错误信息提示方式
		 */
		"errorMode" : "float",
		/**
		 * @cfg 设定控件校验触发模式 [validateMode="none"]
		 * none : 不触发控件校验
		 * blur : 控件失去焦点时触发校验
		 * ajax:url : 控件失去焦点时触发,使用ajax访问远程服务校验
		 */
		"validateMode" : "none",
		/**
		 * @cfg {JsonObject} errorConfig
		 * 设定控件校验出错时的错误信息
		 *
		 *     @example
		 *     <script>
		 *       var error1Config = {
		 *         "required" : "当前输入框不能为空！（我是使用的自定义验证信息）",
		 *         "MaxLength" : "输入字符超出规定长度，规定长度为#{MaxLength}！（注：一个英文字母或数字占1，一个汉字或全角字符占2）（我是使用的自定义验证信息）"
		 *       };
		 *     </script>
		 * 
		 *     <input itype="TextBox" id="error1" validateMode="blur" rule="required;MaxLength:4" errorConfig="#{error1Config}"  />
		 */
		"errorConfig" : null,
		/**
		 * @cfg {String} emptyText
		 * 设定输入框初始值为空时所展现的提示文字
		 */
		"emptyText" : null,
        "tooltip":null,
        // 使用父类文档说明
		"enableDataSet" : false,
		// 使用父类文档说明
		"enableInitProxy" : false,
		// 使用父类文档说明
		"enableDataProxy" : false,
		/**
		 * @event onfocus
		 * 当元素获得焦点时触发
		 */
		"onfocus" : fastDev.noop,
		/**
		 * @event onblur
		 * 当元素失去焦点时触发
		 */
		"onblur" : fastDev.noop,
		/**
		 * @event onselect
		 * 当元素被选取时触发
		 */
		"onselect" : fastDev.noop,
		/**
		 * @event onchange
		 * 当元素改变时触发
		 */
		"onchange" : fastDev.noop,
		/**
		 * @event onclick
		 * 当鼠标被单击时触发
		 */
		"onclick" : fastDev.noop,
		/**
		 * @event ondblclick
		 * 当鼠标被双击时触发
		 */
		"ondblclick" : fastDev.noop,
		/**
		 * @event onmousedown
		 * 当鼠标按钮被按下时触发
		 */
		"onmousedown" : fastDev.noop,
		/**
		 * @event onmouseup
		 * 当鼠标按钮被按下时触发
		 */
		"onmouseup" : fastDev.noop,
		/**
		 * @event onmouseover
		 * 当鼠标指针悬停于某元素之上时触发
		 */
		"onmouseover" : fastDev.noop,
		/**
		 * @event onmousemove
		 * 当鼠标指针移动时触发
		 */
		"onmousemove" : fastDev.noop,
		/**
		 * @event onmouseout
		 * 当鼠标指针移出某元素时触发
		 */
		"onmouseout" : fastDev.noop,
		/**
		 * @event onkeypress
		 * 当键盘被按下后又松开时触发
		 */
		"onkeypress" : fastDev.noop,
		/**
		 * @event onkeydown
		 * 当键盘被按下时触发
		 */
		"onkeydown" : fastDev.noop,
		/**
		 * @event onkeyup
		 * 当键盘被松开时触发
		 */
		"onkeyup" : fastDev.noop,
		/**
		 * @event onBeforeValidation
		 * 验证前发生触发
		 */
		"onBeforeValidation" : fastDev.noop,
		/**
		 * @event onAfterValidation
		 * 验证后发生触发
		 */
		"onAfterValidation" : fastDev.noop
	},
	"_global" : {
		"clearEmptyText" : false
	},
	/**
	 * 错误提示信息模板
	 * @private
	 */
	"errorTemplate" : ['<div class="ui-tips-text ui-radius ui-shadow" style="z-index:9999999"></div>'],
	/**
	 * 模板中使用的参数
	 * @private
	 */
	"tplParam" : ["readOnly", "disabled"],
	/**
	 * 清除输入的值
	 */
	"clean" : function() {
		this.reset();
	},
	/**
	 * 重置输入框的值为空
	 */
	"reset" : function() {
		this.setValue("");
	},
	/**
	 * 组件参数准备方法
	 * @protected
	 */
	"ready" : function(options, global) {
		if(!fastDev.isString(options.id) || options.id.length === 0) {
			options.id = fastDev.getID() + "";
		}
		// var fx = fastDev.Util.StringUtil.trim;
		for(var fx = fastDev.Util.StringUtil.trim, elems = ["width", "height"], elem, ielem; elem = elems.shift(); ) {
			ielem = "i" + elem;
			if(options[ielem] = fx(options[ielem] || "")) {
				options[elem] = options[ielem];
			} else if(fastDev.isPlainObject(options.style)) {
				options[elem] = options.style[elem] === undefined ? options[elem] : options.style[elem];
			}
		}
		options.value = fastDev.isValid(options.value) ? options.value : "";
		if(fastDev.isString(options.errorConfig)) {
			options.errorConfig = fastDev.Util.JsonUtil.parseJson("{" + options.errorConfig + "}");
		}
		options.readonly = !!options.readonly;
		this.setReadOnly = this.setReadonly;
		if(options.tooltip!==null && options.tooltip!==""){
			if(fastDev.isString(options.tooltip)){
				var tooltipContent=options.tooltip;
				options.tooltip={};
				options.tooltip.tooltipContent=tooltipContent;				
			}
			options.tooltip.targetElement=options.id;
		}
	},
	/**
	 * 组件构造方法
	 * @param {Object} options 当前控件配置信息
	 * @param {Object} global 当前控件全局信息
	 * @protected
	 */
	"construct" : function(options, global) {
		global.box = this.find("[id='" + options.id + "']");
		global.wrapper = this.find(".ui-form-wrap");
	},
	/**
	 * 组件初始化方法
	 * @param {Object} options 当前控件配置信息
	 * @param {Object} global 当前控件全局信息
	 * @protected
	 */
	"init" : function(options, global) {
		var box = this._global.box;

		if(options.value === "") {
			this.initEmptyText(options.emptyText);
		} else {
			//if(options.enabledDataProxy === false){
			//this.setValue(options.value);
			//}
			global.clearEmptyText = true;
		}

		if(options.validateMode !== "none") {
			this.bind("blur", fastDev.setFnInScope(this, this.validate));
		}
		// 初始化事件
		this.initEvent(options);
		if(options.readonly) {
			this.setReadonly(true);
		}
		if(options.tooltip!==null){
			this.createTip();
        }
	},
	"createTip":function(){
		fastDev.create("Tooltip",this._options.tooltip);
    },
	/**
	 * 初始化事件
	 * @private
	 */
	"initEvent" : function(options) {
		fastDev.each(["onfocus", "onblur", "onselect", "onchange", "onclick", "ondblclick", "onmousedown", "onmouseup", "onmouseover", "onmousemove", "onmouseout", "onkeypress", "onkeydown", "onkeyup"], function(index, eventname) {
			if(!fastDev.isNoop(options[eventname]) && fastDev.isFunction(options[eventname])) {
				this.bind(eventname.replace("on", ""), options[eventname], false);
			}
		}, this);
	},
	/**
	 * 调用配置中的验证规则对输入值进行验证
	 * @return {Boolean}
	 */
	"validate" : function() {
		var options = this._options, value = this.getValue(), validation = fastDev.Core.Validation, validateMode = options.validateMode;
		options.onBeforeValidation.call(this);

		if(validateMode.indexOf("ajax:") !== -1) {
			if(options.async){
				validation.checkAjax(value, validateMode.replace("ajax:", ""), this, options.onAfterValidation,options.async);
			}else{
				return validation.checkAjax(value, validateMode.replace("ajax:", ""), this, options.onAfterValidation,options.async);
			}

		} else {
			var errorMsg = options.msg = validation.validate(options.rule, value, options.errorConfig);
			if(errorMsg) {

				this.initError(errorMsg);

			} else {

				this.destroyError();
			}

			options.onAfterValidation.call(this);

			return errorMsg;
		}
	},
	/**
	 * 获取验证之后的提示信息
	 * @return {String}
	 */
	"getMsg" : function() {
		return this._options.msg;
	},
	/**
	 * 取得控件的值
	 */
	"getValue" : function() {
		var box = this._global.box;
		if(!box.hasClass("ui-form-text-default")) {
			return box.prop("value");
		} else {
			return "";
		}
	},
	/**
	 * 设置控件的值
	 * @param {String} value
	 */
	"setValue" : function(value, empty) {
		if(fastDev.isValid(value)) {
			if(empty !== true) {
				this.destroyEmptyText();
			}
			this._global.box.prop("value", value);
		}
	},
	/**
	 * 初始化空值提示
	 * @private
	 */
	"initEmptyText" : function(value) {

		var global = this._global, box = global.box, cancelEmptyText, initEmptyText;
		
		if(!fastDev.isString(value)){
			value = this._options.emptyText;
		}
		
		if(!value || box.prop("value")) {
			return;
		}

		if(!( cancelEmptyText = global.cancelEmptyText)) {
			cancelEmptyText = global.cancelEmptyText = fastDev.setFnInScope(this, this.destroyEmptyText);
		}
		
		if(!(initEmptyText = global.initEmptyText)){
			initEmptyText = global.initEmptyText = fastDev.setFnInScope(this, this.initEmptyText);
		}

		box.addClass("ui-form-text-default");

		box.bind("focus", cancelEmptyText);
		box.bind("blur", initEmptyText);

		this.setValue(value, true);
	},
	/**
	 * 销毁空值提示
	 * @private
	 */
	"destroyEmptyText" : function() {
		var global = this._global, box = global.box, cancelEmptyText = global.cancelEmptyText;

		box.prop("value", "");

		box.removeClass("ui-form-text-default");

		box.unbind("focus", cancelEmptyText);
	},
	/**
	 * 设置是否只读
	 * @param {Boolean} [readonly=true] 是否只读
	 */
	"setReadonly" : function(readonly) {
		var global = this._global;
		if(readonly === false) {
			global.box.removeProp("readOnly");
			global.wrapper.removeClass("ui-form-readonly");
		} else {
			global.box.prop("readOnly", true);
			global.wrapper.addClass("ui-form-readonly");
		}
		return this;
	},
	/**
	 * 启用控件
	 */
	"enable" : function() {
		var global = this._global;
		global.box.removeProp("disabled");
		global.wrapper.removeClass("ui-form-disabled");
		return this;
	},
	/**
	 * 禁用控件
	 */
	"disable" : function() {
		var global = this._global;
		global.box.prop("disabled", true);
		global.wrapper.addClass("ui-form-disabled");
		return this;
	},
	/**
	 * 初始化错误提示
	 * @param {Object} errorMsg 错误信息
	 * @private
	 */
	"initError" : function(errorMsg) {
		if(!fastDev.isString(errorMsg) || errorMsg.length <= 0) {
			return;
		}
		var global = this._global,
		// 输入框
		box = global.box, wrapper = global.wrapper;
		
		wrapper.addClass("ui-tips-text-err");
		
		if(this._options.errorMode !== "float"){
			return;
		}
		// 错误提示框
		var errorDiv = global.errorDiv || (global.errorDiv = fastDev(this.errorTemplate.join(""))),
		// 鼠标滑入输入框事件
		boxMouseoverHandle = global.boxMouseoverHandle,
		// 鼠标滑出输入框事件
		boxMouseoutHandle = global.boxMouseoutHandle;

		if(!boxMouseoverHandle) {
			boxMouseoverHandle = global.boxMouseoverHandle = function(event) {
				if(wrapper.hasClass("ui-tips-text-err")) {
					//ajax验证移除错误后再调用此方法时errorDiv为空。
					if(errorDiv.elems.length === 0) {
						errorDiv = global.errorDiv;
					}
					errorDiv.css({
						left : event.pageX + 10 + "px",
						top : event.pageY + 10 - ((fastDev.Browser.isIE6 || fastDev.Browser.isIE7) && fastDev(event.target).scrollTop()  || 0) + "px"
					}).show();
				}
			};

			boxMouseoutHandle = global.boxMouseoutHandle = function() {
				errorDiv.hide();
			};
		}

		// 渲染错误提示框并隐藏
		errorDiv.setText(errorMsg).css({
			position : "absolute"
		}).hide().appendTo(document.body);


		box.bind("mouseover", boxMouseoverHandle).bind("mouseout", boxMouseoutHandle);
	},
	/**
	 * 销毁错误提示
	 * @private
	 */
	"destroyError" : function() {
		var global = this._global, errorDiv = global.errorDiv;
		
		global.wrapper.removeClass("ui-tips-text-err");
		
		if(!errorDiv) {
			return;
		}

		var box = global.box, textMouseoverHandle = global.textMouseoverHandle, textMouseoutHandle = global.textMouseoutHandle;
		box.unbind("mouseover", textMouseoverHandle).unbind("mouseout", textMouseoutHandle);
		errorDiv.remove();
		global.errorDiv = null;
	},
	/**
	 * 绑定控件事件
	 * @param {String} type 事件类型
	 * @param {Function} handle 事件句柄
	 */
	"bind" : function(type, handle) {
		this._global.box.bind(type, handle);
		return this;
	},
	/**
	 * 解除绑定控件事件
	 * @param {String} type 事件类型
	 * @param {Function} handle 事件句柄
	 */
	"unbind" : function(type, handle) {
		this._global.box.unbind(type, handle);
		return this;
	},
	/**
	 * 触发控件指定事件
	 * @param {String} type 事件类型
	 */
	"fire" : function(type) {
		this._global.box.fire(type);
		return this;
	},
	/**
	 * 当前控件是否验证出错
	 */
	"hasError" : function() {
		return fastDev.isValid(this._global.errorDiv);
	}
}); 
/**
 * @class fastDev.Ui.AutoComplete
 * @extends fastDev.Ui.Box
 * @author chengwei
 * <p>AutoComplete控件属检索提示类控件。</p>
 * <p>支持对静态数据源和远程数据源的检索，远程检索结果缓存，关键字高亮，多值输入等。</p>
 * <p>作者：程伟</p>
 *     
 *     <input itype="AutoComplete" initSource="../../data/autocomplete.jsp" 
 *            hintText="输入英文字母查询"/>
 */
fastDev.define("fastDev.Ui.AutoComplete", {
    "alias" : "AutoComplete",
    "extend" : "fastDev.Ui.Box",
    "_options" : {
        /**
		 * @cfg {String|Array[String]Array[Jsonobject]|} items
		 * 静态的数据项，支持以下数据格式：
		 * String：逗号分隔的字符串
		 * Array[String]：数组形式，数组元素为字符串
		 * Array[JsonObject]：数组形式，数组元素为Json对象，可带俩个有效属性text(显示文本)和value(实际值)
		 */
		/**
		 * @cfg {String} [queryName="q"]
		 * 检索结果时使用的查询名
		 */
		"queryName": "q",
		/**
		 * @cfg {Number} [zIndex=200]
		 * 弹出层位置索引
		 */
		"zIndex": 200,
		 /**
		 * @cfg {Number} [minChars=1]
		 * 触发关键字查找时的最小输入字符数
		 */
		"minChars": 1,
		/**
		 * @cfg {Number} [maxItems=0]
		 * 最大显示结果数，0表示不受限
		 */
		"maxItems": 0,
		 /**
		 * @cfg {String} noResultsText
		 * 未查询到结果时的提示信息，该值有效时才会显示提示信息
		 */
		"noResultsText": "",
		 /**
		 * @cfg {String} searchingText
		 * 正在搜索时的提示信息，该值有效时才会显示提示信息
		 */
		"searchingText": "",
		 /**
		 * @cfg {String} hintText
		 * 提示用户输入以便自动检索的提示信息，该值有效时才会显示提示信息
		 */
		"hintText": "",
		/**
		 * @cfg {String|Array[String]Array[Jsonobject]|} hintItems
		 * 输入框值为空时的默认提示项，数据格式可参照{@link #items}
		 * 该配置为空时则应用{@link #hintText}属性指定的提示信息
		 */
		"hintItems": null,
		/**
		 * @cfg {Number} [keyDelay=200]
		 * 使用远程服务查询数据时按键后发起请求的延迟时间(单位毫秒)
		 */
		"keyDelay": 200,
		 /**
		 * @cfg {Boolean} [autoFill=true]
		 * 是否在用户选择时自动将用户当前鼠标所在的值填入到input框
		 */
		"autoFill": true,
		/**
		 * @cfg {Boolean} [matchCase=false]
		 * 关键字是否大小写敏感
		 */
		"matchCase": false,
		 /**
		 * @cfg {Boolean} [keywordHighlight=false]
		 * 提示结果中是否 高亮显示关键字
		 */
		"keywordHighlight": false,
		/**
		 * @cfg {String} highlightCls
		 * 高亮关键字的样式名
		 */
		"highlightCls": "",
		 /**
		 * @cfg {Number} [connectTimeout=10000]
		 * 请求服务检索超时时长，单位毫秒
		 */
		"connectTimeout": 10000,
		 /**
		 * @cfg {Boolean} [matchContains=true]
		 * 是否检索包含查询关键字的结果，而非仅仅检索以查询关键字开头的结果
		 */
		"matchContains": true,
		 /**
		 * @cfg {Boolean} [selectFirst=false]
		 * 按回车时是否默认选取第一个提示结果项
		 */
		"selectFirst": false,
		 /**
		 * @cfg {Number} [selectionLimit=0]
		 * 允许输入多个值时值的限制个数，0表示不受限
		 */
		"selectionLimit": 0,
		/**
		 * @cfg {Boolean} [multiple=false]
		 * 是否允许输入多个值
		 */
		"multiple": false,
		 /**
		 * @cfg {String} [scrollHeight="180px"]
		 * 结果提示菜单出现滚动条的最大高度
		 */
		"scrollHeight": "200px",
		/**
		 * @cfg {Boolean} [showSearchIcon=false]
		 * 是否显示搜索图标
		 */
		"showSearchIcon": false,
		/**
		 * @cfg {JsonObject} extraParams
		 * 额外添加的查询参数
		 */
		"extraParams": null,
		/**
		 * @cfg {Boolean} [allowAutoCreate=false]
		 * 多值输入框模式时，当用户输入 ”逗号“，”分号“，”制表键“时，是否允许控件自动创建标签项
		 */
		"allowAutoCreate": false,
		/**
		 * @cfg {Boolean} [allowCache=true]
		 * 是否允许缓存远程数据
		 */
		"allowCache": true,
		/**
		 * @cfg {Boolan} [inside=true]
		 * 是否在当前页面内展现弹出层
		 * 该配置属性为false值时，结果弹出层将尝试跨Iframe定位展现
		 */
		"inside": true,
		/**
		 * @cfg {String} [direction="auto"]
		 * 自定义下拉面板的弹出位置 ，为以下枚举值：
		 * auto：由控件根据当前可视区域大小自行设定，默认值
		 * up：输入框上方
		 * down：输入框下方
		 */
		"direction": "auto",
		/**
		 * @cfg {Function} itemRenderer
		 * 检索结果列表项渲染器，对每个检索值进行自定义处理
		 * 方法内this指向本控件实例
		 * @param {Object} data 数据 数据类型与服务器返回的数据结构相关，可能为String或Object
		 * @param {String} keyword 关键字
		 */
		"itemRenderer": null,
		/**
		 * @cfg {Function} resultRenderer
		 * 检索结果渲染器，对整个结果进行渲染而不是逐个渲染
		 * 方法内this指向本控件实例
		 * @param {DomObject} ui 容器
		 * @param {JsonObject} data 服务器返回的数据，若该数据为json格式，则已经转换为json对象，否则为原始数据
		 * @param {String} keyword 关键字
		 */
		"resultRenderer": null,
		/**
		 * @event 
		 * 检索前的事件回调，返回false值则不执行检索
		 * 方法内this指向本控件实例
		 * @param {String} keyword 查询关键字
		 */
		"onBeforeRetrieve": fastDev.noop,
		/**
		 * @event
		 * 检索完成时的事件回调，返回false值则不处理检索结果
		 * 方法内this指向本控件实例
		 * @param {JsonObject} data 服务器端返回的检索结果
		 * @param {String} keyword 查询关键字
		 */
		"onAfterRetrieve": fastDev.noop,
		/**
		 * @event
		 * 检索失败时的事件回调
		 * 方法内this指向本控件实例
		 * @param {String} msg 错误消息
		 */
		"onRetrieveError": fastDev.noop,
		/**
		 * @event
		 * 用户点选结果后的事件回调，返回false值，则放弃此次选取
		 * 方法内this指向本控件实例
		 * @param {JsonObject} item 已选项
		 */
		"onAfterChoose": fastDev.noop,
		/**
		 * @event
		 * 输入框上回车输入事件
		 * 方法内this指向本控件实例
		 * @param {String} value 输入框当前值
		 */
		"onEnterKeydown": fastDev.noop,
		/**
		 * @event
		 * 搜索图标点击事件
		 * 方法内this指向本控件实例
		 * @param {String} value 输入框的当前值
		 */
		"onSearchIconClick": fastDev.noop,
		/**
		 * @event
		 * 标签被移除前（如delete按键或点击了关闭x按钮）的回调函数，返回false值，则不会执行移除操作
		 * 方法内this指向本控件实例
		 * @param {Object} item
		 */
		"onBeforeRemove": fastDev.noop,
		// 使用父类文档说明
		"enableInitProxy": true,
		// 使用父类文档说明
		"enableDataSet": true,
		// 使用父类文档说明
		"autoLoad" : false
    },
    /**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
    "template" : [
		// 静态模板
		'<div style="width:#{width}" class="ui-form">',
			'<div elem="autocomplete-box" class="ui-form-wrap ui-autocomplete">',
				'<tpl if(#{multiple})>',
					'<ul elem="autocomplete-selection-items" class="ui-autocomplete-selection"></ul>',
				'</tpl>',
				'<span><input elem="autocomplete-input" type="text" autocomplete="off" class="ui-form-field ui-form-input"/></span>',
				'<tpl if(#{showSearchIcon})>',
					'<div class="ui-form-trigger">',
						'<div elem="autocomplete-searchicon" class="ui-search-icon"></div>',
					'</div>',
				'</tpl>',
				'<input type="hidden" name="#{name}" id="#{id}"/>',
			'</div>',
		'</div>',
		// 弹出层模板
		'<tpl dynamic name=panel>',
			'<div elem="autocomplete-menu" class="ui-autocomplete-list ui-layer ui-shadow" style="height:#{menuHeight};z-index:#{zIndex};position:absolute;display:none">',
				'<div class="ui-selectlist-list-ct">',
					'<ul elem="autocomplete-menu-items"></ul>',
				'</div>',
				'<div elem="autocomplete-custom"></div>',
			'</div>',
		'</tpl>',
		// 动态模板
		'<tpl dynamic name=content>',
			'<tpl each>',
				'<li class="ui-list-item" name="list#{sequence}" text="{text}" item="{item}" itemVal="{value}">{label}</li>',
			'</tpl>',
		'</tpl>'
    ],
    /**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
    "tplParam" : ["width", "multiple", "sequence", "menuHeight", "zIndex", "name", "id", "showSearchIcon"],
     /**
	 * @property {Array[String]|Array[JsonObject]} fields
	 * 控件数据集所依赖的数据结构定义
	 * @readonly 
	 */
    "fields" : ["label", "value", "text", "item"],
    // 使用父类文档说明
    "ready" : function (options, global) {
        var width;
        options.selectionLimit = parseInt(options.selectionLimit, 10);
        options.keyDelay = parseInt(options.keyDelay, 10);
        options.maxItems = parseInt(options.maxItems, 10);
        options.selectionLimit = parseInt(options.selectionLimit, 10);
        global.initSource = !! options.dataSource ? options.dataSource : options.initSource;
        if (width = /^(-?\d+\.?\d+|-?\d)(px|%|em|cm)?$/.exec(fastDev.Util.StringUtil.trim(options.width + ""))) {
            options.width = width[1] + (width[2] || "px");
        } else {
            options.width = "150px";
        }
        if ((options.multiple = !! options.multiple) && (!width[2] || width[2] !== "%")) {
            options.width = Math.max(Math.min(options.container.width(), 300), parseInt(options.width, 10)) + "px";
        }
        fastDev.apply(options, {
            zIndex: parseInt(options.zIndex, 10) || 200,
            id: options.id ? options.id : fastDev.getID(),
            initSource: null,
            dataSource: null,
            autoLoad: false,
            keyDelay: Math.abs(options.keyDelay) || (( !! options.items || !global.initSource) ? 10 : 400),
            connectTimeout: parseInt(options.connectTimeout, 10) || 10000,
            minChars: parseInt(options.minChars, 10) || 1,
            fields: fastDev.isArray(options.fields) ? options.fields : [],
            showSearchIcon: !! options.showSearchIcon,
            queryName: (options.queryName && typeof options.queryName === "string") ? options.queryName : "q",
            extraParams: fastDev.isPlainObject(options.extraParams) ? options.extraParams : {},
            maxItems: (fastDev.isNumber(options.maxItems) && options.maxItems !== 0) ? options.maxItems : Infinity,
            selectionLimit: options.multiple ? !fastDev.isNumber(options.selectionLimit) ? options.selectionLimit === 0 ? Infinity : options.selectionLimit : Infinity : Infinity,
            items: this.toArray(options.items),
            inside: fastDev.Util.PositionUtil.top.fastDev === fastDev || !! options.inside
        });
        fastDev.each(["onRetrieveError", "onBeforeRetrieve", "onAfterRetrieve", "onBeforeRemove", "onAfterChoose", "itemRenderer", "onEnterKeydown", "onSearchIconClick"], function (i, name) {
            options[name] = typeof options[name] === "function" ? options[name] : fastDev.noop;
        });
        fastDev.apply(global, {
            pageContext: options.inside ? window : fastDev.Util.PositionUtil.top,
            sequence: fastDev.getID(),
            menuHeight: (window.parseInt(options.scrollHeight) || 180) + "px",
            selectionCount: 0,
            requestCount: 0,
            labelWidth: 0,
            onBlur: fastDev.noop,
            cache: {},
            // 用于保存原始数据
            items: {},
            // 用于保存当前值的原始数据
            values: {}
        });
        // 提供给表单使用的方法名
        this.addItems = this.appendItems;
    },
    // 使用父类文档说明
    "construct" : function (options, global) {
        var context = global.pageContext;
        this.merge(this.renderDynamicHtml(fastDev(context.document.body), "panel", context, false));
        fastDev.apply(global, {
            win: fastDev(window),
            docHtml: fastDev(document.documentElement),
            menu: this.find("[elem='autocomplete-menu']"),
            selection: this.find("[elem='autocomplete-selection-items']"),
            menuItems: this.find("[elem='autocomplete-menu-items']"),
            inputBox: this.find("[elem='autocomplete-box']"),
            input: this.find("[elem='autocomplete-input']"),
            custom: this.find("[elem='autocomplete-custom']"),
            searchIcon: this.find("[elem='autocomplete-searchicon']"),
            box: this.find("[elem='autocomplete-input']"),
            valueInput: this.find("[id='" + options.id + "']"),
            isBlur: true
        });
        global.topDocHtml = options.inside ? global.docHtml : fastDev(context.document.documentElement);
        if (options.showSearchIcon) {
            global.inputBox.addClass("ui-search");
        }
        this.elems.splice(1, 0, "none");
    },
    // 使用父类文档说明
    "init" : function (options, global) {
        var that = this;
        // 绑定事件
        // 输入框聚焦事件
        global.input.bind("focus", fastDev.setFnInScope(this, this.inputFocusHandle))
	        // 输入框失焦事件
	        .bind("blur", fastDev.setFnInScope(this, this.inputBlurHandle))
	        // 输入框按键事件
	        .bind("keydown", global.inputHandle = fastDev.setFnInScope(this, this.inputKeydownHandle));
        // 文本框值为空时给提示信息
        if (fastDev.Browser.isFirefox) {
            // 解决火狐浏览器下开启中文输入法时，事件捕获被丢失的情况（火狐支持input事件）
            global.input.bind("input", global.inputHandle);
        }
        if (fastDev.Browser.isIE6) {
            // IE6下回车事件不能由keydown捕获
            global.input.bind("keyup", function (event) {
                if (event.keyCode === 13) {
                    global.inputHandle(event);
                }
            });
        }
        // 文档点击事件
        global.docHtml.bind("click", global.docClickEvent = fastDev.setFnInScope(this, this.docClickHandle));
        if (!options.inside) {
            global.topDocHtml.bind("click", global.docClickEvent);
            global.win.bind("unload", function () {
                global.topDocHtml.unbind("click", global.docClickEvent);
                that.destroy();
            });
        }
        // 提示层鼠标悬浮事件
        global.menu.bind("mouseover", fastDev.setFnInScope(this, this.menuOverHandle))
	        // 提示层鼠标移除事件
	        .bind("mouseout", fastDev.setFnInScope(this, this.menuOutHandle));
        // 输入框值改变事件
        global.keyChangeHandle = fastDev.setFnInScope(this, this.keyChangeHandle);
        // 标签鼠标事件
        global.selection.bind("mouseover", fastDev.setFnInScope(this, this.selectionOverHandle));
	    // 鼠标移出
	    global.selection.bind("mouseout", fastDev.setFnInScope(this, this.selectionOutHandle));
	    // 鼠标点击删除标签
	    global.selection.bind("click", fastDev.setFnInScope(this, this.selectionClickHandle));
        global.doRetrieveHandle = fastDev.setFnInScope(this, this.doRetrieve);
        // 搜索图标点击事件
        global.searchIcon.bind("click", function () {
            options.onSearchIconClick.call(that, that.getValue());
        });
        if (global.initSource) {
            // 初始数据代理
            // 目前使用本地数据源时，不处理远程数据源，所以不初始代理
            this.initProxy.setOptions({
                onError: fastDev.setFnInScope(this, options.onRetrieveError || fastDev.noop),
                timeout: options.connectTimeout,
                url: options.initSource = global.initSource,
                onAfterLoad: fastDev.setFnInScope(this, function (data) {
                    if (data && !this.dataset.select().length) {
                        // 处理字符串数据
                        this.constructItems(data);
                    }
                })
            });
        }
        // 初始数据集
        if (options.value) {
            this.appendValue(options.value);
        }
        if (options.disabled) {
            options.disabled = false;
            this.disable();
        } else if (options.readonly) {
            this.setReadonly(true);
        }
    },
    // 使用父类文档说明
    "constructItems" : function (data, hint, isCache) {
        var global = this._global,
            options = this._options,
            keyword = global.keyword,
            json;
        global.prevInputValue = fastDev.Util.StringUtil.ltrim(global.input.prop("value"));
        global.menu.css("height", "auto");
        if (typeof data === "string") {
            try {
				// 解析JSON数据
                json = fastDev.Util.JsonUtil.parseJson(data = fastDev.Util.StringUtil.trim(data));
            } catch (e) {} finally {
                data = !! json ? json : data;
                data = typeof options.resultRenderer === "function" ? data : this.toArray(data);
            }
        }
        if (hint || ( !! keyword && keyword === global.prevInputValue && options.onAfterRetrieve.call(this, (data = data || this.dataset.select() || []).slice(0), keyword) !== false)) {
            if ( !! data.length) {
                global.custom.empty();
                // 渲染结果项
                this.renderMenu(data, keyword, hint);
                // 缓存远程数据
                if (options.allowCache) {
                    global.cache[keyword] = !options.initSource ? [] : data;
                }
            } else if (options.noResultsText) {
                this.showTips(options.noResultsText);
                if (options.allowCache) {
                    global.cache[keyword] = [];
                }
            } else {
                global.menu.hide();
            }
        } else {
            global.menu.hide();
        }
        global.isLoading = false;
    },
    /**
     * 绑定事件
     * @param {String} type 事件类型
     * @param {Function} handle 事件句柄 
     * @private 
     */
    "bind" : function (type, handle) {
        if (type === "blur") {
            this._global.onBlur = handle;
        } else {
            this.superClass.bind.apply(this, arguments);
        }
        return this;
    },
    /**
     * 输入框聚焦事件处理
     * @private
     */
    "inputFocusHandle" : function () {
        if (!this._global.input.prop("value")) {
            this.showHint();
        }
        this._global.isBlur = false;
    },
    /**
     * 输入框失焦事件处理
     * @private
     */
    "inputBlurHandle" : function () {},
    /**
     * 提示层鼠标悬浮事件处理
     * @param {Event} event
     * @private
     */
    "menuOverHandle" : function (event) {
        var sequence = "list" + this._global.sequence,
            target = fastDev(event.target),
            item = target;
        if (target.attr("name") === sequence || !! (item = target.parents("li[name='" + sequence + "']")).elems[0]) {
            item.addClass("ui-list-selected");
        }
    },
    /**
     * 提示层鼠标移出事件处理
     * @private
     */
    "menuOutHandle" : function () {
        this._global.menu.find(".ui-list-selected").removeClass("ui-list-selected");
    },
    /**
     * 标签层鼠标悬浮事件
     * @param {Event} event
     * @private
     */
    "selectionOverHandle" : function (event) {
        if (this._options.disabled) {
            return;
        }
        var sequence = "label" + this._global.sequence,
            target = fastDev(event.target),
            item = target;
        if (target.attr("name") === sequence || !! (item = target.parent("li[name='" + sequence + "']")).elems[0]) {
            item.addClass("ui-autocomplete-over");
            if (!item.prop("title")) {
                item.prop("title", item.find("span").getText());
            }
        }
    },
    /**
     * 标签鼠标移出事件处理
     * @private
     */
    "selectionOutHandle" : function () {
        if (this._options.disabled) {
            return;
        }
        this._global.selection.find("li.ui-autocomplete-over").removeClass("ui-autocomplete-over");
    },
    /**
     * 标签单击关闭事件处理
     * @param {Event} event
     * @private
     */
    "selectionClickHandle" : function (event) {
        if (this._options.disabled) {
            return;
        }
        var global = this._global,
            sequence = "label" + global.sequence,
            target = fastDev(event.target),
            item = target;
        if (target.attr("name") === sequence || !! (item = target.parent("li[name='" + sequence + "']")).elems[0]) {
            if (event.target.nodeName.toLowerCase() === "a") {
                this.closeLabel(item);
            } else {
                global.selection.find("li.ui-autocomplete-selected").removeClass("ui-autocomplete-selected");
                item.addClass("ui-autocomplete-selected");
                return fastDev.Event.stopBubble(event);
            }
        }
    },
    /**
     * 文档单击事件处理
     * @param {Event} event
     * @private
     */
    "docClickHandle" : function (event) {
        if (this._options.disabled) {
            return;
        }
        var global = this._global,
            sequence = "list" + global.sequence,
            target = fastDev(event.target),
            item = target;
        global.selection.find("li.ui-autocomplete-selected").removeClass("ui-autocomplete-selected");
        if (event.target === global.input.elems[0]) {
            // input focus
        } else if (target.attr("name") === sequence || !! (item = target.parents("li[name='" + sequence + "']")).elems[0]) {
            global.input.elems[0].focus();
            this.appendValue(global.items[item.attr("item")]);
            if (this._options.multiple) {
                this.showHint();
            }
            return fastDev.Event.stopBubble(event);
        } else if (!target.parents("#autocomplete-menu-" + global.sequence).elems[0]) {
            global.menu.hide();
            global.items = {};
            if (!global.isBlur) {
                global.onBlur();
                global.isBlur = true;
            }
        }
    },
    /**
     * 输入框按键事件处理
     * @param {Event} event
     * @private
     */
    "inputKeydownHandle" : function (event) {
        var options = this._options,
            global = this._global;
        global.handling = true;
        if (options.disabled) {
            return;
        }
        if (options.multiple) {
            if (global.lastKeypressCode === 8 && event.keyCode !== 8) {
                global.selectedLabel = null;
            }
            global.selection.find("li.ui-autocomplete-selected").removeClass("ui-autocomplete-selected");
        }
        global.lastKeypressCode = event.keyCode;
        switch (event.keyCode) {
            case 38:
                // up
                return this.moveItem("up", event);
            case 40:
                // down
                return this.moveItem("down", event);
            case 9:
            case 186:
            case 188:
            case 13:
                // 逗号，分号，制表，回车
                return this.dealWithEnterKey(event.keyCode, event);
            case 8:
                // delete
                return this.removeLabel(event);
            default:
                this.setTimer(global.keyChangeHandle, 10);
        }
    },
    /**
     * 设置检索计时
     * @param {Function} func
     * @param {Number} delay
     * @private
     */
    "setTimer" : function (func, delay) {
        var global = this._global,
            options = this._options;
        if (global.selectionCount < options.selectionLimit) {
            window.clearTimeout(global.timer);
            global.timer = window.setTimeout(func, delay);
        }
    },
    /**
     * 显示默认的提示信息项
     * @private
     */
    "showHint" : function () {
        var options = this._options,
            global = this._global,
            items, value, temp;
        if (options.readonly) {
            return;
        }
        if ( !! options.hintItems) {
            if (typeof options.hintItems === "boolean" && !! options.items.length) {
                items = options.items;
            } else if ( !! options.hintItems.length) {
                items = this.toArray(options.hintItems);
            }
            if ( !! items) {
                if (options.multiple) {
                    value = (" " + global.valueInput.prop("value").replace(/[,]/g, " ") + " ");
                    temp = [];
                    for (var i = 0; i < items.length; i++) {
                        if (value.search(new RegExp(" " + this.gainValue(items[i], "value", true) + " ")) === -1) {
                            temp.push(items[i]);
                        }
                        if (temp.length === options.maxItems) {
                            break;
                        }
                    }
                    items = temp;
                }
                return this.constructItems(items, true);
            }
        }
        if ( !! options.hintText) {
            this.showTips(options.hintText);
        } else {
            global.menu.hide();
        }
    },
    /**
     * 将数据转换为数组
     * @param {Object} data
     * @return {Array}
     * @private
     */
    "toArray" : function (data) {
        return data ? (typeof data === "string" || typeof data === "boolean" || fastDev.isNumber(data)) ? (data + "").split(",") : fastDev.isArray(data) ? data : fastDev.isPlainObject(data) ? [data] : [] : [];
    },
    /**
     * 键盘按键移除标签
     * @param {Event} event
     * @private
     */
    "removeLabel" : function (event) {
        var global = this._global,
            options = this._options;
        if (!options.readonly) {
            this.setTimer(global.keyChangeHandle, 10);
            if (options.multiple && ( !! global.selectionCount) && !global.input.prop("value")) {
                if ( !! global.selectedLabel) {
                    this.closeLabel(global.selectedLabel, true);
                    global.input.elems[0].focus();
                    global.selectedLabel = null;
                } else {
                    global.selection.find("li.ui-autocomplete-selected").removeClass("ui-autocomplete-selected");
                    global.selectedLabel = global.selection.find("li:last").addClass("ui-autocomplete-selected");
                }
                return fastDev.Event.stopBubble(event);
            }
        }
        return true;
    },
    /**
     * 提示结果菜单上下选取
     * @param {String} direction 按键方向
     * @param {Event} event
     * @private
     */
    "moveItem" : function (direction, event) {
        var global = this._global,
            menu = global.menuItems,
            items, item, start;
        if (global.menu.isShow() && !! (items = menu.find("li")).elems.length) {
            start = !! (item = menu.find("li.ui-list-selected:first")).elems[0] ? (direction === "up" ? item.prev() : item.next()) : menu.find("li:" + (direction === "up" ? "last" : "first"));
            items.removeClass("ui-list-selected");
            start.addClass("ui-list-selected");
            if (this._options.autoFill) {
                item = start.hasElem() ? start : global.prevInputValue;
                if (this._options.multiple) {
                    global.input.prop("value", this.gainValue(item, "text", true));
                } else {
                    this.appendValue(fastDev.isString(item) ? item : global.items[item.attr("item")], true);
                }
                global.input.elems[0].focus();
            }
            if (start.hasElem()) {
                // 处理滚动滚动条
                menu = global.menu;
                var top = start.elems[0].offsetTop,
                    itemHeight = start.outerHeight(),
                    menuHeight = menu.height(),
                    scrollTop = menu.scrollTop();
                if (top + itemHeight > scrollTop + menuHeight) {
                    menu.scrollTop(top + itemHeight - menuHeight);
                } else if (top < scrollTop) {
                    menu.scrollTop(top);
                }
            }
            return fastDev.Event.stopBubble(event);
        }
        return true;
    },
    /**
     * 处理键盘输入事件
     * @param {String} code 键位代码
     * @private
     */
    "dealWithEnterKey" : function (code, event) {
        var global = this._global,
            options = this._options,
            items = global.menuItems,
            item, value;
        if (options.multiple && (code === 9 || code === 188 || code === 186)) {
            // 逗号，分号或制表符
            if ( !! options.allowAutoCreate && !! (value = fastDev.Util.StringUtil.trim(global.input.prop("value").replace(/[,;]/g, "")))) {
                item = (" " + global.valueInput.prop("value").replace(/[,]/g, " ") + " ");
                if (item.search(new RegExp(" " + value + " ")) === -1) {
                    this.appendValue(value);
                    global.input.elems[0].focus();
                    global.menu.hide();
                    return fastDev.Event.stopBubble(event);
                }
            }
        } else if (global.menu.isShow()) {
            item = !! (item = items.find("li.ui-list-selected[name='list" + global.sequence + "']")).elems[0] ? item : options.selectFirst ? items.find("li:first[name='list" + global.sequence + "']") : null;
            if ( !! item && item.hasElem()) {
                this.appendValue(global.items[item.attr("item")]);
                global.input.elems[0].focus();
                if (options.multiple) {
                    this.showHint();
                }
            }
        }
        if (!options.multiple) {
            global.menu.hide();
            global.items = {};
        }
        if (code === 13) {
            // 回车事件
            options.onEnterKeydown.call(this, this.getValue());
        }
    },
    /**
     * 按键改变事件处理
     * @private
     */
    "keyChangeHandle" : function () {
        var options = this._options,
            global = this._global,
            value = global.input.prop("value"),
            // 输入框的当前值
            keyword = fastDev.Util.StringUtil.ltrim(value || ""),
            cache;
        options.onchange.call(this, value);
        if (!keyword || keyword.length < options.minChars || global.isLoading) {
            if (!keyword) {
                this.showHint();
            }
            return;
        }
        global.keyword = keyword;
        if (options.allowCache && !! (cache = !options.initSource ? null : global.cache[keyword])) {
            this.constructItems(cache, false);
        } else {
            this.setTimer(global.doRetrieveHandle, Math.max(options.keyDelay - 10, 0));
        }
    },
    /**
     * 取得元素的值
     * @param {DomObject|Object|String|Record} item
     * @param {String} name
     * @param {Boolean} str
     * @private
     */
    "gainValue" : function (item, name, str) {
        if (!item) {
            return "";
        }
        var res = {};
        if ( !! item.elems && !! item.elems.length && typeof item.attr === "function" && typeof item.prop === "function") {
            res.value = fastDev.Util.StringUtil.trim(this.toStr(item.attr(name || "itemVal")) || this.toStr(item.prop(name || "value")) || this.toStr(item.attr("text")) || this.toStr(item.prop("text")));
            res.text = fastDev.Util.StringUtil.trim(this.toStr(item.attr(name || "text")) || this.toStr(item.prop(name || "text")) || res.value);
        } else {
            name = this.getMapping(name || "value");
            res = fastDev.Util.StringUtil.trim(this.toStr(item[name || ("expando" + fastDev.getID())]) || this.toStr(item.value) || this.toStr(item.text) || this.toStr(item));
        }
        if (str) {
            res = typeof res === "object" ? name ? res[name] || res.value : res.value || res.text : res;
        }
        return res;
    },
    /**
     * 作字符化处理
     * @param {Object} item
     * @private
     */
    "toStr" : function (item) {
        return typeof item === "string" || typeof item === "number" || typeof item === "boolean" ? item + "" : "";
    },
    /**
     * 显示提示信息
     * @param {String} tip
     * @private
     */
    "showTips" : function (tip) {
        var global = this._global,
            options = this._options,
            doc = global.pageContext.document,
            isLoading = tip === options.searchingText && !fastDev.Browser.isIE6;
        if ( !! tip && global.selectionCount < options.selectionLimit) {
            this.dataset.clean();
            global.menuItems.empty();
            global.menu.css("height", 20);
            fastDev(doc.createElement("span")).appendTo(fastDev(doc.createElement("div")).addClass("ui-list-item").addClass("ui-list-gray").css("overflow", "hidden").appendTo(global.custom.empty())).addClass(isLoading ? "ui-loading-indicator" : "").css("text-indent", isLoading ? "20px" : "0px").elems[0].innerHTML = tip;
            // 定位并展现下拉层
            this.position(global.menu, global.inputBox).show();
        }
    },
    /**
     * 获取字段映射
     * @param {String} name 需映射的字段名
     * @private
     */
    "getMapping" : function (name) {
        var options = this._options,
            fields = options.fields,
            length = fields.length;
            // 获取自定义映射
        while (length--) {
            if (fastDev.isPlainObject(fields[length]) && fields[length].mapping === name) {
                return fields[length].name;
            }
        }
        return name;
    },
    /**
     * 执行检索
     * @private
     */
    "doRetrieve" : function () {
        var options = this._options,
            global = this._global,
            keyword = global.keyword,
            params, len;
        if (options.onBeforeRetrieve.call(this, keyword) !== false) {
            if (!options.initSource) {
                len = options.items.length;
                // 本地数据源
                keyword = keyword.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
                var items = [],
                    igCase = options.matchCase ? "" : "i",
                    regx, value;
                value = (" " + global.valueInput.prop("value").replace(/[,]/g, " ") + " ");
                regx = options.matchContains ? new RegExp("(?:" + keyword + ")", "g" + igCase) : new RegExp("(?:^" + keyword + ")", igCase);
                while (len--) {
                    regx.lastIndex = 0;
                    if (regx.test(this.gainValue(options.items[len], "text", true)) && (options.multiple ? value.search(new RegExp(" " + this.gainValue(options.items[len], "value", true) + " ")) === -1 : true)) {
                        items.push(options.items[len]);
                        if (items.length === options.maxItems) {
                            break;
                        }
                    }
                }
                this.constructItems(items);
            } else {
				// 远程请求
                params = {};
                global.isLoading = true;
                global.requestCount++;
                fastDev.apply(params, options.extraParams);
                params[options.queryName] = keyword;
                this.initProxy.load(params, null, true);
                this.showTips(options.searchingText);
            }
        }
    },
    /**
     * 渲染提示菜单层
     * @param {Array|String|Object} data
     * @param {Boolean} hint
     * @param {String} keyword
     * @private
     */
    "renderMenu" : function (data, keyword, hint) {
        var global = this._global,
            options = this._options,
            max = options.maxItems,
            items = [],
            index = 0,
            record,
            label, regx, item, text;
        if (typeof options.resultRenderer === "function") {
            global.custom.empty().append(label = global.pageContext.document.createElement("div"));
            options.resultRenderer.call(this, label, data, keyword);
        } else {
            if (!hint) {
                global.items = {};
            }
            while ((record = data[index++]) && index <= max) {
                items.push({
                    text: text = this.gainValue(record, "text", true),
                    value: this.gainValue(record, "value", true),
                    item: item = fastDev.getID(),
                    label: options.itemRenderer.call(this, record, keyword) || text
                });
                global.items[item] = record;
            }
            this.dataset.clean();
            this.renderDynamicHtml(global.menuItems, "content", global.pageContext, items, true);
        }
        if (global.menu.height() > window.parseInt(global.menuHeight)) {
            global.menu.css("height", global.menuHeight);
        }
        // 定位并展现下拉层
        this.position(global.menu, global.inputBox)[(keyword || hint) ? "show" : "hide"]();
        if (options.keywordHighlight && !! keyword && !hint) {
			// 高亮关键字
            this.highlight(global.menu, keyword);
        }
    },
    /**
     * 渲染标签元素
     * @param {Array} items 标签值对象
     * @private
     */
    "renderLabel" : function (items) {
        var options = this._options,
            global = this._global,
            values = [],
            doc = document,
            len = items.length,
            item, value, uuid;
        while (len-- && global.selectionCount < options.selectionLimit) {
            value = this.gainValue(items[len]);
            if ( !! value && options.onAfterChoose.call(this, items[len]) !== false) {
                item = fastDev(doc.createElement("li"))
                // 添加至列表中
                .appendTo(global.selection)
                // 添加已选多值结果项样式
                .addClass("ui-autocomplete-item")
                // 设置名称标记
                .attr("name", "label" + global.sequence)
                // 当前标签值
                .attr("itemVal", value).attr("uuid", uuid = fastDev.getID());
                fastDev(doc.createElement("span"))
                // 添加标签值至子项中
                .appendTo(item)
                // 添加文本样式
                .addClass("ui-autocomplete-text")
                // 设置文本
                .setText(fastDev.Util.StringUtil.trim(items[len].text) || value);
                fastDev(doc.createElement("a"))
                // 添加标签关闭按钮
                .appendTo(item)
                // 添加关闭按钮样式名
                .addClass("ui-autocomplete-close");
                // 标记新的标签项
                global.newItem = item;
                item.hide();
                // 自适应标签宽度
                if (!this.adjustWidth(item.outerWidth(true))) {
                    item.show();
                }
                // 保存值
                values.push(value);
                global.values[uuid] = items[len];
                global.selectionCount++;
            }
        }
        if (options.disabled) {
            global.selection.find("li").addClass("ui-autocomplete-disabled");
        }
        if ( !! (item = global.valueInput.prop("value") || "")) {
            values.push(item.split(","));
        }
        global.valueInput.prop("value", values.join(","));
    },
    /**
     * 关闭标签
     * @param {DomObject} item 标签li
     * @private
     */
    "closeLabel" : function (item) {
        var options = this._options,
            global = this._global;
        if (!options.readonly && options.onBeforeRemove.call(this, global.values[item.attr("uuid")]) !== false) {
            var that = this,
                values = global.valueInput.prop("value").split(","),
                value = item.attr("itemVal") + "";
            fastDev.each(values, function (idx, val) {
                if (value === (val + "")) {
                    values.splice(idx, 1);
                    return false;
                }
            });
            global.valueInput.prop("value", values.join(","));
            delete global.values[item.attr("uuid")];
            item.remove();
            global.labelWidth = 0;
            global.input.hide();
            // 重计算大小
            global.selection.find("li").each(function (idx, elem) {
                (global.newItem = item = fastDev(elem).hide()).find("span").show();
                if (!that.adjustWidth(item.outerWidth(true))) {
                    item.show();
                }
            });
            global.input.show();
            if (!(--global.selectionCount)) {
                global.input.css("width", global.inputBox.width());
            }
        }
    },
    /**
     * 自适应调节标签的宽度
     * @param {Number} width 宽度增量值
     * @private
     */
    "adjustWidth" : function (width) {
        var global = this._global,
            browser = fastDev.Browser,
            inputWidth = global.inputBox.width() - (browser.isIE6 ? 5 : browser.isIE ? 3 : 1),
            item;
        // 输入框以最小宽度为82px来处理
        if (global.labelWidth + width + 82 > inputWidth) {
            if ( !! (item = !! (item = global.selection.find("span:visible:first")).elems[0] ? item : global.selection.find("li:visible:first")).elems[0]) {
                global.labelWidth -= item.outerWidth(true);
                item.hide();
                return this.adjustWidth(width);
            } else {
                // 输入框所在容器初始宽度小于82px
                global.input.css("width", inputWidth);
                return true;
            }
        } else {
            // 减少输入框宽度
            global.input.css("width", Math.max(inputWidth - (global.labelWidth += width), 20));
        }
    },
    /**
     * 定位元素
     * @param {fastDev.Core.DomObject} obj 需定位的对象
     * @param {fastDev.Core.DomObject} elem 相对其定位的元素
     * @return {fastDev.Core.DomObject} obj 定位对象
     * @private
     */
    "position" : function (obj, elem) {
		// 定位
        return fastDev.Util.PositionUtil.locate(obj.width(this._global.inputBox.innerWidth()), elem, this._options.inside ? window : fastDev.Util.PositionUtil.top, 1, true, this._options.direction);
    },
    /**
     * 高亮 显示关键字
     * @param {String|Element|DomObject|Component} element 需高亮的节点元素、控件或标签选择器
     * @param {String} keyword 需高亮显示的关键字
     * @param {String} [className] 高亮样式名，默认使用控件预设或用户配置的样式名
     * @return {fastDev.Ui.AutoComplte} 本控件实例
     */
    "highlight" : function (element, keyword, className) {
        if ( !! keyword && element && (fastDev.isDomObject(element) || fastDev.isComponent(element) || (element = fastDev(element || ("#e" + fastDev.getID()))).hasElem())) {
            var that = this,
                options = this._options,
                context = this._global.pageContext.fastDev,
                fx = context.Util.StringUtil.highlight,
                regx = new RegExp("(" + (options.matchContains ? "" : "^") + keyword.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&") + ")", options.matchCase ? "" : "i");
            fastDev.each(element.elems, function (idx, elem) {
                fx(elem, regx, "em", className || options.highlightCls);
            });
        }
        return this;
    },
    /**
     * 添加查询参数
     * 会覆盖之前添加的同名的查询参数
     * @param {Object} params 参数对象，仅接受普通的javascript对象（即使用"{}"声明的对象字面量），对象属性名为查询参数名，属性值为查询参数值
     * @return {fastDev.Ui.AutoComplete} 本控件实例
     */
    "setParam" : function (params) {
        if (fastDev.isPlainObject(params)) {
            fastDev.apply(this._options.extraParams, params);
        }
        return this;
    },
    /**
     * 设置静态数据
     * @param {Array|String|Object} 静态数据值
     * @return {fastDev.Ui.AutoComplete} 本控件实例
     */
    "setItems" : function (items) {
        var options = this._options;
        options.items = this.toArray(items);
        return this;
    },
    /**
     * 追加静态数据
     * @param {Array|String|Object} 静态数据值
     * @return {fastDev.Ui.AutoComplete} 本控件实例
     */
    "appendItems" : function (items) {
        return this.setItems(this._options.items.concat(this.toArray(items)));
    },
    /**
     * 设置输入框为空时的默认的提示项
     * @param {Array|String|Object} 提示项值
     * @return {fastDev.Ui.AutoComplete} 本控件实例
     */
    "setHintItems" : function (items) {
        this._options.hintItems = items;
        return this;
    },
    /**
     * 设置控件值
     * @param {Object} value 要设置的值
     * @return {fastDev.Ui.AutoComplete}
     */
    "setValue" : function (value) {
        this.reset();
        return this.appendValue(value);
    },
    /**
     * 单值模式时，等效于setValue，多值模式时，可追加新的值项（创建新的标签）
     * 多用于多值模式
     * @param {Object} value 要追加的值
     * @param {Boolean} noClose 追加值后不自动关闭提示层
     * @return {fastDev.Ui.AutoComplete}
     */
    "appendValue" : function (value, noClose) {
        var global = this._global,
            options = this._options,
            uuid;
        value = (value === undefined || value === null || value === "") ? "" : this.toArray(value);
        if ( !! value && !! value.length) {
            if (options.multiple) {
                global.input.hide();
                this.renderLabel(value);
                global.input.prop("value", "").show();
                if (global.handling) {
                    global.input.elems[0].focus();
                }
            } else {
                if (options.onAfterChoose.call(this, value[0]) !== false) {
                    global.input.prop("value", this.gainValue(value[0], "text", true));
                    delete global.values[global.valueInput.attr("uuid") || "0"];
                    global.valueInput.prop("value", this.gainValue(value[0], "value", true)).attr("uuid", uuid = fastDev.getID());
                    global.values[uuid] = value[0];
                }
            }
        }
        if (!noClose) {
            global.menu.hide();
            global.items = {};
        }
        return this;
    },
    /**
     * 清理所有静态数据 （同时会重置输入框当前值为空）
     * @return {fastDev.Ui.AutoComplete} 本控件实例
     */
    "clean" : function () {
        return this.setHintItems(false).setItems([]).reset();
    },
    /**
     * 清理所有已选标签值或者输入框的当前值（重置输入框值为空）
     * @return {fastDev.Ui.AutoComplete} 本控件实例
     */
    "reset" : function () {
        var options = this._options,
            global = this._global;
        window.clearTimeout(global.timer);
        global.input.prop("value", "");
        global.valueInput.prop("value", "");
        global.labelWidth = 0;
        global.keyword = "";
        global.prevInputValue = "";
        if (options.multiple && !! global.selectionCount) {
            global.selection.empty();
            global.selectionCount = 0;
            global.input.css("width", global.inputBox.innerWidth());
        }
        global.menu.hide();
        global.items = {};
        return this;
    },
    /**
     * 获取输入框值的原始数据对象数组
     * @return {Array}
     */
    "getItems" : function () {
        var options = this._options,
            global = this._global,
            items = [],
            item;
        if (options.multiple) {
            global.selection.find("li").each(function (elem) {
                items.push(global.values[fastDev(elem).attr("uuid")]);
            });
        } else if (item = global.values[global.valueInput.attr("uuid") || "0"]) {
            items.push(item);
        }
        return items;
    },
    /**
     * 获取输入框的值
     * @return {String}
     */
    "getValue" : function () {
        return this._global[this._options.multiple ? "valueInput" : "input"].prop("value");
    },
    /**
     * 禁用本控件
     * @return {fastDev.Ui.AutoComplete} 本控件实例
     */
    "disable" : function () {
        var global = this._global,
            options = this._options;
        if (!options.disabled) {
            window.clearTimeout(global.timer);
            global.inputBox.addClass("ui-form-disabled");
            global.valueInput.prop("disabled", "disabled");
            if (options.multiple && !! global.selectionCount) {
                global.selection.find("li").addClass("ui-autocomplete-disabled");
            }
            this.setReadonly(true);
            global.menu.hide();
            options.disabled = true;
        }
        return this;
    },
    /**
     * 启用本控件
     * @return {fastDev.Ui.AutoComplete} 本控件实例
     */
    "enable" : function () {
        var global = this._global,
            options = this._options;
        if (options.disabled) {
            options.disabled = false;
            global.inputBox.removeClass("ui-form-disabled");
            global.valueInput.prop("disabled", "");
            if (options.multiple && !! global.selectionCount) {
                global.selection.find("li").removeClass("ui-autocomplete-disabled");
            }
            this.setReadonly(false);
        }
        return this;
    },
    /**
     * 设置是否只读
     * @param {Boolean} [readonly=true] 是否只读
     * @return {fastDev.Ui.AutoComplete} 本控件实例
     */
    "setReadonly" : function (readonly) {
        var options = this._options;
        if (!options.disabled) {
            options.readonly = readonly === false ? false : true;
            this._global.input.prop("readonly", options.readonly ? "readonly" : "");
        }
        this.superClass.setReadonly.call(this, readonly);
        return this;
    }
});
/**
 * @class fastDev.Ui.Button
 * @extends fastDev.Ui.Component
 * 按钮控件，支持链接按钮、图片按钮，图文按钮、文本按钮、下拉按钮等展示形式。继承自component基类，表单类控件。<p>
 * 作者：姜玲
 *
 *		 <div itype="Button" text="添加" iconCls="icon-add"></div>
 */
fastDev.define("fastDev.Ui.Button", {
	"extend" : "fastDev.Ui.Component",
	"alias" : "Button",
	"_options" : {
		/**
		 * @cfg {String} text
		 * 按钮文本
		 * @removed 已作废，推荐使用 {@link #value}
		 */
		"text" : "",
		/**
		 * @cfg {Array{JsonObject}} subItems
		 * 定义下拉条目，如果没定义则为普通的按钮，否则为下拉按钮
		 * @removed 已作废，推荐使用 {@link #items}
		 */
		"subItems" : null,
		/**
		 * @cfg {String} [value="Button"]
		 * 按钮显示文本
		 */
		"value" : "",
		/**
		 * @cfg {String} tips
		 * 鼠标悬停在按钮上时显示的提示文本
		 */
		"tips" : "",
		/**
		 * @cfg {String} iconCls
		 * 按钮图标样式名
		 * 控件库样式表中自带icon-search(搜索)、icon-add(增加)、icon-edit(编辑)、icon-delete(删除)、icon-accept(确认)、icon-undo(还原)、
		 * icon-org(组织结构)、icon-business(业务结构)、icon-sort(排序)、icon-return(返回)、icon-next(下一步)、icon-export(导出)、
		 * icon-login(登陆)、icon-up(向上)、icon-down(向下)、icon-print(打印)
		 */
		"iconCls" : "",
		/**
		 * @cfg {String|JsonObject} iconStyle
		 * 按钮图标样式，如果只有一个样式，直接写“键:值”字符串，多个样式写json格式
		 */
		"iconStyle" : "",
		/**
		 * @cfg {String} [iconPosition="left"]
		 * 按钮图标与文字显示结构
		 * left : 左右结构
		 * top : 上下结构
		 */
		"iconPosition" : "left",
		/**
		 * @cfg {String} [href="#@"]
		 * 链接的目标 URL
		 */
		"href" : "#@",
		/**
         * @cfg {Boolean} [inside=true]
         * 是否在当前页面内展现弹出层
         * 该配置属性为false值时，结果弹出层将尝试跨Iframe定位展现
         */
		"inside" : true,
		/**
		 * @cfg {String} [target="_self"]
		 * 在何处打开目标 URL
		 * _blank : 在新窗口中打开被链接文档
		 * _self : 在相同的框架中打开被链接文档
		 * _parent : 在父框架集中打开被链接文档
		 * _top : 在整个窗口中打开被链接文档
		 * framename : 在指定的框架中打开被链接文档
		 */
		"target" : "_self",
		/**
		 * @cfg {Boolean} [plain=false]
		 * 背景是否透明
		 */
		"plain" : false,
		/**
		 * @cfg {String} width
		 * 按钮宽度，默认为空使按钮自适应文字以及图标宽度
		 */
		"width" : "",
		/**
		 * @cfg {Boolean} [disabled=false]
		 * 是否禁用按钮
		 */
		"disabled" : false,		
		/**
		 * @cfg {Boolean} [showMenuOnMouseover=false]
		 * 配置为true时，鼠标滑过即显示按钮下拉项，否则需要点击按钮才会显示
		 */
		"showMenuOnMouseover" : false,
		/**
		 * @event onclick
		 * 按钮点击事件
		 * @param {Event} event 当前事件对象
		 */
		"onclick" : fastDev.noop,
		// 使用父类文档说明
		"enableInitProxy" : false,
		// 使用父类文档说明
		"enableDataProxy" : false,
		// 使用父类文档说明
		"enableDataSet" : false
	},
	"_global" : {
		// html元素DomObj对象
		"html" : null,
		// 按钮DomObj对象
		"button" : null,
		// 按钮文本DomObj对象
		"buttonText" : null,
		// 下拉项DomObj对象
		"buttonList" : null,
		// 按钮下拉图标DomObj对象
		"buttonArrow" : null,
		// 下拉项面板DomObj对象
		"buttonListPanel" : null,
		// 按钮背景透明样式
		"plainCls" : "ui-button-plain",
		// 按钮圆角样式
		"radiusCls" : "ui-button-radius",
		// 按钮空文本样式
		"notextCls" : "ui-button-text-no",
		// 按钮背景按钮
		"bgCls" : "ui-button-bg",
		//
		"iconCls" : "ui-button-icon",
		// 图标与文字呈上下结构样式
		"topPositionCls" : "ui-button-ico-top",
		// 鼠标悬停时按钮样式
		"overCls" : "",
		// 鼠标悬停子项时按钮样式
		"listOverCls" : "ui-button-list-over",
		// 按钮禁用样式
		"disableCls" : "",
		// 按钮样式
		"btnCls" : "",
		// 是否配置有下拉按钮子项
		"hasItem" : false
	},
	/**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
	"template" : [
		'<a class="ui-button #{btnCls}" id="#{id}" href="#{href}" target="#{target}">',
			'<em class="ui-button-em" style="width:#{width}">',
				'<span class="ui-button-text #{textCls}" title="#{tips}">#{text}</span>',
				'<tpl if(#{hasItem})>',
					'<span class="icon-arrow"></span>',
				'</tpl>',
			'</em>',
		'</a>',
		'<tpl if(#{hasItem})>',
			'<div class="ui-button-list ui-shadow ui-hidden"></div>',
		'</tpl>',
		'<tpl dynamic>', 
			'<tpl each>', 
				'<a><span class="ui-button-list-text">{text}</span></a>',
			'</tpl>',
		'</tpl>'
	],
	/**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
	"tplParam" : ["text", "tips", "hasItem", "btnCls", "width", "textCls", "href", "target", "id"],
	/**
	 * @property {Array[String]|Array[JsonObject]} fields
	 * 控件数据集所依赖的数据结构定义
	 * @readonly 
	 */
	"fields" : ["text"],
	// 使用父类文档说明
	"ready" : function(options,global){
		var classes, btnCls = [global.radiusCls];
		
		// 已作废的配置项text配置与新配置value之间的兼容处理
		options.value = options.value || options.text;
		// 已作废的配置项subItems配置与新配置items之间的兼容处理
		// 判断当前控件是否拥有下拉子项，如果用的话开启控件数据集
		if(global.hasItem = !!(options.items = options.items || options.subItems)){
			options.enableDataSet = true;
		}
		// 图片按钮或者配置为背景透明时使用透明样式否则使用背景样式
		btnCls.push((!options.value || options.plain) ? global.plainCls : global.bgCls);
		// 应用用户指定样式
		if(options.cls && btnCls.push(options.cls));
		// 应用用户指定图标样式，按钮配置了文本和图标时加上图标基础样式，否则使用空文本样式
		global.textCls = (options.value ? 
			(options.iconCls || options.iconStyle) ? 
				global.iconCls : "" : global.notextCls) + " " + options.iconCls;
		// 应用用户配置宽度，默认宽度为自适应按钮文本
		options.width = options.width ? global.width + "px" : "";
		// 当按钮中图标和文字为上下结构时，调整默认的左右结构样式改为上下结构样式
		global.overCls = (options.iconPosition === "top" ? 
			btnCls[btnCls.length] = global.topPositionCls : (options.cls && (classes = options.cls.split(' ')) ? 
				classes[classes.length-1] : "ui-button")) + "-over";
		// 当按钮中图标和文字为上下结构时，调整默认的左右结构禁用样式改为上下结构的禁用样式
		global.disableCls = (options.iconPosition === "top" ? 
			global.topPositionCls : (classes ? 
				classes[classes.length-1] : "ui-button")) + "-disabled";
		// 生成最终按钮样式字符串			
		global.btnCls = btnCls.join(' ');
	},
	"construct" : function(options, global){
		// 缓存按钮结构
		global.button = fastDev(this.elems[0]);
		//
		global.buttonListPanel = fastDev(this.elems[1]);
		//
		global.html = fastDev("html");
		// 缓存按钮文本所在容器
		global.buttonText = global.button.first().first();
		
		if(global.hasItem){
			global.buttonArrow = global.buttonText.next();
		}
	},
	// 使用父类文档说明
	"init" : function(options, global) {
		// 缓存常用Dom，避免重复查询
		var btn= this.find(".ui-button");
		// 样式功能初始化
		global.buttonText.css(options.iconStyle);
		// 按钮的鼠标滑入句柄
		global.buttonMouseoverHandle = fastDev.setFnInScope(this, this.buttonMouseoverHandle);
		// 按钮的鼠标滑出句柄
		global.buttonMouseoutHandle = fastDev.setFnInScope(this, this.buttonMouseoutHandle);
		// 子项面板事件代理句柄
		global.buttonListPanelClickHandle = fastDev.setFnInScope(this, this.buttonListPanelClickHandle);
		// 按钮单击事件句柄
		if(!fastDev.isNoop(options.onclick)){
			global.onclick = fastDev.setFnInScope(this, options.onclick);
		}
		
		// 初始化下拉项的鼠标滑入和滑出事件，对应更新按钮样式
		if(global.hasItem){
			// 按钮单击事件句柄
			global.buttonClickHandle = fastDev.setFnInScope(this, this.buttonClickHandle);
			// 下拉项滑入事件句柄
			global.buttonListMouseoverHandle = fastDev.setFnInScope(this, this.buttonListMouseoverHandle);
			// 下拉项滑出事件句柄
			global.buttonlistMouseoutHandle = fastDev.setFnInScope(this, this.buttonlistMouseoutHandle);
			// 页面单击事件句柄
			global.htmlClickHandle = fastDev.setFnInScope(this, this.htmlClickHandle);
		}
		
		// 初始化按钮状态
		if(options.disabled && ((options.disabled = false) || this.disable()) || (options.disabled = true) && this.enable());
	},
	// 使用父类文档说明
	"constructItems" : function(options, global){
		if(global.hasItem){
			this.renderDynamicHtml(global.buttonListPanel);
			
			global.buttonList = global.buttonListPanel.children();
		}
	},
	/**
	 * 鼠标划入按钮响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"buttonMouseoverHandle" : function(event){
		var options = this._options, global = this._global;
		
		global.button.addClass(global.overCls);
		
		if(global.hasItem && options.showMenuOnMouseover && this.showButtonList(global.button, global.buttonListPanel));
	},
	/**
	 * 鼠标划出按钮响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"buttonMouseoutHandle" : function(event){
		var global = this._global;
		
		global.button.removeClass(global.overCls);
	},
	/**
	 * 单击按钮响应事件 ,用于弹出下拉项
	 * @param {Event} event 事件对象
	 * @private
	 */
	"buttonClickHandle" : function(event){
		this.showButtonList(this._global.button, this._global.buttonListPanel);
	},
	/**
	 * 鼠标滑入下拉项响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"buttonListMouseoverHandle" : function(event){
		fastDev(event.target).addClass(this._global.listOverCls);
	},
	/**
	 * 鼠标滑出下拉项响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"buttonlistMouseoutHandle" : function(event){
		fastDev(event.target).removeClass(this._global.listOverCls);
	},
	/**
	 * 鼠标单击控件所在页面响应句柄
	 * @param {Event} event 事件对象
	 * @private
	 */
	"htmlClickHandle" : function(event){
		var 
			global = this._global,
			button = global.button,
			target = fastDev(event.target),
			targetKey = target.parents("[eventkey]:first").attr("eventkey"),
			buttonKey = button.attr("eventkey");
		
		if(targetKey !== buttonKey){
			button.removeClass(global.overCls);
			if(global.buttonListPanel.isShow()){
				global.buttonListPanel.hide();
			}
		}
	},
	/**
	 * 鼠标单击下拉项响应句柄
	 * @param {Event} event 事件对象
	 * @private
	 */
	"buttonListPanelClickHandle" : function(event){
		var item = this.dataset.select(function(index, record){ 
			return record.text === fastDev(event.target).text(); 
		})[0];
		
		if(item.onclick && item.onclick(event));
	},
	/**
	 * 展示下拉按钮
	 * @private
	 */
	"showButtonList" : function(button, buttonListPanel) {
		var offset = button.offset();
		
		buttonListPanel.css({
			"top" : offset.top + button.outerHeight() - 1,
			"left" : offset.left,
			"width" : button.width()
		});
		
		if(buttonListPanel.isShow() === false){
			buttonListPanel.show();
		}
	},
	/**
	 * 改变当前组件禁用/启用状态
	 * @param {String} oper bind/unbind
	 * @param {String} oper addClass/removeClass
	 * @param {Boolean} disable true/false
	 * @private 
	 */
	"changeState" : function(oper, method, disable){
		var 
			options = this._options,
			global = this._global, 
			state = disable ? "disable" : "enable";
		
		// 目标状态与当前状态一致则当前操作无效
		if(options.disabled === disable) {
			return;
		}
		options.disabled = !options.disabled;
		
		// 绑定/取消按钮的鼠标滑入和滑出事件，对应更新按钮样式
		global.button[oper]("mouseover", global.buttonMouseoverHandle)[oper]("mouseout", global.buttonMouseoutHandle);
		// 绑定/取消子项面板事件代理，用于管理子项单击事件
		global.buttonListPanel[oper]("click", global.buttonListPanelClickHandle);
		// 绑定/取消用户所配置的按钮单击事件
		if(global.onclick && global.button[oper]("click", global.onclick));
		
		if(global.hasItem){
			if(!options.disabled){
				// 绑定/取消按钮单击事件，用于弹出下拉项面板
				global[fastDev.isNoop(options.onclick) ? "button" : "buttonArrow"][oper]("click", global.buttonClickHandle);
				// 绑定/取消下拉项滑入滑出事件，对应更新下拉项样式
				global.buttonList[oper]("mouseover", global.buttonListMouseoverHandle)[oper]("mouseout", global.buttonlistMouseoutHandle);
				// 绑定/取消页面单击事件，用于关闭子项弹出面板
				global.html[oper]("click", global.htmlClickHandle);
			}
		}
		// 改变按钮状态样式
		global.button[method](global.disableCls);
		
		return this;
	},
	/**
	 * 启用按钮
	 */
	"enable" : function() {
		return this.changeState("bind", "removeClass", false);
	},
	/**
	 * 禁用控件
	 */
	"disable" : function() { 
		return this.changeState("unbind", "addClass", true);
	},
	/**
	 * 设置按钮文本
	 * @param {string}
	 */
	"setText" : function(text){
		if(text){
			this._global.buttonText.text(text);
		}
	}
});
/**
 * @class fastDev.Ui.CheckBoxGroup
 * @extends fastDev.Ui.Component
 * 复选框组控件，继承自component，表单类组件。<p>
 * 作者： 姜玲
 *
 *		<div itype="CheckBoxGroup"  id="check2">
 *		  <div value="1" text="足球" checked=true></div>			
 *		  <div value="2" text="排球" checked=true></div>
 *		  <div value="3" text="羽毛球"></div>
 *		  <div value="4" text="乒乓球"></div>
 *		</div>
 */
fastDev.define("fastDev.Ui.CheckBoxGroup", {
	"extend" : "fastDev.Ui.Component",
	"alias" : "CheckBoxGroup",
	"_options" : {		
		/**
		 * @cfg {Number} repeatItems
		 * 每行或每列有几个复选框
		 */
		"repeatItems" : null,
		/**
		 * @cfg {String} itemWidth
		 * 每列的宽度
		 */
		"itemWidth" : "",
		/**
		 * @cfg {String} itemHeight
		 * 每列的高度
		 */
		"itemHeight" : "",
		/**
		 * @cfg {String} [repeatDirection="horizontal"]
		 * 布局的方式，支持以下值：
		 * vertical：竖向排列
		 * horizontal：横向排列
		 */
		"repeatDirection" : "horizontal",
		/**
		 * @cfg {String} items
		 * 用于设置控件的初始项
		 */
		"items" : null,
		/**
		 * @cfg {String} name
		 * 控件名称
		 */
		"name" : "",
		/**
		 * @cfg {Boolean} [disabled=false]
		 * 设置是否禁用
		 */
		"disabled" : false,
		/**
		 * @cfg {Boolean} [hide=false]
		 * 设置是否隐藏
		 */
		"hide" : false,
		/**
		 * @cfg {String} value
		 * 设置选中值
		 */
		"value" : "",
		/**
		 * @cfg {Boolean} [allowMultiSelect=true]
		 * 是否允许多选
		 */
		"allowMultiSelect" : true,
		/**
		 * @cfg {Boolean} [onlyOneValueIsBoolean=true]
		 * 只有一个选项时选中结果是否为Boolean值
		 */
		"onlyOneValueIsBoolean":true,
		/**
		 * @cfg {String} [validateMode="none"]
		 * 验证模式，支持以下值：
		 * none：不验证(默认)
		 * blur：失去焦点时验证
		 */
		"validateMode":"none",
		/**
		 * @cfg {String} rule
		 * 校验的规则
		 */
		"rule":"",
		/**
		 * @cfg {JsonObject} errorConfig
		 * 验证错误的提示消息配置
		 */
		"errorConfig" : null,
		/**
		 * @event onchange
		 * 值改变时发生
		 * @param {Event} event 当前事件对象
		 * @param {String} item 被点击的子项数据
		 */
		"onchange" : fastDev.noop,
		/**
		 * @event onfocus
		 * 当元素获得焦点时触发
		 * @removed 已作废，推荐使用 {@link #onchange}
		 */
		"onfocus" : fastDev.noop,
		/**
		 * @event onblur
		 * 当元素失去焦点时触发
		 * @removed 已作废，推荐使用 {@link #onchange}
		 */
		"onblur":fastDev.noop,
		/**
		 * @event onBeforeValidation
		 * 验证前发生触发
		 */
		"onBeforeValidation" : fastDev.noop,
		/**
		 * @event onAfterValidation
		 * 验证后发生触发
		 */
		"onAfterValidation" : fastDev.noop
	},
	"_global" : {
		// 控件子项面板
		"panel" : null,
		//多选框类型
		"type" : "checkbox",
		//控件面板容器
		"condiv":null,
		//验证时用的容器
		"box":null,
		//页面单击事件
		"bodyClick":null,
		//是否得到焦点
		"infocus":false,
		//数据长度
		"itemsLen":0,
		//每组多选框右边流出的空白宽度
		"rightWidth":15,
		//验证提示与控件的边距值
		"margins":10,
		//鼠标悬停的样式
		"labelOverCls":"ui-label-over"
	},
	/**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
	"template" : [
		'<div id="#{id}" class="ui-fakeborder #{cls}">', 
			'<tpl dynamic>', 
				'<tpl each>',
					'<tpl if(#{repeatDirection}=="vertical" && #{repeatItems}&gt;1 && (rowid==1 || rowid%#{repeatItems}==1))>', 
						'<div class="ui-labelgroup">', 
					'</tpl>', 
						'<div class="ui-form ui-#{type} ui-label-item"><label>',
					'<tpl if({checked})>',
						'<div class="ui-label-ico ui-label-checked" name="#{name}" value="{value}" text="{text}"></div>', 
					'<tpl else>', 
						'<div class="ui-label-ico" name="#{name}" value="{value}" text="{text}"></div>', 
					'</tpl>', 
					'<div class="ui-label-text">{text}</div></label></div>', 
					'<tpl if(#{repeatDirection}=="vertical" && #{repeatItems}&gt;1 && (rowid==#{itemsLen} || rowid%#{repeatItems}==0))>', 
						'</div>', 
					'</tpl>', 
				'</tpl>', 
			'</tpl>', 
		'</div>'
	],	
	/**
	 * @property {Array} template
	 * 错误提示信息模板
	 * @readonly
	 */
	"errorTemplate" : ['<div class="ui-tips-text ui-radius ui-shadow"></div>'],
	/**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
	"tplParam" : ["type", "name", "repeatDirection", "repeatItems", "itemsLen","id","cls"],
	/**
	 * @property {Array} fields
	 * 控件所对应的数据模型定义
	 * @readonly
	 */
	"fields" : ["value", "text", {
		"name" : "checked",
		"type":"Boolean",
		"defaultValue" : false
	}],
	// 使用父类文档说明
	"ready" : function(options, global) {
		if(!options.name){
			(options.name = "chk" + fastDev.getID());
		}
		if(!options.repeatItems){
			 if(options.repeatDirection === "vertical"){
				options.repeatItems = 1;
			 }else{
				options.repeatItems = 0;
			 }
		}
		if(!options.allowMultiSelect){
			global.type = "radio";
		}
	},
	// 使用父类文档说明
	"construct" : function(options,global){		
		global.panel = fastDev(this.elems[0]);
		if(!!this.proxyConfig){
			this.proxyConfig.reader = {type:"json"};
		}
	},
	// 使用父类文档说明
	"init" :function(options, global){		
		var me=this;
		// 鼠标滑入复选框事件句柄
		global.panel.bind("mouseover",fastDev.setFnInScope(this, this.checkboxMouseoverHandle));
		// 鼠标滑出复选框事件句柄
		global.panel.bind("mouseout",fastDev.setFnInScope(this, this.checkboxMouseoutHandle));
		// 复选框单击事件句柄
		global.panel.bind("click",fastDev.setFnInScope(this, this.checkboxClickHandle));
		// 验证处理
		if(options.validateMode !== "none") {
			this.onBlur(fastDev.setFnInScope(me, me.validate));
		}
	},
	// 使用父类文档说明
	"constructItems" : function(options, global) {		
		this._global.itemsLen = this.dataset.getSize();
		this.renderDynamicHtml(global.panel);
		this.setConstruct();
	},
	/**
	 * 设置控件属性
	 * @private
	 */
	"setConstruct" : function() {
		var options = this._options, condiv = this.find(".ui-form"),width=options.itemWidth;
		this._global.condiv=condiv;
		// 设置为横向或纵向布局		
		if(options.repeatDirection === "horizontal"){
			this.setHorizontal();
		}else{
			this.setVertical();	
		}
		if(width===""){			
			width=this.getMaxWidth(condiv.elems);
		}
		if(parseInt(width,10) > 0){
			condiv.css("width",width);
		}
		if(options.itemHeight){
			condiv.css("height", options.itemHeight);
		}
		if(options.disabled){
			this.disabled();
		}
		if(options.hide){
			this.hide();
		}		
		//设置控件的值
		if(options.value || options.value===0){
			this.addValue(options.value);
		}
		//设置控件组的宽度
		fastDev(this.elems[0]).removeCss("width");
		var maxright=this.getMaxRight(condiv.elems);
		if(parseInt(maxright,10) >this._global.rightWidth){
			fastDev(this.elems[0]).width(maxright);
		}		
	},
	/**
	 * 鼠标滑入复选框响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"checkboxMouseoverHandle" : function(event){
		var label = this.getLabel(event);
		if(label && label.hasClass(this._global.labelOverCls) === false){
			label.addClass(this._global.labelOverCls);
		}
	},
	/**
	 * 鼠标滑出复选框响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"checkboxMouseoutHandle" : function(event){
		var label = this.getLabel(event);
		if(label){
			label.removeClass(this._global.labelOverCls);
		}			
	},
	/**
	 * 单击复选框响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"checkboxClickHandle" : function(event){
		var me=this,options=this._options, label = me.getLabel(event), item = {};
			if(label) {
				me._global.infocus=true;
				var input = label.find(".ui-label-ico");
				if(input.hasClass("ui-label-checked")) {
					input.removeClass("ui-label-checked");
					item.checked = false;
				} else {
					if(options.allowMultiSelect) {
						input.addClass("ui-label-checked");
					} else {
						me.find(".ui-label-ico").removeClass("ui-label-checked");
						input.addClass("ui-label-checked");
					}
					item.checked = true;
				}
				if(options.onchange !== fastDev.noop) {
					item.value = input.attr("value");
					item.text = input.attr("text");
					options.onchange.call(this,event,item);	
					me.onFocus();
				}
			}			
	},
	
	/**
	 * 得到最大right值
	 * @param {Object} 控件容器
	 * @private
	 */
	"getMaxRight" : function(condiv){
		var maxRight=0,len=condiv.length,con,firstLeft=0;
		for(var i=0;i<len;i++){			
			con=fastDev(condiv[i]);
			if(i===0){
				firstLeft=con.offset().left;
			}
			maxRight=Math.max(maxRight,con.offset().left+con.width());
		}
		return maxRight-firstLeft+this._global.rightWidth+"px";
	},
	/**
	 * 得到最大宽度
	 * @private
	 */
	"getMaxWidth" : function(condiv){
		var maxWidth=0,len=condiv.length,con;
		for(var i=0;i<len;i++){
			con=fastDev(condiv[i]);
			maxWidth=Math.max(maxWidth,con.width());
		}
		return maxWidth+"px";
	},
	/**
	 * 得到label
	 * @private
	 */
	"getLabel" : function(event) {
			var target = event.target, label, evobj = fastDev(target);
			if(evobj.hasClass("ui-label-text") || evobj.hasClass("ui-label-ico")) {
				label = evobj.parent("label");
			} else if(evobj.hasClass("ui-form")) {
				label = evobj.children();
			} else {
				label = evobj;
			}
			if(label.find(".ui-label-disable").elems.length > 0 || label.find(".ui-label-checked-disable").elems.length > 0) {
				return null;
			}
			return label;
	},
	
	/**
	 * 得到焦点
	 * @param {Function} handle
	 */
	"onFocus":function(handle){
		return this;
	},
	/**
	 * 失去焦点
	 * @param {Function} handle
	 */
	"onBlur":function(handle){
		//绑定失去焦点事件
		var me = this;
		if(handle){			
			var bodyClick=function(event){
				var target = event.target;
				if(!fastDev(me.elems[0]).contains(target) && me._global.infocus){
					me._global.infocus=false;
					me.blur(event,handle);
				}
			};
			this._global.bodyClick=bodyClick;
			fastDev("body").bind("click",bodyClick);			
		}
		return this;
	},
	/**
	 * 执行失去焦点
	 * @private
	 */
	"blur":function(event,handle){
		//让控件失去焦点
		handle(event);
		return this;
	},
	/**
	 * 执行得到焦点
	 * @private
	 */
	"focus":function(){
		return this;
	},
	/**
	 * 合并控件的值
	 * @param {Array} value 值
	 * @private
	 */
	"addValue" : function(value) {
		if(value) {			
			if(fastDev.isString(value)){
				if(value.indexOf(",")>0){
					value=value.replace("[","").replace("]","");
					value=value.replace(/"/g,"");
					value=value.split(',');
				}else{
					value = [value];
				}
			}
			if(fastDev.isNumber(value)){
				value = [value];
			}			
			var controlList = this.find(".ui-label-ico").elems,con;
			while(value.length > 0) {
				var v = value.pop();
				for(var i = 0; i < controlList.length; i += 1) {
					con=fastDev(controlList[i]);
					if(con.attr("value") === "" + v) {
						if(!this._options.allowMultiSelect) {
							this.unCheck();
							if(this._options.disabled){
								con.addClass("ui-label-checked-disable");
							}else{
								con.addClass("ui-label-checked");
							}
							break;
						} else {
							if(this._options.disabled){
								con.addClass("ui-label-checked-disable");
							}else{
								con.addClass("ui-label-checked");
							}
						}
					}
				}
			}
		}
	},
	/**
	 * 设置控件的值，会先清空
	 * @param {Array} value 值
	 */
	"setValue" : function(value) {
		if(value === null || value===""){
			return;
		}
		
		var control = this.find(".ui-label-ico"),len= control.elems.length;
		if(len===1 && typeof value === "boolean"){
			if(value){
				control.addClass("ui-label-checked");
			}else{
				control.removeClass("ui-label-checked");
			}
		}else{
			if(typeof value==="number"){
				value=""+value;
			}
			if(value.length>0){
				this.unCheck();
				this.addValue(value);
			}
		}
	},
	/**
	 * 获取控件选中项的值
	 * @return {Array}
	 */
	"getValue" : function() {		
		var controlList = this.find(".ui-label-ico").elems,options=this._options,
		onlyOneValueIsBoolean=options.onlyOneValueIsBoolean,
		result =[],con,n=0,len= controlList.length;
		//只有一个选项时，默认值为Boolean类型
		if(len===1 && onlyOneValueIsBoolean){
			con=fastDev(controlList[0]);
			return con.hasClass("ui-label-checked");
		}else{
			for(var i = 0; i < len; i += 1) {
				con=fastDev(controlList[i]);
				if(con.hasClass("ui-label-checked") || con.hasClass("ui-label-checked-disable") ) {
					result[n]=con.attr("value");
					n+=1;
				}
			}
			if(options.allowMultiSelect) {
				return result.length > 0 ?  result :"";
			}else{
				return result.length > 0 ?  result[0] :"";
			}
		}
	},
	/**
	 * 获取控件选中项的值
	 * @return {String}
	 */
	"getValueStr" : function() {
		var value=this.getValue();
		if(value===true){
			return this.find(".ui-label-ico").attr("value");
		}else{
			return value.join(",");
		}
	},
	/**
	 * 设置为竖向排列
	 * @private
	 */
	"setVertical" : function() {
		var options = this._options, cdiv = this.find(".ui-labelgroup"), condiv = this._global.condiv;
		if(options.itemWidth) {
			cdiv.css("width", options.itemWidth);
		} else if(options.repeatItems) {
			var lastWidth = this.getItemWidth(options);
			cdiv.css("width", lastWidth);
			condiv.css("width", "100%");
		}
	},
	/**
	 * 增加选项
	 * @param {JsonObject/Array[JsonObject]} items
	 */
	"addItems" : function(items) {
		// 数据兼容性处理
		if(!fastDev.isArray(items)) {
			items = [items];
		}
		var value = this.getValue();		
		// 保存数据至数据集
		this.dataset.fill(items);
		// 重新初始化动态模板内容
		this.constructItems();
		// 重新设置当前选中项
		this.setValue(value);
	},
	/**
	 * 算出项宽度
	 * @private
	 */
	"getItemWidth":function(options){
		  var width = (100 / options.repeatItems);
		  var containerWidth = fastDev(options.container).width();
		  var lastWidth = fastDev.Util.StringUtil.stripUnits(width + "%", containerWidth) -11;//每个都有10px的外边距，为防止除法四舍五入时有误差，多减去1
		  if(fastDev.Browser.isIE6){
			lastWidth = width - 1 + "%";
		  }
		  return lastWidth;
	},
	/**
	 * 设置为横向排列
	 * @private
	 */
	"setHorizontal" : function() {
		var options = this._options, div = fastDev(this.elems[0]), condiv =this._global.condiv;
		condiv.addClass("ui-label-inline");
		if(options.repeatItems) {
			var lastWidth = this.getItemWidth(options);
			condiv.css("width", lastWidth);
		}
	},
	/**
	 * 设置每个复选框的宽度
	 * @param {String} width宽度
	 */
	"setItemsWidth" : function(width) {
		var condiv =this._global.condiv;
		condiv.css("width", width);
	},
	/**
	 * 获取控件选中项的值和文本
	 * @return {Array}
	 */
	"getCheckedItems" : function(isjson) {
		var value, text, data, controlList = this.find(".ui-label-ico").elems, result = "",con;
		for(var i = 0; i < controlList.length; i += 1) {
			con=fastDev(controlList[i]);
			if(con.hasClass("ui-label-checked") === true) {
				value = con.attr("value");
				text = con.attr("text");
				data = "{value:\"" + value + "\",text:\"" + text + "\"}";
				if(result.length > 0){
					result += "," + data;
				}else{
					result += data;
				}
			}
		}
		if(isjson){			
			var Fn = Function;			
			return (new Fn("return [" + result + "]"))();
		}else{
			return "[" + result + "]";
		}
	},
	/**
	 * 禁用控件
	 * @removed 已作废，推荐使用 {@link #disable}
	 */
	"disabled" : function() {
		this.find(".ui-label-ico").addClass("ui-label-disable");
		this.find(".ui-label-ico.ui-label-checked").removeClass("ui-label-checked").addClass("ui-label-checked-disable");
	},
	/**
	 * 禁用控件
	 */
	"disable" : function(){
		this.disabled();
	},
	/**
	 * 清空方法
	 */
	"unCheck" : function() {
		this.find(".ui-label-ico.ui-label-checked").removeClass("ui-label-checked");
	},
	/**
	 * 清空选项方法
	 */
	"clean" : function(){
		this.reset();
		this.dataset.clean();
		this.dataset.remove();
		this.constructItems();
		return this;
	},
	/**
	 * 清空值方法
	 */
	"reset" : function(){
		this.unCheck();
	},
	/**
	 * 全选方法　
	 */
	"allCheck" : function() {
		this.find(".ui-label-ico").addClass("ui-label-checked");
	},
	/**
	 * 反选方法
	 */
	"invertCheck" : function() {
		this.find("[class='ui-label-ico']").addClass("ui-label-checked1");
		this.find(".ui-label-ico.ui-label-checked").removeClass("ui-label-checked");
		this.find(".ui-label-checked1").removeClass("ui-label-checked1").addClass("ui-label-checked");
	},
	/**
	 * 启用控件
	 */
	"unDisabled" : function() {
		this.find(".ui-label-disable").removeClass("ui-label-disable");
		this.find(".ui-label-ico.ui-label-checked-disable").removeClass("ui-label-checked-disable").addClass("ui-label-checked");
	},
	/**
	 * 启用控件
	 */
	"enable" : function(){
		this.unDisabled();
	},
	/**
	 * 销毁当前对象Dom集
	 */
	"destroy" : function() {
		fastDev(this.elems).remove();
		var bodyClick=this._global.bodyClick;
		fastDev("body").unbind("click",bodyClick);
	},
	"bind" : function(){
		return this;
	},
	"fire" : function(){
		return this;
	},
	/**
	 * 是否验证不通过
	 */
	"hasError" : function(){
		return fastDev(this.elems[0]).hasClass("ui-tips-text-err");
	},
	/**
	 * 调用配置中的验证规则对输入值进行验证
	 * @return {String}
	 */
	"validate" : function() {		
		var options = this._options, errorMsg="";
		if(options.rule){
			var value = this.getValue(), validation = fastDev.Core.Validation;
			var box=fastDev(this.elems[0]);
			var height=box.children().height();
			//box.css("height",height);
			this._global.box=box;
			var errorConfig=options.errorConfig;
			errorMsg = fastDev.Core.Validation.validate(options.rule, value, errorConfig);
			if(errorMsg) {
				this.initError(errorMsg);
			} else {
				this.destroyError();
			}	
		}
		return errorMsg;
	},
	/**
	 *  初始化错误提示
	 * @param {Object} errorMsg 错误信息
	 * @private
	 */
	"initError" : function(errorMsg) {
		var global = this._global,
		// 输入框
		box = global.box,
		// 错误提示框
		errorDiv = global.errorDiv = fastDev(this.errorTemplate.join("")),
		// 鼠标滑入输入框事件
		boxMouseoverHandle = global.boxMouseoverHandle,
		// 鼠标滑出输入框事件
		boxMouseoutHandle = global.boxMouseoutHandle;
		if(!boxMouseoverHandle) {
			boxMouseoverHandle = global.boxMouseoverHandle = function(event) {
				if(box.hasClass("ui-tips-text-err")){
				errorDiv.css({
					left : event.pageX + global.margins + "px",
					top : event.pageY + global.margins + "px"
				}).show();
				}
			};
			boxMouseoutHandle = global.boxMouseoutHandle = function() {
				errorDiv.hide();
			};
		}
		// 渲染错误提示框并隐藏
		errorDiv.setText(errorMsg).css({
			position : "absolute"
		}).hide().appendTo(document.body);
		box.addClass("ui-tips-text-err");
		box.bind("mouseover", boxMouseoverHandle).bind("mouseout", boxMouseoutHandle);
	},
	/**
	 * 销毁错误提示
	 * @private
	 */
	"destroyError" : function() {
		var global = this._global, errorDiv = global.errorDiv;
		if(!errorDiv) {
			return;
		}
		var box = global.box, textMouseoverHandle = global.textMouseoverHandle, textMouseoutHandle = global.textMouseoutHandle;
		box.removeClass("ui-tips-text-err");
		box.unbind("mouseover", textMouseoverHandle).unbind("mouseout", textMouseoutHandle);
		errorDiv.remove();
	}
});
/**
 * 日历控件（主体）
 * @class fastDev.Ui.DatePicker
 * @extends fastDev.Ui.Box
 * @author luming
 */
fastDev.define("fastDev.Ui.DatePicker", {
    "alias": "DatePicker",
    "extend": "fastDev.Ui.Box",
    "_options": {
		/*
         * @cfg {String}
         * 控件宽度
         */
        "width": "150px",
        /*
         * @cfg {Number}
         * 索引重置
         */
        "zIndex": 200,
        /*
         * @cfg {String}
         * 设定日期值
         */
        "value": "",
        /*
         * @cfg {String}
         * 输入框名称
         */
        "name": "",
        /*
         * @cfg {String}
         * 日期选择的触发方式
         * <p>- button: 仅仅在点击图标按钮时触发日期选择</p>
         * <p> -click: 输入框或图标上发生点击事件时触发</p>
         * <p> -mouseover: 鼠标悬浮至输入框或图标上时触发</p>
         * <p> -[eventType] :其他任何有效事件类型</p>
         */
        "trigger": "click",
        /*
         * @cfg {String}
         * 日期时间格式
         * <p>格式表达式，变量含义:</p>
         * <p>-yyyy: 带 0 补齐的四位年表示</p>
         * <p>-yy: 带 0 补齐的两位年表示</p>
         * <p>-MM: 带 0 补齐的两位月表示</p>
         * <p>-M: 不带 0 补齐的月表示</p>
         * <p>-dd: 带 0 补齐的两位日表示</p>
         * <p>-d: 不带 0 补齐的日表示</p>
         * <p>-hh: 带 0 补齐的两位 12 进制时表示</p>
         * <p>-h: 不带 0 补齐的 12 进制时表示</p>
         * <p>-HH: 带 0 补齐的两位 24 进制时表示</p>
         * <p>-H: 不带 0 补齐的 24 进制时表示</p>
         * <p>-mm: 带 0 补齐两位分表示</p>
         * <p>-m: 不带 0 补齐分表示</p>
         * <p>-ss: 带 0 补齐两位秒表示</p>
         * <p>-s: 不带 0 补齐秒表示</p>
         */
        "format": "yyyy-MM-dd",
        /*
         * @cfg {Number}
         * 定义星期的第一天，可选值0~6
         * 星期日为0、星期一为1、星期六为6
         */
        "firstDayOfWeek": 0,
        /*
         * @cfg {String|Date}
         * 最小日期限制（默认会取1900年1月1日0时0分0秒）
         */
        "minDate": null,
        /*
         * @cfg {String|Date}
         * 最大日期限制（默认会取2099年12月31日23时59分59秒）
         */
        "maxDate": null,
        /*
         * @cfg {String|Array}
         * 可选择的日期时间值表达式组
         * 开启该功能需加载DatePicker.expression.js扩展文件
         * 此表达式为cron日期表达式，其格式为用空格分隔的7个子表达式域，如：
         *  0 15 10 ? * 6L 2002-2005
         * [秒   分     时] 日  月   周   年
         * 可以不声明   ”秒“ “分” “时”子表达式，表达式长度等于3或等于4时，会默认"秒 分 时"为 "?"值
         * 上述表达式表示：在 2002, 2003, 2004和 2005 年中的每月最后一个周五（星期日为1，星期一为2，依此类推）的 10:15 AM
         * 更多有关于cron日期表达式的信息，请参考相关资料或在线示例
         */
        "includes": [],
        /*
         * @cfg {String|Array}
         * 被禁用的日期时间值表达式组
         * includes属性中指明的可选值也会在excludes声明中被排除
         * 此表达式为cron表达式
         * 可以不声明   ”秒“ “分” “时”子表达式，表达式长度等于3或等于4时，会默认"秒 分 时"为 "?"值
         * 更多有关于cron日期表达式的信息，请参考相关资料或在线示例
         */
        "excludes": [],
        /*
         * @cfg {Boolean}
         * 是否显示时间选择器
         * 控件默认会根据日期时间格式来判定是否需要显示时间选择器
         * 也可以通过该属性强制开启或关闭时间选择器，但最终日期时间值仍受限于format属性指定的格式
         */
        "showTimePicker": null,
        /*
         * @cfg {Boolean}
         * 是否显示农历日期值提示
         */
        "showLunarTips": false,
        /*
         * @cfg {String|fastDev.Ui.DatePicker}
         * 指定可选时间必须在另外一个DatePicker控件已选日期值之前
         * 即设置当前控件的最大日期值为该属性所指定日期控件的已选日期值
         * 另外也可以通过onPick事件回调来动态设置本控件的最大最小日期值限制
         * 可传控件ID或者fastDev.Ui.DatePicker对象
         */
        "timeBefore": null,
        /*
         * @cfg {String|fastDev.Ui.DatePicker}
         * 指定可选时间必须在另外一个DatePicker控件已选日期值之后
         * 即设置当前控件的最小日期值为该属性所指定的日期控件的已选日期值
         * 另外也可以通过onPick事件回调来动态设置本控件的最大最小日期值限制
         * 可传控件ID或者fastDev.Ui.DatePicker对象
         */
        "timeAfter": null,
        /*
         * @cfg {Boolean}
         * 是否只读
         */
        "readonly": false,
        /*
         * @cfg {String|Boolean}
         * 日历面板展现类型，为以下枚举值：
         * <p>-block: 以弹出层形式展现，默认方式 </p>
         * <p>-inline: 以行内块形式展现，即平面模式 </p>
         * <p>-none|false: 初始隐藏（带输入框时）
         */
        "display": "block",
        /*
         * @cfg {Number}
         * 动画速度
         * <p>单位毫秒
         * <p>为0时则不使用动画效果
         */
        "animateSpeed": 200,
        /*
         * @cfg {Boolean}
         * 是否在当前页面展现
         * <p>此属性为false值时，日历面板将尝试跨出当前子页面展现
         */
        "inside": true,
        /*
         * @cfg {String}
         * 自定义日历面板的弹出位置 ，为以下枚举值：
         * <p>auto   -   由控件根据当前可视区域大小自行设定，默认值
         * <p>up   -   日期输入框上方
         * <p>down   -   日期输入框下方
         */
        "direction": "auto",
        /*
         * @cfg {Boolean}
         * 是否允许手动输入日期
         */
        "allowInput" : false,
        /*
         * @event onPick
         * 选择日期值后的回调事件，传递参数为当前拟选的日期对象(Date对象)和根据格式参数格式化后的日期时间值(字符串值)
         * 若回调函数返回false，则不会选择当前拟选的日期值
         * this指向当前日历控件
         */
        "onPick": fastDev.noop,
        /*
         * @event onInvalidValue
         * 开启allowInput属性且输入值无效时触发事件
         */
        "onInvalidValue" : fastDev.noop,
        /*
         * @private
         */
        "enableDataProxy": false,
        /*
         * @private
         */
        "enableInitProxy": false
    },
    "_global" : {
    	//只读样式字符串
		"readonlyStr" : 'readonly="true"',
		//面板展示形式(block为普通日期输入框形式,inline为嵌入页面形式)
		// 用于标记是否是普通日期选择框还是嵌入页面形式的日期选择面板
		"show" : "block",
		//唯一标识
		"sequence" : "",
		// 默认最小可选年份
        "minYear": 1900,
        // 默认最大可选年份
        "maxYear": 2099,
        // 默认最小可选日期对象
        "minDate": new Date(0, 0, 1),
        // 默认最大可选日期对象
        "maxDate": new Date(2099, 11, 31, 23, 59, 59),
		//阴影样式
		"shadowCls" : "ui-shadow",
		//菜单层级
		"menuZIndex" : null,
		//失去焦点事件
		"onBlur" : fastDev.noop,
		//日历面板所属的页面window对象(跨级时为顶层页面的window对象)
		"pageContext" : null,
		//显示日期的文本框对象
		"input" : null,
		//当前文档对象
		"docHtml" : null,
		//控件显示日期的文本框的主题div对象
		"textbox" : null,
		//存放文本框的div对象
		"wrapper" : null,
		//文本框后的日历图标外层的div对象
		"trigger" : null,
		//弹出的面板对象
		"picker" : null,
		//快速选取年份的面板对象
		"yearMenu" : null,
		//快速选取月份的面板对象
		"monthMenu " : null,
		//年份列表面板对象
		"yearMenuPlaceHolder" : null,
		//年份上翻页按钮对象
		"yearMenuPrevBtn" : null,
		//翻页按钮中间间隔符对象
		"yearMenuLine" : null,
		//年份下翻页按钮对象
		"yearMenuNextBtn" : null,
		//日历面板头部对象
		"header" : null,
		//月份输入框对象
		"monthInput" : null,
		//年份输入框对象
		"yearInput" : null,
		//上一年按钮对象
		"prevYearBtn" : null,
		//上一月按钮对象
		"prevMonthBtn" : null,
		//下一年按钮对象
		"nextYearBtn" : null,
		//下一月按钮对象
		"nextMonthBtn" : null,
		//底部工具栏区域对象
		"toolbar" : null,
		//"今天"按钮对象
		"todayBtn" : null,
		//"确定"按钮对象
		"confirmBtn" : null,
		//"清除"按钮对象
		"cleanBtn" : null,
		//时间选择器外层div对象
		"timePicker" : null,
		//时间选择器小时输入框对象
		"timePickerHours" : null,
		//时间选择器分钟输入框对象
		"timePickerMinutes" : null,
		//时间选择器秒钟输入框对象
		"timePickerSeconds" : null,
		//时间选择器微调按钮外层div对象
		"timePickerTrigger" : null,
		//时间选择器向上微调按钮对象
		"timePickerUpBtn" : null,
		//时间选择器向下微调按钮对象
		"timePickerDownBtn" : null,
		//面板当前显示日期的主体的table对象
		"prevBodyTable" : null,
		//面板翻页后显示日期的主体的table对象
		"nextBodyTable" : null,
		//面板当前显示日期的table对象(不包括星期)
		"prevBodyCell" : null,
		//面板翻页后显示日期的table对象(不包括星期)
		"nextBodyCell" : null,
		//面板当前显示日期的主体的table对象(等于prevBodyTable)
		"body" : null,
		//弹出的面板的顶层document文档对象
		"topDocHtml" : null,
		//标记为已解析极值和表达式
        "parsed" : false,
        //标记为初始完毕，用于被其他日历控件引用时
        "initialized" : false
    },
    /*
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
    "template" : [
		'<tpl if(#{show}!=="inline")>',
			'<div id="datepicker-textbox-#{sequence}" style="width:#{width}" class="ui-form">',
				'<div id="datepicker-wrapper-#{sequence}" class="ui-form-wrap ui-date">',
					'<input id="#{id}" type="text" name="#{name}" autocomplete="off" #{readonlyStr} class="ui-form-field ui-form-input" value="#{value}"/>',
					'<div class="ui-form-trigger">',
						'<div id="datepicker-trigger-#{sequence}" class="ui-date-icon"></div>',
					'</div>',
				'</div>',
			'</div>',
		'</tpl>'
      ],
      /*
       * 日历面板弹出层静态模板
       * @param {Object} params 模板已解析参数对象
       * @private 
       */
      "popupStaticTemplate": function (params) {
          var html = [],sequence = params.sequence;
          html.push('<div id="datepicker-popup-'+ sequence +'" class="ui-datepicker ' + params.shadowCls + '" style="display:none;z-index:' + params.zIndex + '">');

          html.push('<div id="datepicker-header-'+ sequence +'" class="ui-datepicker-header">');

          html.push('<div><span name="prevYearBtn" id="datepicker-prevyear-'+ sequence +'" title="上一年" class="ui-datepicker-header-page ui-datepicker-header-prevyear"></span></div>');
          html.push('<div><span name="prevMonthBtn" id="datepicker-prevmonth-'+ sequence +'" title="上一月" class="ui-datepicker-header-page ui-datepicker-header-prevmonth"></span></div>');

          html.push('<div class="ui-datepicker-header-text">');
          html.push('<input name="monthInput" title="点击输入月份" id="datepicker-input-month-'+ sequence +'" class="ui-datepicker-header-input ui-datepicker-header-month"/>');
          html.push('<input name="yearInput" title="点击输入年份" id="datepicker-input-year-'+ sequence +'" class="ui-datepicker-header-input ui-datepicker-header-year"/>');
          html.push('</div>');

          html.push('<div><span name="nextMonthBtn" id="datepicker-nextmonth-'+ sequence +'" title="下一月" class="ui-datepicker-header-page ui-datepicker-header-nextmonth"></span></div>');
          html.push('<div><span name="nextYearBtn" id="datepicker-nextyear-'+ sequence +'" title="下一年" class="ui-datepicker-header-page ui-datepicker-header-nextyear"></span></div>');

          html.push('</div>');

          for (var i = params.firstDayOfWeek, j = 0, title = ["日", "一", "二", "三", "四", "五", "六"], week = []; j < 7; j++, i++) {
              i = i > 6 ? 0 : i;
              if (j > 0) {
                  week.push('</td><td>');
              }
              week.push(title[i]);
          }

          html.push('<div class="ui-datepicker-body"><table id="datepicker-table-prev-'+ sequence +'" style="float:left" cellpadding="0" cellspacing="0" border="0" class="ui-datepicker-weekday"><thead>');
          html.push('<tr id="datepicker-weekday-title-'+ sequence +'" class="ui-datepicker-weekday-title"><td>');
          html.push(week = week.join(""));
          html.push('</td></tr></thead><tbody id="datepicker-body-prev-'+ sequence +'"></tbody></table>');
          html.push('<table id="datepicker-table-next-'+ sequence +'" style="float:left" cellpadding="0" cellspacing="0" border="0" class="ui-datepicker-weekday"><thead><tr id="datepicker-weekday-title-'+ sequence +'" class="ui-datepicker-weekday-title"><td>');
          html.push(week);
          html.push('</td></tr></thead><tbody id="datepicker-body-next-'+ sequence +'"></tbody></table></div>');

          if (params.show !== "inline") {
              html.push('<div id="datepicker-toolbar-'+ sequence +'" class="ui-datepicker-toolbar">');

              if (params.showTimePicker) {
                  html.push(['<div class="ui-datepicker-time" style="display:block;">',
                          '<div id="timepicker-numberbox-'+ sequence +'" class="ui-form ui-form-wrap ui-numberbox" style="width:60px;left:0px;top:0px">',
                          '<input name="timePickerHours" id="timepicker-hours-'+ sequence +'" title="时" type="text" autocomplete="off" class="ui-form-field ui-form-input" style="width:16px"/>:',
                          '<input name="timePickerMinutes" id="timepicker-minutes-'+ sequence +'" title="分" type="text" autocomplete="off" class="ui-form-field ui-form-input" style="width:16px"/>:',
                          '<input name="timePickerSeconds" id="timepicker-seconds-'+ sequence +'" title="秒" type="text" autocomplete="off" class="ui-form-field ui-form-input" style="width:16px"/>',
                          '<div id="datepicker-timepicker-trigger-'+ sequence +'" class="ui-form-trigger">',
                          '<div class="ui-numberbox-up">',
                          '<div name="timePickerUpBtn" title="递增时间" id="timepicker-up-'+ sequence +'" class="ui-numberbox-icon"></div>',
                          '</div>',
                          '<div class="ui-numberbox-split"></div>',
                          '<div class="ui-numberbox-down">',
                          '<div name="timePickerDownBtn" title="递减时间" id="timepicker-down-'+ sequence +'" class="ui-numberbox-icon"></div>',
                          '</div></div></div></div>'
                  ].join(""));
              }
              html.push('<div class="ui-datepicker-button">');

              html.push('<a class="ui-button ui-button-bg"><em class="ui-button-em">');
              if (params.showTimePicker) {
                  html.push('<span name="confirmBtn" id="datepicker-button-confirm-'+ sequence +'" class="ui-button-text">确定</span>');
              } else {
                  html.push('<span name="todayBtn" id="datepicker-button-today-'+ sequence +'" class="ui-button-text">今天</span>');
              }
              html.push('</em></a>');

              html.push('<a class="ui-button ui-button-bg"><em class="ui-button-em"><span name="cleanBtn" id="datepicker-button-clean-'+ sequence +'" class="ui-button-text">清除</span></em></a>');

              html.push('</div><div class="ui-clear"></div></div>');
          }

          html.push('<div class="ui-clear"></div></div>');

          html.push(['<div id="datepicker-menu-month-'+ sequence +'" class="ui-datepicker-menu-month ui-shadow" style="display:none;z-index:' + params.menuZIndex + '"></div>',
                  '<div id="datepicker-menu-year-'+ sequence +'" class="ui-datepicker-menu-year ui-shadow" style="display:none;z-index:' + params.menuZIndex + '">',
                  '<div id="datepicker-menu-year-placeholder-'+ sequence +'"></div>',
                  '<div class="ui-clear"></div>',
                  '<div class="ui-datepicker-menu-year-page">',
                  '<a id="datepicker-menu-year-prev-'+ sequence +'" title="上翻页" name="prev" class="ui-datepicker-menu-year-prev">&nbsp;&laquo;&nbsp;</a>',
                  '<span id="datepicker-menu-year-line-'+ sequence +'" class="ui-datepicker-menu-year-line">-----</span>',
                  '<a id="datepicker-menu-year-next-'+ sequence +'" title="下翻页" name="next" class="ui-datepicker-menu-year-next">&nbsp;&raquo;&nbsp;</a>',
                  '</div></div>'
          ].join(""));

          return html.join("");
    },
    /*
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
    "tplParam": ["width", "name", "value","sequence", "zIndex", "menuZIndex", "id", "showTimePicker", "show", "shadowCls", "firstDayOfWeek", "readonlyStr"],
	// 使用父类文档说明
    "ready": function (options, global) {
    	//获取唯一ID
        global.sequence = fastDev.getID();
        //修正宽度
        var width = /^(-?\d+\.?\d+|-?\d)(px|%|em|cm)?$/.exec(fastDev.Util.StringUtil.trim(options.width + ""));
        options.width = width?width[1] + (width[2] || "px"):"150px";
        //根据显示模式纠正参数
        if (options.display === "none" || options.display === false) {
            options.display = false;
        } else {
			if(options.display === "inline"){
				global.show = "inline";
				global.shadowCls = "";
			}else {
				global.show = options.display = "block";
			}
        }
        //如果允许输入，则将只读样式清空
        if(options.allowInput === true){
			global.readonlyStr = '';
        }
        //参数准备
        fastDev.apply(options, {
            "firstDayOfWeek": parseInt(options.firstDayOfWeek, 10) || 0,
            "format": fastDev.Util.StringUtil.trim(options.format),
            "minDate": options.minDate ? this.toValidDate(options.minDate) : global.minDate,
            "maxDate": options.maxDate ? this.toValidDate(options.maxDate) : global.maxDate,
            "zIndex": parseInt(options.zIndex, 10) || 200,
            "timeAfter": !! options.timeAfter ? options.timeAfter : "",
            "timeBefore": !! options.timeBefore ? options.timeBefore : "",
            "saveInstance": !! options.saveInstance || !! options.timeAfter || !! options.timeBefore,
            "onPick": typeof options.onPick === "function" ? options.onPick : fastDev.noop,
            "inside": global.show === "inline" || fastDev.Util.PositionUtil.top.fastDev === fastDev || !! options.inside,
            "animateSpeed": parseInt((Math.max(parseInt(options.animateSpeed, 10) || 0, 0) + "") || 200, 10)
        });
        //是否显示时间选择器
        options.showTimePicker = this.isShowTimePicker();
        //判断每个星期的第一天
        options.firstDayOfWeek = options.firstDayOfWeek > -1 && options.firstDayOfWeek < 7 ? options.firstDayOfWeek : 0;
        //弹出面板的层级
        global.menuZIndex = options.zIndex + 1;
        if (!options.id || !fastDev.Util.StringUtil.trim(options.id)) {
            options.id = fastDev.getID();
        }
        // 页面上下文
        global.pageContext = options.inside ? window : fastDev.Util.PositionUtil.top;
    },
    // 使用父类文档说明
    "construct": function (options, global) {
    	var context = global.pageContext,
		sequence = global.sequence,
		//构造弹出层面板,如果配置了跨级弹出,则在顶层页面构造弹出面板
		main = context.fastDev(this.popupStaticTemplate(global.params)).appendTo(global.show === "inline" ? options.container : fastDev(context.document.body));
    //将构造好的弹出层面板合并到控件对象中
    this.elems = this.elems.concat(main.elems);
    //弹出面板的3个部分(picker:主面板,yearMenu:快速选取年份主面板,monthMenu:快速选取年份主面板)
    global.picker = this.find("#datepicker-popup-"+ sequence);
	global.yearMenu = this.find("#datepicker-menu-year-"+ sequence);
	global.monthMenu = this.find("#datepicker-menu-month-"+ sequence);
	//快速选取年份面板内部dom元素
	global.yearMenuPlaceHolder = global.yearMenu.find("#datepicker-menu-year-placeholder-"+ sequence);
	global.yearMenuPrevBtn = global.yearMenu.find("#datepicker-menu-year-prev-"+ sequence);
	global.yearMenuLine = global.yearMenuPrevBtn.next();
	global.yearMenuNextBtn = global.yearMenuLine.next();
	//主面板内dom元素
	global.header = global.picker.first();
	var headerObj = global.header;
	if(global.show !== "inline"){
		global.textbox = this.find("#datepicker-textbox-"+ sequence);
		global.wrapper = global.textbox.find("#datepicker-wrapper-"+ sequence);
		global.trigger = global.textbox.find("#datepicker-trigger-"+ sequence);
		global.toolbar = this.find("#datepicker-toolbar-"+ sequence);
		global.todayBtn = global.toolbar.find("#datepicker-button-today-"+ sequence);
		global.confirmBtn = global.toolbar.find("#datepicker-button-confirm-"+ sequence);
		global.cleanBtn = global.toolbar.find("#datepicker-button-clean-"+ sequence);
		if (options.showTimePicker) {
			global.timePicker = global.toolbar.find("#timepicker-numberbox-"+ sequence);
			global.timePickerTrigger = global.toolbar.find("#datepicker-timepicker-trigger-"+ sequence);
			global.timePickerHours = global.timePicker.find("#timepicker-hours-"+ sequence);
			global.timePickerMinutes = global.timePicker.find("#timepicker-minutes-"+ sequence);
			global.timePickerSeconds = global.timePicker.find("#timepicker-seconds-"+ sequence);
			global.timePickerUpBtn = global.timePickerTrigger.find("#timepicker-up-"+ sequence);
			global.timePickerDownBtn = global.timePickerTrigger.find("#timepicker-down-"+ sequence);
		}
	}
	//日期展示部分的对象
	global.prevBodyTable = this.find("#datepicker-table-prev-"+ sequence);
	global.nextBodyTable = this.find("#datepicker-table-next-"+ sequence);
	global.body = global.prevBodyCell = global.prevBodyTable.find("#datepicker-body-prev-"+ sequence);
	global.nextBodyCell = global.nextBodyTable.find("#datepicker-body-next-"+ sequence);
    //顶部年份和月份输入框、上一年下一年、上一月下一月按钮
	fastDev.apply(global, {
        "input": global.box,
        "monthInput": headerObj.find("#datepicker-input-month-"+ sequence),
        "yearInput": headerObj.find("#datepicker-input-year-"+ sequence),
        "prevYearBtn": headerObj.find("#datepicker-prevyear-"+ sequence),
        "prevMonthBtn": headerObj.find("#datepicker-prevmonth-"+ sequence),
        "nextYearBtn": headerObj.find("#datepicker-nextyear-"+ sequence),
        "nextMonthBtn": headerObj.find("#datepicker-nextmonth-"+ sequence)
    });
    //控件所属的页面文档
    global.docHtml = fastDev(document.documentElement);
    //当前弹出面板所属的页面文档
    global.topDocHtml = options.inside ? global.docHtml : fastDev(context.document.documentElement);
    },
    // 使用父类文档说明
    "init": function (options, global) {
    	// 初始化日期时间最值设定
        this.setMinDate(options.minDate);
        this.setMaxDate(options.maxDate);
        // 初始化时间表达式
        if ( !! this.cronParser) {
            // 初始化时间表达式
            this.parseCronExpression();
        }
        // 标记为已解析极值和表达式
        global.parsed = true;
        // 初始化日期选择值
        this.setValue(options.value);
        // 绑定相关事件
        this.bindEventHandle();
        // 阻止文本选择
        this.preventTextSelect();
        // 刷新界面
        this.freshUI();
        //当面板跨级显示时，控件所在的页面被关闭，销毁跨级展示的面板
        if (!options.inside) {
            fastDev(window).bind("unload", fastDev.setFnInScope(this, this.destroy));
        }
        // 注册事件
        if (global.show === "inline") {
            // 初始行内模式的日历
            this.initInlinePicker();
        }
        if (!options.display) {
            this.hide();
        }
        if ( !! options.disabled) {
            this.disable();
        }
        // 标记为初始完毕，用于被其他日历控件引用时
        global.initialized = true;
    },
    /*
     * 绑定事件
     * @param {String} type 事件类型
     * @param {Function} handle 事件句柄 
     * @private 
     */
    "bind": function (type, handle) {
        if (type === "blur") {
            var global = this._global;
            global.onBlur = handle;
            global.isBlur = true;
        } else {
            this.superClass.bind.apply(this, arguments);
        }
        return this;
    },
    /*
     * 初始化行内模式的日历控件
     * @private
     */
    "initInlinePicker": function () {
        this._global.picker.css("position", "relative");
        this._options.readonly = false;
        this.showPopup();
    },
    /*
     * 对按钮或输入框作禁用处理
     * @param {Boolean} onlyBtn 为true时则只刷新"今天"按钮
     * @private
     */
    "freshUI": function (onlyBtn) {
        var global = this._global;
        if (global.show !== "inline") {
            var options = this._options,
                today = new Date();
            // 如果"今天"不可用，则禁用"今天按钮"
            if (!options.showTimePicker) {
                if (this.isDisabled(today.getFullYear(), today.getMonth(), today.getDate())) {
                    global.todayBtn.parent().parent().addClass("ui-button-disabled");
                    global.todayBtn.attr("forbidden", "forbidden");
                } else {
                    global.todayBtn.parent().parent().removeClass("ui-button-disabled");
                    global.todayBtn.attr("forbidden", "");
                }
            } else if (!onlyBtn) {
				// 将时间输入框禁用
                fastDev.each(["Hours", "Minutes", "Seconds"], function (idx, val) {
                    if (!global["show" + val]) {
                        global["timePicker" + val].prop("disabled", "disabled").addClass("ui-datepicker-disabled");
                    }
                });
            }
        }
    },
    /*
     * 绑定事件处理器
     * @private
     */
    "bindEventHandle": function () {
        var that = this,
            options = this._options,
            global = this._global;
        //点击控件弹出面板事件,若是平面模式则不绑定
        if (global.show !== "inline") {
            if (options.trigger === "button") {
                // 仅点击button时触发
                global.trigger.bind("click", fastDev.setFnInScope(this, this.triggerClickHandle));
            } else {
                // 发生指定事件时触发
                global.input.bind(options.trigger, fastDev.setFnInScope(this, this.triggerClickHandle));
                global.trigger.bind(options.trigger, fastDev.setFnInScope(this, this.triggerClickHandle));
            }
        }
        // 绑定日历面板事件代理
        //面板元素点击事件
        global.picker.bind("click", fastDev.setFnInScope(this, this.pickerClickHandle))
        //鼠标移动到元素上做冒泡处理事件
        .bind("mouseover", fastDev.setFnInScope(this, this.pickerOverHandle))
        .bind("mouseout", fastDev.setFnInScope(this, this.pickerOutHandle));
        // 绑定键盘相关操作
        global.picker.bind("keydown", fastDev.setFnInScope(this, this.pickerKeydownHandle));
        if (fastDev.Browser.isIE6) {
            // IE6不支持keydown捕获回车事件，改用keyup监听
            global.picker.bind("keyup", function (event) {
                if (event.keyCode === 13) {
                    that.pickerKeydownHandle(event);
                }
            });
            // IE6下不支持样式设置hover，需添加js事件
            global.monthMenu.bind("mouseover", fastDev.setFnInScope(global.monthMenu, this.menuOver)).bind("mouseout", fastDev.setFnInScope(global.monthMenu, this.menuOut));
            global.yearMenu.bind("mouseover", fastDev.setFnInScope(global.yearMenu, this.menuOver)).bind("mouseout", fastDev.setFnInScope(global.yearMenu, this.menuOut));
        }
        // 绑定鼠标滚轮滚动事件，以便快速翻页
        global.picker.bind(fastDev.Browser.isFirefox ? "DOMMouseScroll" : "mousewheel", fastDev.setFnInScope(this, this.bodyMouseWheel));
        global.yearMenu.bind(fastDev.Browser.isFirefox ? "DOMMouseScroll" : "mousewheel", fastDev.setFnInScope(this, this.yearMenuMouseWheel));
        //月份选择菜单点击事件
        global.monthMenu.bind("click", function (event) {
            return that.menuClick(event, "month");
        });
        //年份选择菜单点击事件
        global.yearMenu.bind("click", global.yearMenuClickHandle = function (event) {
            return that.menuClick(event, "year");
        });
        // IE6、7、8下dblclick事件不会执行click事件，点击过快时会有停顿感觉，所以需同时绑dblclick事件
        if (fastDev.Browser.isIE6 || fastDev.Browser.isIE7 || fastDev.Browser.isIE8) {
			//面板点击事件
			global.picker.bind("dblclick", fastDev.setFnInScope(this, this.pickerClickHandle));
			//年份选择菜单点击事件
            global.yearMenu.bind("dblclick", global.yearMenuClickHandle);
        }
        if(options.allowInput){
			global.input.bind("blur",fastDev.setFnInScope(this, this.setValueByInput));
        }
        //文档点击事件,点击不在面板内则关闭面板
        global.docClickEventHandle = fastDev.setFnInScope(this, this.documentClick);
        // 面板点击默认取消事件冒泡
        global.cancelBubble = true;
        // 初始化清理标识
        global.clear = false;
    },
    /*
     * 获得输入的时分秒,格式化并设置值日期值
     * @private
     */
    "setValueByInput" : function(){
		var inputValue = this._global.input.prop("value");
		if(inputValue && (inputValue+"").length > 0){
			if(fastDev.isDate(inputValue = fastDev.Util.DateUtil.parse(inputValue)) && !this.isDisabled(inputValue.getFullYear(), inputValue.getMonth(), inputValue.getDate(), inputValue.getHours(), inputValue.getMinutes(), inputValue.getSeconds())){
				this.setValue(fastDev.Util.DateUtil.format(inputValue, "yyyy-MM-dd"));
			}else if(fastDev.isNoop(this._options.onInvalidValue) && fastDev.alert("输入值日期值无效") || this._options.onInvalidValue.call(this)){}
		}
    },
    /*
     * 触发器触发事件
     * @param {Event} event
     * @private
     */
    "triggerClickHandle": function (event) {
		// 显示弹出层
        this.showPopup();
        // 取消事件冒泡
        return this.stopBubble(event);
    },
    /*
     * 阻止文本选择
     * @private
     */
    "preventTextSelect": function () {
        var global = this._global;
        if (fastDev.Browser.isFirefox) {
            // 火狐下禁用日历面板文本选择
            global.picker.css("-moz-user-select", "-moz-none");
            global.yearMenu.css("-moz-user-select", "none");
        } else {
            // Chrome、IE禁用文本选择
            global.picker.elems[0].onselectstart = global.yearMenu.elems[0].onselectstart = global.monthMenu.elems[0].onselectstart = fastDev.setFnInScope(this, this.stopBubble);
            global.yearInput.elems[0].onselectstart = global.monthInput.elems[0].onselectstart = function () {
                // 年份与月份输入框应该拥有可选文本事件
                global.cancelBubble = false;
            };
            if (this._options.showTimePicker) {
                fastDev.each(["Hours", "Minutes", "Seconds"], function (idx, val) {
                    global["timePicker" + val].elems[0].onselectstart = function () {
                        global.cancelBubble = !global["show" + val];
                    };
                });
            }
        }
    },
    /*
     * 日历面板鼠标悬浮事件代理
     * @param {Event} event
     * @private
     */
    "pickerOverHandle": function (event) {
        var options = this._options,
            global = this._global,
            target = fastDev(event.target),
            name = (target.attr("name") || target.prop("name") || "").split("-");
        if (name[1] === global.sequence + "") {
            // 日期项鼠标悬浮
            target.addClass("ui-datepicker-over");
            if (options.showLunarTips && !target.prop("title")) {
                if (typeof this.showLunarTips !== "function") {
                    throw "未包含相关农历日期功能API，需导入DatePicker.lunar.js扩展文件.";
                }
                target.prop("title", this.showLunarTips(name));
            }
        } else {
            switch (name[0]) {
                // 上一年按钮鼠标悬浮事件
                case "prevYearBtn":
                    // 下一年按钮鼠标悬浮事件
                case "nextYearBtn":
                    // 上一月按钮鼠标悬浮事件
                case "prevMonthBtn":
                    // 下一月按钮鼠标悬浮事件
                case "nextMonthBtn":
                    target.parent().addClass("ui-datepicker-header-over");
                    break;
                    // 今天按钮悬浮
                case "todayBtn":
                    // 确定按钮悬浮
                case "confirmBtn":
                    // 清除按钮悬浮
                case "cleanBtn":
                    target.prop("title", name[0] === "cleanBtn" ? "" : fastDev.Util.DateUtil.format(name[0] === "todayBtn" ? new Date() : new Date(global.year, global.month, global.forSelectDate, global.hours, global.minutes, global.seconds), options.format));
                    target.parent().parent().addClass("ui-button-over");
                    break;
                    // 时间选择器向上按钮点击事件
                case "timePickerUpBtn":
                    // 时间选择器向下按钮点击事件
                case "timePickerDownBtn":
                    target.parent().addClass("ui-numberbox-over");
            }
        }
        // 取消事件冒泡
        return this.stopBubble(event);
    },
    /*
     * 菜单鼠标悬浮事件，IE6兼容考虑
     * @param {Event} event
     * @private
     */
    "menuOver": function (event) {
        if (event.target.tagName.toLowerCase() === "a") {
            fastDev(event.target).addClass("ui-datepicker-menu-over");
        }
    },
    /*
     * 菜单鼠标移出事件，IE6兼容考虑
     * @param {Event} event
     * @private
     */
    "menuOut": function (event) {
        this.find(".ui-datepicker-menu-over").removeClass("ui-datepicker-menu-over");
    },
    /*
     * 日历面板鼠标移出事件代理
     * @param {Event} event
     * @private
     */
    "pickerOutHandle": function (event) {
        var global = this._global;
        // 移除相关悬浮样式
        global.body.find(".ui-datepicker-over").removeClass("ui-datepicker-over");
        global.header.find(".ui-datepicker-header-over").removeClass("ui-datepicker-header-over");
        if(global.show !== "inline"){
            global.toolbar.find(".ui-button-over").removeClass("ui-button-over");
        }
        if (this._options.showTimePicker) {
            global.timePickerTrigger.find(".ui-numberbox-over").removeClass("ui-numberbox-over");
        }
        // 取消事件冒泡
        return this.stopBubble(event);
    },
    /*
     * 日历面板鼠标点击事件
     * @param {Event} event
     * @private
     */
    "pickerClickHandle": function (event) {
        var global = this._global;
        if (!global.rendering) {
            var target = fastDev(event.target),
                name = (target.attr("name") || target.prop("name") || "").split("-");
            // 隐藏年、月份菜单层，未传值则表示需验证年、月份输入框的值
            this.hideMenu("month");
            this.hideMenu("year");
            // 验证时间选择器的值
            this.validateTime(name[0]);
            global.handleClick = true;
            if (name[1] === global.sequence + "") {
                // 日期值点选
                this.bodyClick(name, target, event);
            } else {
                switch (name[0]) {
                    // 上一年按钮点击事件
                    case "prevYearBtn":
                        // 下一年按钮点击事件
                    case "nextYearBtn":
                        // 上一月按钮点击事件
                    case "prevMonthBtn":
                        // 下一月按钮点击事件
                    case "nextMonthBtn":
                        name = name[0].match(/(prev|next)(Year|Month)Btn/);
                        this.headerBtnClick(fastDev.Util.StringUtil.capitalize(name[1]), name[2].toLowerCase(), target.parent().hasClass("ui-datepicker-header-disabled"));
                        break;
                        // 月份输入框点击事件
                    case "monthInput":
                        // 年份输入框点击事件
                    case "yearInput":
                        this.headerInputClick(name[0].match(/(month|year)Input/)[1]);
                        break;
                        // "今天"按钮点击事件
                    case "todayBtn":
                        // "确定"按钮点击事件
                    case "confirmBtn":
                        // "清除"按钮点击事件
                    case "cleanBtn":
                        this[name[0] + "Click"](event);
                        break;
                    case "timePickerUpBtn":
                        this.timePickerBtnClick("up");
                        break;
                    case "timePickerDownBtn":
                        this.timePickerBtnClick("down");
                        break;
                        // 时间选择器
                    case "timePickerHours":
                    case "timePickerMinutes":
                    case "timePickerSeconds":
                        this.timePickerFocus(name[0]);
                }
            }
            global.handleClick = false;
            if (global.show === "inline") {
                // 行内模式时，点击日历面板，需清理未关闭的其他非行内模式的日历面板
                global.clear = true;
                // 取消阻止事件冒泡，以避免影响其他监听doc click的控件（实际上clear操作已经取消阻止事件冒泡了，此处作个Note而已）
                global.cancelBubble = false;
            }
        }
        // 取消事件冒泡
        return this.stopBubble(event);
    },
    /*
     * 监听按键触发事件
     * @param {Event} event
     * @private
     */
    "pickerKeydownHandle": function (event) {
        var global = this._global;
        if (event.keyCode === 13) {
			// 年月份输入框回车事件，选定相关年月份
            this.hideMenu("year", undefined, true);
            this.hideMenu("month", undefined, true);
            this.refreshDate(global.year, global.month);
        } else {
            var target = event.target;
            if (target === global.yearInput.elems[0]) {
                if (event.keyCode === 9) {
					// Tabs按键事件，从年份输入框切换至月份输入框
                    this.hideMenu("year", undefined, true);
                    this.refreshDate(global.year, global.month);
                    this.headerInputClick("month");
                } else {
					// 适时刷新年份选择下拉菜单至输入框输入年份值
                    this.setTimer(function () {
                        this.refreshYearMenu(parseInt(this._global.yearInput.prop("value"), 10), true);
                    }, 10);
                    global.cancelBubble = false;
                }
            } else if (target === global.monthInput.elems[0]) {
                if (event.keyCode === 9) {
					// Tabs按键事件，从月份输入框切换至年份输入框
                    this.hideMenu("month", undefined, true);
                    this.refreshDate(global.year, global.month);
                    this.headerInputClick("year");
                } else {
                    global.cancelBubble = false;
                }
            } else if (this._options.showTimePicker && /^timePicker([HMS].*)$/.test((target = fastDev(target)).prop("name"))) {
                if (event.keyCode === 9) {
					// 时间输入框Tabs键切换
                    this.validateTime();
                    switch (RegExp.$1) {
                        case "Hours":
                            this.timePickerFocus(global.timePickerMinutes.prop("disabled") ? "timePickerSeconds" : "timePickerMinutes");
                            break;
                        case "Minutes":
                            this.timePickerFocus(global.timePickerSeconds.prop("disabled") ? "timePickerHours" : "timePickerSeconds");
                            break;
                        case "Seconds":
                            this.timePickerFocus(global.timePickerHours.prop("disabled") ? "timePickerMinutes" : "timePickerHours");
                    }
                } else if (event.keyCode === 38) {
					// 向上方向键递增时间
                    this.setTimer(this.timePickerBtnClick, 25, "up");
                } else if (event.keyCode === 40) {
					// 向下方向键递减时间
                    this.setTimer(this.timePickerBtnClick, 25, "down");
                } else {
                    global.cancelBubble = false;
                }
            } else {
                global.cancelBubble = false;
            }
            return this.stopBubble(event);
        }
    },
    /*
     * 刷新日期
     * @param {Number} year
     * @param {Number} month
     * @private
     */
    "refreshDate": function (year, month) {
        var options = this._options,
            global = this._global,
            // 当前待选月份的最后一天
            lastDay = new Date(year, month + 1, 0).getDate(),
            date = options.showTimePicker ? global.forSelectDate > lastDay ? lastDay : global.forSelectDate : global.date > lastDay ? lastDay : global.date;
            // 根据当前待选日期刷新日期选择面板
        this.refreshToRecent(options.showTimePicker ? new Date(year, month, date, global.hours, global.minutes, global.seconds) : new Date(year, month, date));
    },
    /*
     * 设置计时器
     * @param {Function} func 函数
     * @param {Number} timeout 超时时长
     * @param {Object} parama 参数a
     * @param {Object} paramb 参数b
     * @private
     */
    "setTimer": function (func, timeout, parama, paramb) {
        var that = this,
            global = this._global;
        global.pageContext.clearTimeout(global.timer);
        global.timer = global.pageContext.setTimeout(function () {
            func.call(that, parama, paramb);
        }, timeout);
    },
    /*
     * 日期格子点击事件
     * @param {Array} name
     * @param {Element} target
     * @param {Event} event
     * @private
     */
    "bodyClick": function (name, target, event) {
        var options = this._options,
            global = this._global,
            month = name[2] === "prev" ? global.month - 1 : name[2] === "next" ? global.month + 1 : global.month,
            year = month < 0 ? global.year - 1 : month > 11 ? global.year + 1 : global.year,
            date = new Date(year, month = month < 0 ? 11 : month > 11 ? 0 : month, name[0]),
            needFresh = null;
        if (global.show === "block") {
            if (!options.showTimePicker) {
                // 有时间选择器的时候，需通过点击文档来关闭日历面板
                // 非行内模式则清理并隐藏日历面板
                global.forSelectDate = null;
                if (!options.readonly) {
                    // 选取日期时间值并刷新输入框
                    this.select(date);
                }
                // 触发文档点击事件逻辑，用来隐藏弹出层
                this.documentClick(event);
            } else {
                this.forSelect(date.getDate(), month, year);
                // 点击日期在上月或下月，则刷新面板
                needFresh = name[2];
            }
        } else {
            needFresh = this.select(date);
        }
        if (needFresh) {
            global.forSelectDate = date.getDate();
            global.year = year;
            global.month = month;
            this.refreshHeader();
            this.refreshBody();
        }
    },
    /*
     * 鼠标滚轮滚动翻页事件
     * @param {Event} event
     * @private
     */
    "bodyMouseWheel": function (event) {
        var global = this._global,
            direct = event.wheelDelta || -event.detail;
        if (!global.rendering) {
			// 当前动画翻页效果结束后才继续下一次翻页动画
			// 翻页时，隐藏各弹出菜单，并刷新头部，底部输入框或按钮
            this.hideMenu("year");
            this.hideMenu("month");
            if (this._options.showTimePicker && (global.timePicker.contains(event.target) || global.timePicker.elems[0] === event.target)) {
                this.setTimer(this.timePickerBtnClick, 15, direct > 0 ? "up" : "down");
            } else if (global.body.contains(event.target)) {
                this.headerBtnClick(direct > 0 ? "Prev" : "Next", "month");
            }
            this.cancelBubble = true;
        }
        return this.stopBubble(event);
    },
    /*
     * 鼠标滚轮滚动翻页"年"事件
     * @param {Event} event
     * @private
     */
    "yearMenuMouseWheel": function (event) {
        var direct = event.wheelDelta || -event.detail;
        this.yearMenuPaging(direct > 0 ? "Prev" : "Next");
        this.cancelBubble = true;
        return this.stopBubble(event);
    },
    /*
     * 上下年月份按钮点击事件
     * @param {String} name Next或Prev
     * @param {String} type year或者month
     * @param {Boolean} disabled 是否被禁用
     * @private
     */
    "headerBtnClick": function (name, type, disabled) {
        if (disabled) {
            return;
        }
        var global = this._global,
            time;
        if (type === "year") {
			// 此处通过循环来查找下一个可选择的年份
            do {
                time = this.getUsableYear(name, global.year);
            } while (time.month === null);
        } else {
			// 查找当前待选年份里面的下一个可选的月份
            time = this.getUsableMonth(name, global.year, global.month);
        }
        // 使用可选的年月份来刷新当前日期选择面板
        this.refreshDate(time.year, time.month);
    },
    /*
     * 年月份输入框点击事件
     * @param {String} type year或month
     * @private
     */
    "headerInputClick": function (type) {
        var global = this._global,
            cType = fastDev.Util.StringUtil.capitalize(type),
            elem;
        if (global["is" + cType + "MenuShowed"]) {
            return;
        }
        global[type + "Input"].addClass("ui-datepicker-header-input-over").prop("value", global[type] + (type === "year" ? 0 : 1));
        // 定位并展现下拉选择餐单
        this.position(global[type + "Menu"], global[type + "Input"]).show();
        if (type === "year") {
            global.pageYear = global.year;
        } else {
            global.monthMenu.find(".ui-datepicker-menu-selected").removeClass("ui-datepicker-menu-selected");
            global.monthMenu.find("[name='" + global.month + "']").addClass("ui-datepicker-menu-selected");
        }
        // 需根据当前待选日期来刷新下拉选择菜单
        this["refresh" + cType + "Menu"]();
        // 输入框聚焦并文本全选，方便直接删除原值并输入新值
        (elem = global[type + "Input"].elems[0]).select();
        elem.focus();
        // 标记相应选取下拉菜单已经展现
        global["is" + cType + "MenuShowed"] = true;
    },
    /*
     * “今天”按钮点击事件
     * @param {Event} event
     * @private
     */
    "todayBtnClick": function (event) {
        if (!this._global.todayBtn.attr("forbidden")) {
            // 点击"今天"按钮，则直接选取今天
            if (!this._options.readonly) {
                this.select(new Date());
            }
            this.documentClick(event);
        }
    },
    /*
     * “确定”按钮点击事件
     * @param {Event} event
     * @private
     */
    "confirmBtnClick": function (event) {
        var global = this._global;
        if (global.forSelectDate) {
            if (!this._options.readonly) {
                this.validateTime();
                this.select(new Date(global.year, global.month, global.forSelectDate, global.hours, global.minutes, global.seconds));
            }
        }
        this.documentClick(event);
    },
    /*
     * “清除”按钮点击事件
     * @param {Event} event
     * @private
     */
    "cleanBtnClick": function (event) {
        // 清理并隐藏日历面板
        this.documentClick(event);
        if (!this._options.readonly) {
            this.setValue("");
        }
    },
    /*
     * 菜单点击事件
     * @param {Event} event
     * @param {String} type year或month
     * @private
     */
    "menuClick": function (event, type) {
        var global = this._global,
            target = fastDev(event.target),
            name = target.prop("name"),
            time = parseInt(name, 10);
        if (target.hasClass("ui-datepicker-disabled")) {
            // 被禁用
        } else if (typeof time === "number" && !isNaN(time)) {
            this.refreshDate(type === "year" ? time : global.year, type === "year" ? global.month : time);
            this.hideMenu(type, time, true);
        } else if (type === "year" && (name === "prev" || name === "next")) {
            // 上下翻页
            this.yearMenuPaging(fastDev.Util.StringUtil.capitalize(name));
        }
        // 取消事件冒泡
        return this.stopBubble(event);
    },
    /*
     * 年份菜单上下翻页
     * @param {String} type Next或Prev
     * @private
     */
    "yearMenuPaging": function (type) {
        var global = this._global,
            year = this.getUsableYear(type, global.pageYear + (type === "Next" ? 4 : -5)).year;
        if (type === "Next" ? year <= global.maxYear && global.pageYear !== year + 5 : year >= global.minYear && global.pageYear !== year - 4) {
            global.pageYear = year + (type === "Next" ? 5 : -4);
            global["yearMenu" + (type === "Next" ? "Prev" : "Next") + "Btn"].removeClass("ui-datepicker-disabled");
            this.refreshYearMenu();
        }
        // 到达最值，禁用按钮
        if (year === global[type === "Next" ? "maxYear" : "minYear"]) {
            global["yearMenu" + type + "Btn"].addClass("ui-datepicker-disabled");
            global.yearMenuLine.addClass("ui-datepicker-disabled");
        } else {
            global.yearMenuLine.removeClass("ui-datepicker-disabled");
        }
    },
    /*
     * 时间选择器聚焦事件
     * @param {String} name 输入框名
     * @private
     */
    "timePickerFocus": function (name) {
        var global = this._global;
        if (!global[name].prop("disabled")) {
			// 标记当前正输入的时间输入框
            (global.timePickerInputFocus || global[name]).removeClass("ui-datepicker-change");
            (global.timePickerInputFocus || global.timePickerMinutes).removeClass("ui-datepicker-change");
            (global.timePickerInputFocus = global[name]).addClass("ui-datepicker-change");
            // 聚焦并选取，方便快速改值
            global[name].elems[0].select();
            global[name].elems[0].focus();
        } else {
            (global.timePickerInputFocus || global[name]).elems[0].blur();
        }
    },
    /*
     * 验证时间选择器输入框的时间值是否有效
     * @param {String} name 不传name值则表示非增减时间按钮点击
     * @private
     */
    "validateTime": function (name) {
        if (this._options.showTimePicker) {
            var global = this._global,
                // 获取所有时间输入框的当前值
                time = this.getTime(name);
            fastDev.apply(global, time);
            // 刷新时间输入框内容文本，作补零处理等
            this.refreshTimePicker();
        }
    },
    /*
     * 时间选择器按钮点击事件
     * @param {String} name 按钮名称
     * @private
     */
    "timePickerBtnClick": function (name) {
        var global = this._global,
            focus = global.timePickerInputFocus || global.timePickerHours,
            time = focus.prop("name")
                .split("timePicker")[1].toLowerCase(),
            value = parseInt(focus.prop("value"), 10) || 0,
            // 时钟点击
            hours = time === "hours" ? value : global.hours,
            // 分钟点击
            minutes = time === "minutes" ? value : global.minutes,
            // 秒种点击
            seconds = time === "seconds" ? value : global.seconds;
        time = global.timePickerInputFocus ? time : "";
        if(time===""){
			global.timePickerMinutes.addClass("ui-datepicker-change");
        }
        time = name === "up" ? this.getNextTime(hours, minutes, seconds, time) : this.getPrevTime(hours, minutes, seconds, time);
        global.hours = time[0];
        global.minutes = time[1];
        global.seconds = time[2];
        this.refreshTimePicker();
    },
    /*
     * 获取时间选择器聚焦输入框的名称
     * @private
     */
    "getTimeFocusName": function () {
        var focus = this._global.timePickerInputFocus;
        return focus ? focus.prop("name").split("timePicker")[1].toLowerCase() : "";
    },
    /*
     * 文档点击事件
     * @param {Event} event
     * @private
     */
    "documentClick": function (event) {
        var global = this._global;
        if (event.target === global.input.elems[0] || !global.isPickerShowed || global.show === "inline" || global.clear) {
            if (global.show === "inline" && !global.clear) {
                // 如果是清理操作，则跳过下面，以确保不会被自己给清理
                // 隐藏菜单时会根据已选值是否改变来刷新日历面板
                this.hideMenu("month");
                this.hideMenu("year");
            }
            global.clear = false;
            return;
        }
        if (global.show === "block") {
            this.hidePopup();
        }
    },
    /*
     * 阻止事件冒泡
     * @param {Event} event
     * @private
     */
    "stopBubble": function (event) {
        var global = this._global;
        if (!global.cancelBubble || global.clear) {
            // 非取消事件冒泡或者处于清理状态则返回
            global.cancelBubble = true;
            return;
        }
        fastDev.Event.stopBubble(event);
        return false;
    },
    /*
     * 生成日历面板HTML
     * @param {Number} year 年份
     * @param {Number} month 月份
     * @return {String}
     * @private
     */
    "generateBody": function (year, month) {
        var day, cls, disabled, body = [],
            global = this._global,
            today = new Date(),
            // 系统年份
            sysYear = today.getFullYear(),
            // 系统月份
            sysMonth = today.getMonth(),
            // 系统日
            sysDay = today.getDate(),
            // 上月
            prevMonth = month === 0 ? 11 : month - 1,
            // 上月所在的年
            prevMonthYear = prevMonth === month - 1 ? year : year - 1,
            // 下月
            nextMonth = month === 11 ? 0 : month + 1,
            // 下月所在的年
            nextMonthYear = nextMonth === month + 1 ? year : year + 1,
            // 该月的第一天在星期几（0~6）
            firstDay = new Date(year, month, 1).getDay(),
            // 上月的总天数
            daysInPreMonth = new Date(year, month, 0).getDate(),
            // 该月的总天数
            daysInMonth = new Date(year, month + 1, 0).getDate(),
            // 每周的第一天
            firstDayOfWeek = this._options.firstDayOfWeek,
            // 日历面板上显示的属于上月日子的天数（第一天现默认以星期日开始）
            daysFromPreMonth = firstDay - firstDayOfWeek;
        // 保证总是有上月日子显示，更加符合习惯，也更加对称美观
        daysFromPreMonth = daysFromPreMonth === 0 ? 7 : daysFromPreMonth < 0 ? daysFromPreMonth + 7 : daysFromPreMonth;
        body.push("<tr>");
        for (var i = 0, j; i < 42; i++) {
            if (i > 0 && i % 7 === 0) {
				// 换行
                body.push("</tr><tr>");
            }
            // 周末样式
            if ((j = (firstDayOfWeek + i) % 7) === 0 || j === 6) {
                cls = "ui-datepicker-holiday";
            } else {
                cls = "";
            }
            disabled = false;
            if (i < daysFromPreMonth) {
                // 上月日子
                cls += " ui-datepicker-other";
                day = daysInPreMonth - daysFromPreMonth + i + 1;
                if (this.isDisabled(prevMonthYear, prevMonth, day)) {
                    // 被禁用
                    cls += " ui-datepicker-disabled";
                    disabled = true;
                }else if (this.isSelected(prevMonthYear, prevMonth, day)) {
                    // 已选择值
                    cls += " ui-datepicker-selected";
                }
                body.push('<td ' + (disabled ? "" : 'name="' + day + "-" + global.sequence + '-prev"') + ' class="' + cls + '">' + day + '</td>');
            } else if ((day = i - daysFromPreMonth + 1) > daysInMonth) {
                // 下月日子
                day = day - daysInMonth;
                cls += " ui-datepicker-other";
                if (this.isDisabled(nextMonthYear, nextMonth, day)) {
                    // 被禁用
                    cls += " ui-datepicker-disabled";
                    disabled = true;
                }else if (this.isSelected(nextMonthYear, nextMonth, day)) {
                    // 已选择值
                    cls += " ui-datepicker-selected";
                }
                body.push('<td ' + (disabled ? "" : 'name="' + day + "-" + global.sequence + '-next"') + ' class="' + cls + '">' + day + '</td>');
            } else {
                // 当前月日子
                if (day === sysDay && month === sysMonth && year === sysYear) {
                    // 今天
                    cls += " ui-datepicker-today";
                }
                if (this.isDisabled(year, month, day)) {
                    // 被禁用
                    cls += " ui-datepicker-disabled";
                    disabled = true;
                } else if (this.isSelected(year, month, day)) {
                    // 已选择值
                    cls += " ui-datepicker-selected";
                }
                body.push('<td ' + (disabled ? "" : 'name="' + day + "-" + global.sequence + '"') + ' class="' + cls + '">' + day + '</td>');
            }
        }
        body.push("</tr>");
        return body.join("");
    },
    /*
     * 刷新年份菜单
     * @param {Number} year 当前选择年份
     * @param {Boolean} highlight 高亮传参年份
     * @private
     */
    "refreshYearMenu": function (year, highlight) {
        var global = this._global,
            menu = [],
            selectedYear;
        year = (year && year < 9996 && year > 1004) ? year : year === undefined ? global.pageYear : global.year;
        global.pageYear = year;
        selectedYear = highlight ? this.isDisabled(year) ? undefined : year : global.year;
        for (var y = year - 5; y < year + 5; y++) {
            menu.push('<a name="' + y + '" class="' + (y === selectedYear ? "ui-datepicker-menu-selected" : this.isDisabled(y) ? " ui-datepicker-disabled" : "") + '">' + y + '</a>');
        }
        global.yearMenuPlaceHolder.empty()
            .elems[0].innerHTML = menu.join("");
        global.yearMenu.find(".ui-datepicker-menu-year-page").find(".ui-datepicker-disabled").removeClass("ui-datepicker-disabled");
    },
    /*
     * 刷新月份菜单
     * @param {Number} month 当前月份(0~11)
     * @private
     */
    "refreshMonthMenu": function (month) {
        var locale = ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一", "十二"],
            global = this._global,
            menu = [];
        month = month || global.month;
        for (var m = 0; m < 12; m++) {
            menu.push('<a name="' + m + '" class="' + (m === global.month ? "ui-datepicker-menu-selected" : this.isDisabled(global.year, m) ? " ui-datepicker-disabled" : "") + '">' + locale[m] + '</a>');
        }
        global.monthMenu.empty()
            .elems[0].innerHTML = menu.join("");
    },
    /*
     * 刷新日历面板
     * @param {Number} year
     * @param {Number} month(0~11)
     * @private
     */
    "refreshBody": function (year, month) {
        var global = this._global,
            options = this._options,
            time = new Date(year = year || global.year, month = parseInt(month || global.month, 10)).getTime();
        if (options.animateSpeed && global.lastDateTime && global.lastDateTime !== time) {
            global.rendering = true;
            global.body = this.fillBody(global.nextBodyCell, year, month);
            global.nextBodyCell = global.prevBodyCell;
            global.prevBodyCell = global.body;
            if (global.lastDateTime > time) {
                // 向前翻页(左->右滚动)
                // 200为弹出面板的宽度值
                global.nextBodyTable.css("marginLeft", -200).insertBefore(global.prevBodyTable).animate({
                    "marginLeft": 0
                }, options.animateSpeed, "liner", function () {
                    var prev = global.prevBodyTable;
                    global.prevBodyTable = global.nextBodyTable;
                    global.nextBodyTable = prev;
                    global.rendering = false;
                });
            } else {
                // 向后翻页(右->左滚动)
                global.prevBodyTable.animate({
                    // 200为弹出面板的宽度值
                    "marginLeft": -200
                }, options.animateSpeed, "liner", function () {
                    var prev = global.prevBodyTable.insertAfter(global.nextBodyTable).removeCss("marginLeft");
                    global.prevBodyTable = global.nextBodyTable;
                    global.nextBodyTable = prev;
                    global.rendering = false;
                });
            }
        } else {
            global.body = global.prevBodyCell = this.fillBody(global.prevBodyCell, year, month);
            global.rendering = false;
        }
        // 标记上一次的时间值，用于翻页时判断是向前还是向后翻页
        global.lastDateTime = new Date(year, month).getTime();
    },
    /*
     * 填充日期值
     * @param {DomObject} elem Table td元素
     * @param {Number} year 年份
     * @param {Number} month 月份 
     * @return {DomObject} elem
     * @private 
     */
    "fillBody": function (elem, year, month) {
        var global = this._global,
            doc = global.pageContext.document,
            tbody = this.generateBody(year, month);
        elem.children().remove();
        if (fastDev.Browser.isIE) {
            // IE下table的innerHTML为只读属性
            var div = doc.createElement("div");
            div.innerHTML = "<table><tbody>" + tbody + "</tbody></table>";
            elem = fastDev(div).find("tbody").replace(elem);
        } else {
            elem.elems[0].innerHTML = tbody;
        }
        // 刷新"今天"按钮
        this.freshUI(true);
        return elem;
    },
    /*
     * 刷新日历头部样式
     * @param {Number} year 年份
     * @param {Number} month 月份(0~11)
     * @private
     */
    "refreshHeader": function (year, month) {
        var global = this._global;
        global.yearInput.removeClass("ui-datepicker-header-input-over").prop("value", this.toLocaleYear(year || global.year));
        global.monthInput.removeClass("ui-datepicker-header-input-over").prop("value", this.toLocaleMonth(month || global.month));
        this.refreshHeaderBtn();
    },
    /*
     * 刷新日历头部按钮样式
     * @param {Number} year 当前年份
     * @param {Number} month 当前月份
     * @private
     */
    "refreshHeaderBtn": function (year, month) {
        var global = this._global;
        year = year || global.year;
        month = month || global.month;
        global.header.find(".ui-datepicker-header-disabled").removeClass("ui-datepicker-header-disabled");
        if (year === global.maxYear) {
            global.nextYearBtn.parent().addClass("ui-datepicker-header-disabled");
            if (month === global.maxMonth) {
                global.nextMonthBtn.parent().addClass("ui-datepicker-header-disabled");
            }
        }
        if (year === global.minYear) {
            global.prevYearBtn.parent().addClass("ui-datepicker-header-disabled");
            if (month === global.minMonth) {
                global.prevMonthBtn.parent().addClass("ui-datepicker-header-disabled");
            }
        }
    },
    /*
     * 刷新至较近可用时间点
     * @param {Date} date
     * @private
     */
    "refreshToRecent": function (date) {
        var global = this._global,
            options = this._options,
            now, year, month, last, time;
        if (!global.selectedYear) {
            // 以指定日期或当前日期点刷新
            now = date || new Date();
        } else {
            // 以指定日期或已选择日期点刷新
            now = date || global.selectedValue;
            global.hours = now.getHours();
            global.minutes = now.getMinutes();
            global.seconds = now.getSeconds();
        }
        date = new Date(now.getFullYear(), now.getMonth() - 1);
        year = date.getFullYear();
        month = date.getMonth();
        // 取得当前年份的下一个可选的月份
        time = this.getUsableMonth("Next", year, month);
        if (time.month === month) {
			// 不包含下一个可选月份时，获取上一个可选月份
            time = this.getUsableMonth("Prev", now.getFullYear(), now.getMonth());
        }
        global.year = year = time.year;
        global.month = month = time.month;
        global.date = date = now.getDate();
        if (date > (last = new Date(year, month + 1, 0).getDate())) {
            global.date = date = last;
        }
        // 确定当前待选日可用
        while ( !! date && this.isDisabled(year, month, date)) {
            date = date >= global.date ? date === last ? global.date - 1 : date + 1 : date - 1;
        }
        global.date = date === 0 ? global.date : date;
        if (options.showTimePicker) {
            // 刷新待选日样式
            this.forSelect(global.forSelectDate = global.date);
        } else {
			// 标记当前待选日期
            global.forSelectDate = global.selectedDate;
        }
        // 刷新头部
        this.refreshHeader();
        // 刷新面板
        this.refreshBody();
        if (options.showTimePicker) {
            // 获取最近整点
            if (global.hours === undefined || global.hours === null) {
				// 取得下一个可选时间值
                time = this.getNextTime(now.getHours(), now.getMinutes(), now.getSeconds(), this.getTimeFocusName());
            } else if (this.isDisabled(global.year, global.month, global.forSelectDate, global.hours, global.minutes, global.seconds)) {
                time = this.getNextTime(global.hours, global.minutes, global.seconds, this.getTimeFocusName());
            } else {
                time = null;
            }
            if (time !== null) {
                global.hours = time[0] || 0;
                global.minutes = time[1] || 0;
                global.seconds = time[2] || 0;
            }
            this.refreshTimePicker();
        }
    },
    /*
     * 隐藏菜单
     * @param {String} type year或month
     * @param {Number} time 当前年月值，月份值(1~12)
     * @param {Boolean} noFresh 是否不刷新
     * @private
     */
    "hideMenu": function (type, time, noFresh) {
        var global = this._global,
            cType = fastDev.Util.StringUtil.capitalize(type);
        if (global["is" + cType + "MenuShowed"]) {
            if (time === undefined) {
                //验证输入框输入
                time = parseInt(global[type + "Input"].prop("value"), 10) || -1;
                time = type === "year" ? (time >= global.minYear && time <= global.maxYear && !this.isDisabled(time)) ? time : global.year : (time > 0 && time < 13 && !this.isDisabled(global.year, time - 1)) ? time - 1 : global.month;
            }
            global[type] = time;
            if (!noFresh) {
                this.refreshBody(global.year, global.month + "");
            }
            this.refreshHeader(global.year, global.month + "");
            global[type + "Input"].elems[0].blur();
            global[type + "Menu"].hide();
            global["is" + cType + "MenuShowed"] = false;
        }
    },
    /*
     * 获取可用年份
     * @param {String} type Next或Prev
     * @param {Number} year 当前年份
     * @param {Boolean} forMonth 是否是获取月份操作
     * @return {Object}
     * @private
     */
    "getUsableYear": function (type, year, forMonth) {
        var global = this._global,
            extremum = global[type === "Next" ? "maxYear" : "minYear"],
            month = global.month,
            // 防止陷入死循环
            maxLoopCount = 2000;
        year = type === "Next" ? year >= extremum ? extremum - 1 : year : year <= extremum ? extremum + 1 : year;
        while (type === "Next" ? ++year < extremum : --year > extremum) {
            if (!this.isDisabled(year)) {
                //可用年份
                // 如果当前月份被禁用，则获取当前年的上或下一个可用月份
                if (!forMonth && this.isDisabled(year, month)) {
                    while (type === "Next" ? --month > -1 : ++month < 12) {
                        if (!this.isDisabled(year, month)) {
                            break;
                        } else if (month === (type === "Next" ? 0 : 11)) {
                            // 获取当前年下或上一个可用的月份
                            month = global.month;
                            while (type === "Next" ? ++month < 12 : --month > -1) {
                                if (!this.isDisabled(year, month)) {
                                    break;
                                } else if (month === (type === "Next" ? 11 : 0)) {
                                    // 当前年根本无可用的月份
                                    month = null;
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }
                break;
            }
            if (!(maxLoopCount--)) {
                break;
            }
        }
        return maxLoopCount ? {
            "year": year,
            "month": month
        } : {
            "year": global[type === "Next" ? "maxYear" : "minYear"],
            "month": global[type === "Next" ? "maxMonth" : "minMonth"]
        };
    },
    /*
     * 获取可用月份
     * @param {String} type Next或Prev
     * @param {Number} year 当前年份
     * @param {Number} month 当前月份(0~11)
     * @private
     */
    "getUsableMonth": function (type, year, month) {
        var global = this._global,
            usableYear, temp = month,
            maxLoopCount = 2000;
        while (maxLoopCount--) {
            if (month === (type === "Prev" ? 0 : 11)) {
                // 获取下一个可用年份
                if ((usableYear = this.getUsableYear(type, year, true).year) === year) {
                    month = temp;
                    break;
                }
                year = usableYear;
                month = (type === "Prev" ? 11 : 0);
            } else {
                month += (type === "Prev" ? -1 : 1);
            }
            if (!this.isDisabled(year, month)) {
                break;
            }
        }
        return maxLoopCount ? {
            "year": year,
            "month": month
        } : {
            "year": global[type === "Prev" ? "minYear" : "maxYear"],
            "month": global[type === "Prev" ? "minMonth" : "maxMonth"]
        };
    },
    /*
     * 获取当前时间的下一个较近的可选时间值
     * @param {Number} hours
     * @param {Number} minutes
     * @param {Number} seconds
     * @param {String} focus
     * @param {Array} original 原值
     * @private
     */
    "getNextTime": function (hours, minutes, seconds, focus, original) {
        var global = this._global,
            sPlus = global.showSeconds && (!focus || focus === "seconds" || !! original),
            mPlus = global.showMinutes && (!focus || focus === "minutes" || !! original),
            hPlus = global.showHours && (!focus || focus === "hours"),
            step = focus ? 1 : 15,
            args = Array.prototype.slice.call(arguments, 0, 3),
            prev = false,
            time;
        minutes = focus ? minutes : mPlus ? Math.floor(minutes / 15) * 15 : 0;
        seconds = focus ? seconds : sPlus ? !! original ? 0 : 45 : 0;
        if ( !! original && !this.isDisabled(global.year, global.month, global.forSelectDate, hours, minutes, seconds)) {
            return [hours, minutes, seconds];
        }
        // 查找下一个可选的时间值
        do {
            if (sPlus) {
				// 递增秒
                hPlus = ((mPlus = !(seconds = ((time = seconds + step) < 60 ? time : 0)) && global.showMinutes) || (!seconds && !global.showMinutes)) && global.showHours;
                if (seconds === 0 && !hPlus && !mPlus) {
                    prev = true;
                    break;
                }
            }
            if (mPlus && !(hPlus = !(minutes = ((time = minutes + step) < 60 ? time : 0)) && global.showHours) && minutes === 0) {
				// 递增分
                prev = true;
                break;
            }
            if (hPlus && !(hours = (hours < 23 ? hours + 1 : 0))) {
				// 递增时
                prev = true;
                break;
            }
            if ( !! original && (hours > original[0] || (hours === original[0] && minutes >= original[1]) || (hours === original[0] && minutes === original[1] && seconds >= original[2]))) {
                return original;
            }
        } while (this.isDisabled(global.year, global.month, global.forSelectDate, hours, minutes, seconds));
        return prev ? original || this.getNextTime(hours, minutes, seconds, focus, args) : [hours, minutes, seconds];
    },
    /*
     * 获取当前时间的上一个较近的可选时间值
     * @param {Number} hours
     * @param {Number} minutes
     * @param {Number} seconds
     * @param {Array} original 原值
     * @private
     */
    "getPrevTime": function (hours, minutes, seconds, focus, original) {
        var global = this._global,
            sPlus = focus ? global.showSeconds && (focus === "seconds" || !! original) : false,
            mPlus = global.showMinutes && (!focus || focus === "minutes" || !! original),
            hPlus = global.showHours && (!focus || focus === "hours"),
            step = focus ? -1 : -15,
            args = Array.prototype.slice.call(arguments, 0, 3),
            next = false,
            time;
        minutes = focus ? minutes : mPlus ? Math.floor(minutes / 15) * 15 : 0;
        if ( !! original && !this.isDisabled(global.year, global.month, global.forSelectDate, hours, minutes, seconds)) {
            return [hours, minutes, seconds];
        }
        do {
            if (sPlus) {
				// 递增秒
                if ((time = seconds + step) < 0) {
                    seconds = 59;
                    if (!(mPlus = global.showMinutes) && !(hPlus = global.showHours)) {
                        next = true;
                        break;
                    }
                } else {
                    seconds = time;
                    hPlus = mPlus = false;
                }
            }
            if (mPlus) {
				// 递增分
                if ((time = minutes + step) < 0) {
                    minutes = focus ? 59 : 45;
                    if (!(hPlus = global.showHours)) {
                        next = true;
                        break;
                    }
                } else {
                    minutes = time;
                    hPlus = false;
                }
            }
            if (hPlus) {
				// 递增时
                if ((time = hours - 1) < 0) {
                    hours = 23;
                    next = true;
                    break;
                } else {
                    hours = time;
                }
            }
            if ( !! original && (hours < original[0] || (hours === original[0] && minutes <= original[1]) || (hours === original[0] && minutes === original[1] && seconds <= original[2]))) {
                return original;
            }
        } while (this.isDisabled(global.year, global.month, global.forSelectDate, hours, minutes, seconds));
        return next ? original || this.getPrevTime(hours, minutes, seconds, focus, args) : [hours, minutes, seconds];
    },
    /*
     * 判断该日期是否被禁用
     * @param {Number|Date} year 年
     * @param {Number} month 月(0~11)
     * @param {Number} date 日
     * @param {Number} hours 时
     * @param {Number} minutes 分
     * @param {Number} seconds 秒
     * @return {Boolean}
     * @private
     */
    "isDisabled": function (year, month, date, hours, minutes, seconds) {
        var that = this,
            options = that._options,
            global = this._global,
            time, disabled;
        hours = global.showHours ? hours : undefined;
        minutes = global.showMinutes ? minutes : undefined;
        seconds = global.showSeconds ? seconds : undefined;
        // 最值判断
        if (year === undefined || isNaN(year)) {
            disabled = true;
        } else if (month === undefined || isNaN(month)) {
            disabled = year > global.maxYear || year < global.minYear;
        } else if (date === undefined || isNaN(date)) {
            time = new Date(year, month).getTime();
            disabled = time >= new Date(global.maxYear, global.maxMonth + 1).getTime() || time < new Date(global.minYear, global.minMonth, 1).getTime();
        } else if (hours === undefined) {
            time = new Date(year, month, date).getTime();
            disabled = time >= new Date(global.maxYear, global.maxMonth, global.maxDay + 1).getTime() || time < new Date(global.minYear, global.minMonth, global.minDay).getTime();
        } else if (minutes === undefined) {
            time = new Date(year, month, date, hours).getTime();
            disabled = time >= new Date(global.maxYear, global.maxMonth, global.maxDay, global.maxHours + 1).getTime() || time < new Date(global.minYear, global.minMonth, global.minDay, global.minHours).getTime();
        } else if (seconds === undefined) {
            time = new Date(year, month, date, hours, minutes).getTime();
            disabled = time >= new Date(global.maxYear, global.maxMonth, global.maxDay, global.maxHours, global.maxMinutes + 1).getTime() || time < new Date(global.minYear, global.minMonth, global.minDay, global.minHours, global.minMinutes).getTime();
        } else {
            time = new Date(year, month, date, hours, minutes, seconds).getTime();
            disabled = time >= new Date(global.maxYear, global.maxMonth, global.maxDay, global.maxHours, global.maxMinutes, global.maxSeconds + 1).getTime() || time < new Date(global.minYear, global.minMonth, global.minDay, global.minHours, global.minMinutes, global.minSeconds).getTime();
        }
        return (!disabled && !! this.cronParser) ? this.match({
            "year": year,
            "month": month,
            "date": date,
            "hours": hours,
            "minutes": minutes,
            "seconds": seconds
        }) : disabled;
    },
    /*
     * 判断日期值是否为当前所选值
     * @param {Number} year
     * @param {Number} month
     * @param {Number} date
     * @return {Boolean}
     * @private
     */
    "isSelected": function (year, month, date) {
        var global = this._global;
        return (global.selectedDate === date && global.selectedMonth === month && global.selectedYear === year && global.forSelectDate === date);
    },
    /*
     * 判断是否需要显示时间选择器
     * @private
     */
    "isShowTimePicker": function () {
        var global = this._global;
        if (global.show === "inline") {
            return false;
        }
        var options = this._options,
            format = options.format,
            // 查找小时域
            h = /.*[Hh]{1,2}.*/g.test(format),
            // 查找分钟域
            m = /.*m{1,2}.*/g.test(format),
            // 查找秒钟域
            s = /.*s{1,2}.*/g.test(format),
            //判断
            isShow = options.showTimePicker === true ? true : options.showTimePicker === false ? false : (h || m || s);
        if (isShow) {
            global.showHours = h;
            global.showMinutes = m;
            global.showSeconds = s;
        }
        return isShow;
    },
    /*
     * 预备选取
     * @param {Number} date 日
     * @param {Number} month 月（0~11）
     * @param {Number} year 年
     * @private
     */
    "forSelect": function (date, month, year) {
        var options = this._options,
            global = this._global;
        global.body.find(".ui-datepicker-selected").removeClass("ui-datepicker-selected");
        global.body.find("[name='" + date + "-" + global.sequence + "']").addClass("ui-datepicker-selected");
        // 待选日期标记
        if (options.showTimePicker) {
            global.forSelectDate = date;
            if (this.isDisabled(year || global.year, month === undefined ? global.month : month, date, global.hours, global.minutes, global.seconds)) {
                // 需重新判断当天时间选择值是否有效
                this.timePickerBtnClick("up");
            }
        }
    },
    /*
     * 选择指定的日期时间
     * @param {Date} date 日期对象
     * @return {Boolean} 是否已接受此值
     * @private
     */
    "select": function (date, useChange) {
        var options = this._options,
            global = this._global,
            value;
        // 格式化为有效日期对象
        date = this.toValidDate(date);
        if ( !! date && this.isDisabled(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds())) {
            return false;
        }
        value = date ? fastDev.Util.DateUtil.format(date, options.format) : "";
        if (options.onPick.call(this, date, value) !== false) {
			if (useChange !==false && global.initialized && value !== global.lastValue ) {
				(options.onchange || fastDev.noop).call(this, value, global.selectedValue);
				global.lastValue = value;
			}
            options.value = value;
            if (global.show !== "inline") {
                global.input.prop("value", value);
                if (global.handleClick) {
                    this.fire("focus");
                }
            }
            // 找到上下关联的日期控件，可以是日期控件实例，或者是日期控件的ID值
            // 每次选取值都需要重新找的原因是，初始时找可能相关联的日期控件还未实例化完成，或者关联的日期控件已经被销毁了
            fastDev.each(["After", "Before"], function (i, name) {
                name = "time" + name;
                global[name] = options[name].alias === "DatePicker" ? options[name] : fastDev.getInstance(options[name]);
            });
            if ( !! global.timeAfter && global.timeAfter._global.initialized && typeof global.timeAfter.setMaxDate === "function") {
                global.timeAfter.setMaxDate(date);
            }
            if ( !! global.timeBefore && global.timeBefore._global.initialized && typeof global.timeBefore.setMinDate === "function") {
                global.timeBefore.setMinDate(date);
            }
            // 保存当前选中的日期详细信息
            fastDev.apply(global, {
                "selectedYear": date ? date.getFullYear() : null,
                "selectedMonth": date ? date.getMonth() : null,
                "selectedDate": date ? date.getDate() : null,
                "selectedValue": date,
                "hours": date ? date.getHours() : null,
                "minutes": date ? date.getMinutes() : null,
                "seconds": date ? date.getSeconds() : null
            });
            return true;
        }
    },
    /*
     * 获取有效时间值
     * @param {String} name
     * @return {Object}
     * @private
     */
    "getTime": function (name) {
        var global = this._global,
            hours, minutes, seconds, time;
        // 时分秒处理
        hours = parseInt(global.timePickerHours.prop("value"), 10);
        hours = isNaN(hours) ? 0 : hours > 23 ? 23 : hours < 0 ? 0 : hours;
        minutes = parseInt(global.timePickerMinutes.prop("value"), 10);
        minutes = isNaN(minutes) ? 0 : minutes > 59 ? 59 : minutes < 0 ? 0 : minutes;
        seconds = parseInt(global.timePickerSeconds.prop("value"), 10);
        seconds = isNaN(seconds) ? 0 : seconds > 59 ? 59 : seconds < 0 ? 0 : seconds;
        if (!this.isDisabled(global.year, global.month, global.forSelectDate, hours, minutes, seconds)) {
            return {
                "hours": hours,
                "minutes": minutes,
                "seconds": seconds
            };
        } else {
            time = (name && (name === "timePickerUpBtn" || name === "timePickerDownBtn")) ? [hours, minutes, seconds] : this.getNextTime(hours, minutes, seconds, this.getTimeFocusName());
            return {
                "hours": time[0],
                "minutes": time[1],
                "seconds": time[2]
            };
        }
    },
    /*
     * 刷新时间选择器
     * @param {Number} hours 小时
     * @param {Number} minutes 分钟
     * @param {Number} seconds 秒钟
     * @private
     */
    "refreshTimePicker": function (hours, minutes, seconds) {
        if (this._options.showTimePicker) {
            var global = this._global,
                fn = fastDev.Util.NumberUtil.pad;
            // 时
            hours = global.showHours ? fn(hours || global.hours, 2) : "00";
            // 分
            minutes = global.showMinutes ? fn(minutes || global.minutes, 2) : "00";
			// 秒
            seconds = global.showSeconds ? fn(seconds || global.seconds, 2) : "00";
            global.timePickerHours.prop("value", hours);
            global.timePickerMinutes.prop("value", minutes);
            global.timePickerSeconds.prop("value", seconds);
        }
    },
    /*
     * 定位层
     * @param {fastDev.Core.DomObject} obj 需定位的对象
     * @param {fastDev.Core.DomObject} elem 相对其定位的元素
     * @return {fastDev.Core.DomObject} obj 定位对象
     * @private
     */
    "position": function (obj, elem) {
        var global = this._global;
        if (!obj.resetedPostion) {
			// 重置一次父元素的目的是因为控件有可能是通过后期其他控件通过字符串形式编译实例化出来的，追加操作可能将弹出层追加到原容器元素里面去了
            obj.appendTo(global.pageContext.document.body);
            obj.resetedPostion = true;
        }
        // 定位层
        return fastDev.Util.PositionUtil.locate(obj, elem, global.pageContext, 2, false, obj === global.picker ? this._options.direction : "auto");
    },
    /**
     * 显示日历面板
     * @private 
     */
    "showPopup": function () {
        var global = this._global,
            options = this._options;
        if (global.isPickerShowed || (options.disabled && global.show !== "inline")) {
            // 已显示日历面板或者只读状态，则返回
            return this;
        }
        // 显示日历面板
        global.picker.show();
        // 刷新面板
        this.refreshToRecent( !! global.selectedYear ? global.selectedValue : new Date());
        if (global.show === "inline") {
			// pageYear指示了当前选取下拉菜单上的中心年份
            global.pageYear = global.year;
        } else {
            // 定位
            this.position(global.picker, global.wrapper);
            // 聚焦
            global.input.parent().addClass("ui-form-focus");
            global.trigger.parent().addClass("ui-form-trigger-over");
        }
        // 绑定隐藏或刷新日历面板事件
        if (!options.inside) {
            global.topDocHtml.bind("click", global.docClickEventHandle);
        }
        global.docHtml.bind("click", global.docClickEventHandle);
        global.clear = global.isPickerShowed = true;
        global.isBlur = false;
        return this;
    },
    /**
     * 隐藏日历面板 
     * @private
     */
    "hidePopup": function () {
        var options = this._options,
            global = this._global;
        // 隐藏面板
        this.hideMenu("month", undefined, true);
        this.hideMenu("year", undefined, true);
        global.picker.hide();
        if (global.show === "block") {
            global.docHtml.unbind("click", global.docClickEventHandle);
            if (!options.inside) {
                global.topDocHtml.unbind("click", global.docClickEventHandle);
            }
            // 失焦
            global.input.parent().removeClass("ui-form-focus");
            global.trigger.parent().removeClass("ui-form-trigger-over");
            if (!global.isBlur) {
                global.onBlur();
                global.isBlur = true;
            }
        }
        global.lastDateTime = global.forSelectDate = global.isPickerShowed = null;
        return this;
    },
    /**
     * 显示文本输入框或者日历面板（页面内嵌展现时）
     * @return {fastDev.Ui.DatePicker} 本控件实例
     */
    "show": function () {
        var global = this._global,
            options = this._options;
        if (global.show === "inline") {
            options.display = "inline";
            this.showPopup();
        } else {
            options.display = "block";
            global.textbox.show();
        }
        return this;
    },
    /**
     * 隐藏日期输入框或者日历面板（页面内嵌展现时）
     * @return {fastDev.Ui.DatePicker} 本控件实例
     */
    "hide": function () {
        this._global.textbox.hide();
        this._options.display = false;
        return this.hidePopup();
    },
    /*
     * 获取本地化月份值
     * @param {Number} month 月
     * @return {String}
     * @private
     */
    "toLocaleMonth": function (month) {
        var locale = ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"];
        return locale[month];
    },
    /*
     * 获取本地化年份值
     * @param {Number} year 年
     * @return {String}
     * @private
     */
    "toLocaleYear": function (year) {
        return year + "年";
    },
    /*
     * 获取有效日期对象
     * @param {String|Date} date 需验证的日期字符串或对象
     * @return {Date} 若为有效日期，则返回解析后的日期对象，否则返回null
     */
    "toValidDate": function (date) {
        if (date) {
            if (typeof date === "string") {
                date = fastDev.Util.DateUtil.parse(fastDev.Util.StringUtil.trim(date));
            }
            var value = date.toString();
            if (!(value === "Invalid Date" || value === "NaN")) {
                return date;
            }
        }
        return null;
    },
    /*
     * 设置日期时间值
     * @param {String|Date} value 字符串形式或日期对象形式的日期时间值
     * @return {fastDev.Ui.DatePicker} 本控件实例
     */
    "setValue": function (value) {
        var global = this._global;
        if (!global.parsed) {
            return this;
        }
        this.select(/now/i.test(value) ? new Date() : value, false);
        if (global.show === "inline") {
            this.refreshToRecent();
        }
        return this;
    },
    /*
     * 获取日期时间值
     * @return {String} 按配置格式格式化后的日期时间值
     */
    "getValue": function () {
        return this._options.value;
    },
    /*
     * 获取控件当前值的日期对象
     * @return {Date} 当前日期对象或者null
     */
    "getDate": function () {
        return this._global.selectedValue || null;
    },
    /*
     * 设置极值日期
     * @param {String} type max或min
     * @return {fastDev.Ui.DatePicker}
     * @private
     */
    "setExtremumDate": function (date, type) {
        var global = this._global,
            options = this._options,
            extremum, time;
        date = this.toValidDate(date);
        if (date && (time = date.getTime()) <= global.maxDate.getTime() && time >= global.minDate.getTime()) {
            extremum = options[type + "Date"] = date;
        } else {
            extremum = options[type + "Date"] = global[type + "Date"];
        }
        global[type + "Year"] = extremum.getFullYear();
        global[type + "Month"] = extremum.getMonth();
        global[type + "Day"] = extremum.getDate();
        global[type + "Hours"] = extremum.getHours();
        global[type + "Minutes"] = extremum.getMinutes();
        global[type + "Seconds"] = extremum.getSeconds();
        if (type === "max") {
            if (extremum.getTime() < options.minDate.getTime()) {
                this.setMinDate(global.minDate);
            }
            if (global.selectedValue && global.selectedValue.getTime() > extremum.getTime()) {
                this.setValue("");
            }
        } else {
            if (extremum.getTime() > options.maxDate.getTime()) {
                this.setMaxDate(global.maxDate);
            }
            if (global.selectedValue && global.selectedValue.getTime() < extremum.getTime()) {
                this.setValue("");
            }
        }
        if (global.show === "inline" && global.initialized) {
            this.refreshToRecent();
        }
        return this;
    },
    /*
     * 设置最小日期限制
     * @param {String|Date} date 日期时间字符串或日期对象
     * @return {fastDev.Ui.DatePicker} 本控件实例
     */
    "setMinDate": function (date) {
        return this.setExtremumDate(date, "min");
    },
    /*
     * 设置最大日期限制
     * @param {String|Date} date 日期时间字符串或日期对象
     * @return {fastDev.Ui.DatePicker} 本控件实例
     */
    "setMaxDate": function (date) {
        return this.setExtremumDate(date, "max");
    },
    /*
     * 设置是否只读
     * @param {Boolean} [readonly=true] 是否只读
     * @return {fastDev.Ui.DatePicker} 本控件实例
     */
    "setReadonly": function (readonly) {
        var options = this._options;
        if (this._global.show === "inline" || !! options.disabled) {
            return;
        }
        options.readonly = readonly === false ? false : true;
        return this;
    },
    /*
     * 启用控件
     * @return {fastDev.Ui.DatePicker} 本控件实例
     */
    "enable": function () {
        this._options.disabled = false;
        this.setReadonly(false);
        this._global.input.prop("disabled", "").parent().removeClass("ui-form-disabled");
        return this;
    },
    /*
     * 禁用控件
     * @return {fastDev.Ui.DatePicker} 本控件实例
     */
    "disable": function () {
        this._options.disabled = false;
        this.setReadonly(true);
        this._options.disabled = true;
        this._global.input.prop("disabled", "disabled").parent().addClass("ui-form-disabled");
        return this;
    }
});
/**
* @class fastDev.Ui.Form
* @extends fastDev.Ui.Component 
* 此控件用于表单操作,对表单的加载、提交以及验证三大功能做了封装，继承自Component，表单类控件。<p>
* 注意事项：本版本的表单只有html模式，表单里的布局自由控制。如想实现类似之前js布局，可用表格布局，在table上加样式ui-form-table，放文本的td加样式ui-form-table-dt，放控件的td加样式ui-form-table-dd即可。<p>
* 作者：姜玲<p>
*
*		<form itype="Form" action="example_submit.jsp" id="form1" initSource="example_1_init.jsp" dataSource="example_1_load.jsp" requestType="post" saveInstance="true" onSubmitSuccess="submitSuccess()">
*			<!--表单内的各个控件...-->
*		</form>
*/
fastDev.define("fastDev.Ui.Form", {
	"extend" : "fastDev.Ui.Component",
	"alias" : "Form",
	"_options" : {
		/**
		 * @cfg {String}
		 * 表单控件初始化数据来源URL地址
		 */
		"initSource" : null,
		/**
		 * @cfg {String}
		 * 表单控件的值来源URL地址
		 */
		"dataSource" : null,
		/**
		 * @cfg {json}
		 * 表单控件初始化静态数据（有initSource数据源的话，会覆盖此静态数据源）
		 */
		"items" : null,
		/**
		 * @cfg {json}
		 * 表单控件的值（有dataSource数据源的话，会覆盖此静态数据值）
		 */
		"value" : null,
		/**
		 * @cfg {String}
		 * 表单提交目标URL地址
		 */
		"action" : null,		
		/**
		 * @cfg {String}[requestType="get"]
		 * 表单提交方式"get"、"post"，默认"get"
		 */
		"requestType" : "get",		
		/**
		 * @cfg {Boolean}[submitJson=true]
		 * 是否提交Json格式数据，默认true
		 */
		"submitJson" : true,	
		/**
		 * @cfg {Json}{"控件名1":"值一","控件名2":"值二",...}
		 * 追加提交的数据
		 */	
		"otherSubmitData" : "",
		/**
		 * @cfg {String}
		 * 验证信息配置.json文件地址
		 */
		"errorFile" : null,
		/**
		 * @cfg {Boolean}
		 * 是否开启验证，默认true
		 */
		"validate" : true,
		/**
		 * @cfg {Boolean}
		 * 是否验证已经隐藏掉的控件，默认true
		 */
		"isValidHidden" : true,
		/**
		 * @cfg {Boolean}
		 * 是否设置为实例，默认true
		 */
		"saveInstance" : true,
		/**
		 * @cfg {json}
		 * 验证提示信息
		 */
		"errorMsg" : null,
		/**
		 * @cfg {Boolean}[resetToBlank=true]
		 * 清空数据,如设false重置到表单的dataSource值，默认true
		 */
		"resetToBlank" : true,
		"enableDataSet" : false,
		"enableInitProxy" : true,
		"enableDataProxy" : true,
		/**
		 * @event onDisplayError
		 * 自定义错误显示处理  
		 * @param {Array} errorArray
		 */
		"onDisplayError" : fastDev.noop,
		/**
		 * @event onBeforeInitalize
		 * 表单初始化之前的回调方法
		 */
		"onBeforeInitalize" : fastDev.noop,
		/**
		 * @event onAfterLoadData
		 * 表单加载完成时的回调方法
		 */
		"onAfterLoadData" : fastDev.noop,
		/**
		 * @event onSubmitSuccess
		 * 提交之后的回调事件
		 * @param {Object}  返回action请求结果
		 */
		"onSubmitSuccess" : fastDev.noop,
		/**
		 * @event onAfterLoadInit
		 * initSource数据返回后回调触发。继承自基类
		 * @param {Object}  返回action请求结果
		 */
		"onAfterLoadInit":fastDev.noop,
		/**
		 * @event onBeforeSubmit
		 * 提交之前的方法，返回"false"阻止提交。
		 * @param {Boolean}  
		 */
		"onBeforeSubmit":fastDev.noop,
		/**
		 * @event onSubmitError
		 * 提交失败的回调事件(未实现)
		 * @param {Object}  返回action请求结果
		 */
		"onSubmitError":fastDev.noop
	},
	"_global" : {
		//控件集
		"controlMap" : {},
		//控件id字符串
		"ids":[],
		//错误提示的配置数据
		"errorConfig" : null,
		//缓存的控件值集合
		"cacheValue" : null,
		//错误信息集
		"errorMsg":"",
		//重新请求初始化数据标记
		"reloadinitSource":false,
		//表单对象
		"form":null,
		//表单数据值
		"formDataValue":null,
		//初始化数据集
		"initData":null,
		//表单里的控件
		"formchild":null
	},	
	"fields" : ["id","data"],
	// 使用父类文档说明
	"ready" : function(options,global){
		 if(options.id===""){
			options.id=fastDev.getID();
		}
	 },
	// 使用父类文档说明
	 "construct" : function(options,global){
		if(options.errorFile){
			this.initErrorConfig();
		}
		options.onBeforeInitalize.call(this);		
		var form=fastDev("form[id='"+options.id+"']"),that=this;
		global.form=form;
		var formchild=form.find("[itype][id]");
		global.formchild=formchild;
		formchild.attr("compile","false");
		var fchild=formchild.elems,len=fchild.length,ids=[],child;
		for(var i=0;i<len;i++){
			child=fastDev(fchild[i]);
			child.attr("saveInstance","true");
			if(child.attr("itype")==="SelectTree"){
				child.attr("sTreeClickAfterShow","false");
			}
			ids[i]=child.prop("id");
		}
		global.ids=ids;	
		fastDev.Core.ControlBus.compile("ftype",form.elems[0]);
		this.saveControlInstance();
		if(!!options.items){
			global.initData =options.items;
		}
		//这里就创建没有数据的空控件并得到实例
		this.initProxy.bindAfterLoad(fastDev.setFnInScope(this,this.saveData));
	},
	/**
	 * 保存items数据到全局变量中
	 * @param {json} data
	 * @private
	 */
	"saveData" : function(data){
		this._global.initData =data;
		this.onAfterLoadInit();
	},
	 /**
	 * 初始化控件列表
	 * @param {Array} items数据项
	 * @protected
	 */
	"constructItems" : function() {
		//这个里面得到数据后再用控件实例重新加载数据
	    var options=this._options, global=this._global;
		if(global.reloadinitSource){
			return this.reloadItems();
		}
		var form=global.form;//fastDev("form[id='"+options.id+"']");
		if(form.elems.length===0){
			return;
		}
		this.initProxy.setAction(options.action);
		form.bind("submit",this.submit);
		var fchild=global.formchild.elems,len=fchild.length,id,data,child,control,type;
		for(var i=0;i<len;i++){
			child=fastDev(fchild[i]);
			id=child.prop("id");
			data=this.getDataByid(id);
			if(data && data.length>0){				
				control=fastDev.getInstance(id);
				if(control.alias==="SelectTree"){
					control.getGlobal().tree.dataset.fill(data,false,true,true);
				}else{
					if(!!control.dataset){
					control.dataset.fill(data,false,true,true);
					}
				}
			}
		}
	},
	/**
	 * 保存控件的实例
	 * @private
	 */
	"saveControlInstance" : function(){
		var global=this._global,ids=global.ids;
		global.controlMap={};
		var controlMap=global.controlMap,ilen=ids.length,tempControl;
		for(var i=0;i<ilen;i++){
			tempControl=fastDev.getInstance(ids[i]);
			if(tempControl){				
				controlMap[ids[i]] = tempControl;
			}
		}	
	},	
	/**
	 * 通过id查找数据
	 */
	"getDataByid" : function(id){		
		var dataset=this._global.initData,data;
		if(!dataset){
			return null;
		}
		if(dataset[0] && dataset[0].cacheData){
			dataset=dataset[0].cacheData;
		}
		var len =dataset.length;
		if(len>0){
			for(var i=0;i<len;i++){
				if(dataset[i].id===id){
					return dataset[i].data;
				}
			}
		}else{			
			data=dataset[id];			
			if(data && data.data){
				data=data.data;
			}
			return data;
		}
	},
	/**
	 * 表单提交
	 */
	"submit" : function() {
		// 调用controlMap中各控件验证并封装数据
		var sdata = {},data={}, options = this._options;
		if(options.onBeforeSubmit.call(this)===false){
			return false;
		}
		data = this.getItems();
		this.initProxy.setAction(options.action);		
		if(options.otherSubmitData){
			data= this.addData(data);
		}
		if(!data) {
			return false;
		}
		var msg= this._global.errorMsg;
		if(options.onDisplayError!==fastDev.noop){			
			options.onDisplayError.call(this,msg);
		}
		if(!fastDev.isEmptyObject(msg)){
			return false;
		}		
		this.initProxy.save(data,options.onSubmitSuccess,true,options.submitJson);
		return false;
	},
	/**
	 * 追加表单提交的数据
	 * @private
	 */
	"addData":function (data) {
		var options = this._options,fn=Function;
		var otherData=options.otherSubmitData;
		if("string" === typeof otherData){
			otherData=(new fn("return " + otherData))();
		}
		if(!!otherData.length){
		for(var i=0;i<otherData.length;i++){
			var p=otherData[i].name;
			var result=otherData[i].value;
			if(p && result){
				data[p]=result;
			}
		}
		}else{
			for(var o in otherData){
				data[o]=otherData[o];
			}
		}			
		return data;
	},
	/**
	 * 获取当前表单的控件集合
	 * @return {Object} 
	 */
	"getControlMap" : function(){
		return this._global.controlMap;
	},
	/**
	 * 获取当前表单的值集合
	 * @return {String} values控件值集合
	 */
	"getValues" : function(type){
		var value, data = {}, validation = true, options = this._options, controlMap = this._global.controlMap,errorMsg={},result;
		for(var p in controlMap) {
			result="";
			if(controlMap[p]) {
				if(controlMap[p].getValue) {
					result=controlMap[p].getValue();
				}
				if(controlMap[p].validate) {
					if((!options.isValidHidden && controlMap[p].isShow()) || options.isValidHidden){
					var errmsg=controlMap[p].validate();
					if(!!errmsg){
						errorMsg[p]=errmsg;
						continue;
					}
					}
				}	
				data[p] = fastDev.Util.StringUtil.trim(result);
			}
		}	
		this._global.errorMsg=errorMsg;
		return data;
	},
	/**
	 * 获取当前表单的值集合的键值对的对象
	 * @return {Object} values控件集的键值对集合
	 */
	"getItems" : function() {
		return this.getValues("map");
	},
	/**
	 * 获取当前表单的InitSource获得的值
	 * @return {Json}
	 */
	"getInitData" : function(){
		var data=this.dataset.select();
		return fastDev.Util.JsonUtil.getJsonByData(data);
	},
	/**
	 * 获取当前表单的DataSource获得的值
	 * @return {Json}
	 */
	"getDataValue" : function(){
		return this._global.formDataValue;
	},
	/**
	 * 设置表单的值
	 * @param {Object} value控件的json格式键值对对象
	 * <p>- 此方法不能在onAfterLoadData方法内使用</p>
	 */
	"setValue" : function(value) {
		var options = this._options,global=this._global, controlMap =global.controlMap,cacheValue={};
		if(value){
			if(value[0] && value[0].cacheData){
				value=value[0].cacheData;
			}
			global.formDataValue=value;
		}
		for(var p in value) {
			if(controlMap[p]){
				controlMap[p].setValue(value[p]);
			}
		}
		if(!global.cacheValue){
			for(var o in controlMap) {
				if(!!controlMap[o].getValue){
				cacheValue[o]=controlMap[o].getValue();
				}
			}
			global.cacheValue=cacheValue;
		}
	},
	/**
	 * 设置表单的值
	 * @param {Object} value控件的json格式键值对对象
	 */
	"setValues" : function(value) {
		var options = this._options,global=this._global, controlMap =global.controlMap;
		for(var p in value) {
			if(controlMap[p]){
				controlMap[p].setValue(value[p]);
			}
		}
	},
	/**
	 * 清空表单
	 */
	"cleanData":function(){
		var controlMap=this._global.controlMap;
		for(var p in controlMap){					
			 if(controlMap[p].reset){
				 controlMap[p].reset();
			 }
		}
	},
	/**
	 * 重置表单（给表单控件赋上原来的值）
	 */
	"resetData":function(){
		this.cleanData();
		var value=this._global.cacheValue;
		this.setValue(value);
	},
	/**
	 * 重置initsource数据
	 * private
	 */
	"reloadItems" :function(){		
		var controlMap=this._global.controlMap;
		for(var p in controlMap) {
			if(controlMap[p]) {					
				var tdata=this.getDataByid(p)||[];
				if(!fastDev.isEmptyArray(tdata)){
					controlMap[p].clean();
					var items=tdata;//[0]._options.data.data;
					if(!fastDev.isArray(items)) {
						items = [items];
					}
					if(controlMap[p].addItems){
						controlMap[p].addItems(items);
					}
				}
			}
		}
	},
	/**
	 * 刷新数据(刷新initSource数据)
	 * @param {String}可选参数 url，不传刷新原来的initSource
	 */
	"refreshData" : function(urlstr) {
		if(urlstr){			
			this.initRefresh(urlstr);			
		}else{
			this.initRefresh();
		}
	},
	/**
	 * 刷新数据
	 * @private
	 */
	"initRefresh" : function(urlstr){		
		this._global.reloadinitSource=true;
		this.superClass.initRefresh.call(this,{url:urlstr});
	},
	/**
	 * 初始化验证错误配置信息
	 * @private
	 */
	"initErrorConfig" : function() {
		var that = this, options = this._options;
		var errorProxy= fastDev.create("Proxy", {
				url : options.errorFile,
				queue : this._global.queue,
				onAfterLoad : fastDev.setFnInScope(this, this.saveErrorConfig)
		 });		
		errorProxy.load();		
	},
	/**
	 * 验证错误配置信息
	 * @private
	 */
	"saveErrorConfig":function(o_config){
		var 
			// 控件示例ID
			id, 
			// 控件实例
			control, 
			// 控件自定义的错误配置
			i_config, 
			// 表单错误信息配置文件中的全局配置
			g_config, 
			// 表单错误信息配置文件中的自定义配置
			c_config, 
			// 表单内各输入控件实例Map
			controlMap=this._global.controlMap;
			
		for( id in controlMap ){
			control = controlMap[id];
			i_config = control._options.errorConfig || {};
			c_config = o_config[id] || {};
			g_config = o_config.defaultInfo || {};
			control._options.errorConfig = fastDev.apply({}, g_config, c_config, i_config);
			//this.setErrorConfig(controlMap[id]);
		}
	},
	/**
	 * 表单是否验证通过
	 */
	"isValid":function(){
		this.getValues();
		return fastDev.isEmptyObject(this._global.errorMsg);
	}
});
/**
 * @class fastDev.Ui.RadioGroup
 * @extends fastDev.Ui.Component
 * 单选框组控件，继承自CheckBoxGroup，表单类组件。<p>
 * 作者：姜玲
 *
 *		 <div itype="RadioGroup" name="check2" id="check2">
 *			<div value="1" text="足球" ></div>			
 *			<div value="2" text="排球" checked=true></div>
 *			<div value="3" text="羽毛球"></div>
 *			<div value="4" text="乒乓球"></div>
 *		</div>
 */
fastDev.define("fastDev.Ui.RadioGroup", {
	"extend" : "fastDev.Ui.CheckBoxGroup",
	"alias" : "RadioGroup",
	"_options" : {
		/**
		 * @cfg {Boolean} [allowMultiSelect=false]
		 * 是否允许多选
		 */
		"allowMultiSelect":false	
	}
});
/**
 * @class fastDev.Ui.Select
 * @extends fastDev.Ui.Box
 * 下拉框组件，采用内置input和ul实现页面信息的录入、展现等功能，支持多选、单选。<p>
 * 注意事项：HTML定义下拉框控件时时，结构跟跟原生的标签一样，唯一不同的是子项文本定义不是&lt;option&gt;文本&lt;/option&gt;而是&lt;option text="文本"&gt;&lt;/option&gt;<p>
 * 作者：袁刚
 *
 *		<select itype="Select">
 *			<option value="data1">本地数据1</option>
 *			<option value="data2" selected>本地数据2</option>
 *			<option value="data3">本地数据3</option>
 *			<option value="data4">本地数据4</option>
 *		</select>
 */

/**
 * @event onBoxBlur
 * @private
 */
fastDev.define("fastDev.Ui.Select", {
	"extend" : "fastDev.Ui.Box",
	"alias" : "Select",
	"_options" : {
		/**
		 * @cfg {String} [width="150px"]
		 * 控件宽度配置项
		 */
		"width" : "150px",
		/**
		 * @cfg {Number} [size=1]
		 * 下拉列表中可见选项的数目
		 */
		"size" : 1,
		/**
		 * @cfg {Boolean} [multiple=false]
		 * 是否可选择多个选项
		 */
		"multiple" : false,
		/**
		 * @cfg {Array[JsonObject]} [items]
		 * 下拉列表的数据
		 * @param {JsonObject} [item] 下拉项
		 * @param {String} [item.value] 下拉项的实际值
		 * @param {String} [item.text] 下拉项的显示值
		 * @param {Boolean} [item.selected=false] 下拉项是否被选中
		 */
		"items" : null,
		/**
		 * @cfg {String} [value]
		 * 下拉列表默认选择值,对应下拉项的实际值
		 */
		"value" : "",
		/**
		 * @cfg {Boolean} [disabled=false]
		 * 设定控件状态启用(false)/禁用(true)
		 */
		"disabled" : false,
		/**
		 * @cfg {String} [disabledItems]
		 * 设定禁止选择的下拉项,对应下拉项的实际值,多个用逗号(,)隔开
		 */
		"disabledItems" : "",
		/**
		 * @cfg {String} [panelWidth="auto"]
		 * 定义下拉项面板宽度,默认与选择框同宽
		 */
		"panelWidth" : "auto",
		/**
		 * @cfg {Boolean} [readonly=false]
		 * 设定控件状态只读(true)/非只读[false]
		 */
		"readonly" : false,
		/**
		 * @cfg {Number} [zIndex=200]
		 * 设定下拉项面板在页面中所处层级,当下拉面板被其他Dom元素挡住时,调高此配置可将下拉面板提升至未被遮挡区域
		 */
		"zIndex" : 200,
		/**
		 * @cfg {Boolean} [inside=true]
		 * 设定下拉项面板显示所属上下文,默认与选择框同一上下文,设定为false时可将下拉项面板提升至顶层窗口展现
		 */
		"inside" : true,
		/**
		 * @cfg {String} [direction="auto"]
		 * 设定下拉项面板弹出时相对于选择框所处的方位
		 * auto : 让下拉项面板自动选择合适位置弹出
		 * up : 让下拉项面板始终弹出到选择框上方
		 * down : 让下拉项面板始终弹出到选择框下方
		 */
		"direction" : "auto",
		/**
		 * @event
		 * 下拉项双击事件
		 * @param {Event} event 事件对象
		 */
		"onItemDblclick" : fastDev.noop,
		// 使用父类文档说明
		"enableDataSet" : true,
		// 使用父类文档说明
		"enableInitProxy" : true,
		// 使用父类文档说明
		"enableDataProxy" : true
	},
	"_global" : {
		// 初始化完成
		"initFinish" : false,
		// 下拉项面板浮动以及背景
		"panelCls" : ""
	},
	/**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
	"template" : [
		// 感应与显示区域模板
		'<tpl if(#{expand} != true)>', 
			'<div style="width:#{width}" class="ui-form">', 
				'<div class="ui-form-wrap ui-select">', 
					'<div class="ui-select-text" id="#{id}"></div>',
					'<div class="ui-form-trigger"><div class="ui-select-icon"></div></div>', 
				'</div>', 
			'</div>', 
		'</tpl>',
		// 下拉项容器模板
		'<tpl dynamic name=panel>', 
			'<div class="ui-select-list #{panelCls}" style="height: #{height}; z-index: #{zIndex}; width: #{panelWidth}; min-width: #{minWidth}; display:#{show}"></div>', 
		'</tpl>',
		// 下拉项内容模板
		'<tpl dynamic name=content>', 
			'<div class="ui-selectlist-list-ct">', 
				'<ul>', 
					'<tpl each>', 
						'<li class="ui-list-item" ivalue="{value}">{text}</li>', 
					'</tpl>', 
				'</ul>', 
			'</div>', 
		'</tpl>'
	],
	/**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
	"tplParam" : ["id", "width", "height", "panelWidth", "minWidth", "expand", "show", "zIndex", "panelCls"],
	/**
	 * @property {Array[String]|Array[JsonObject]} fields
	 * 控件数据集所依赖的数据结构定义
	 * @readonly 
	 */
	"fields" : [{
		"name" : "value",
		"type" : "String",
		"defaultValue" : "_empty"
	}, "text", {
		"name" : "selected",
		"type" : "Boolean",
		"defaultValue" : false
	}],
	// 使用父类文档说明
	"ready" : function(options, global) {
		var 
			match, 
			width = global.width, 
			panelWidth = options.panelWidth;
			
		// size属性大于1时，下拉框使用展开形态，展开形态下默认显示面板
		if(global.expand = options.size > 1) {
			global.show = "";
			// 计算面板高度，每个下拉项高度为20px
			options.height = options.size * 20 + "px";
			// panelWidth = panelWidth === "auto" ? width : panelWidth;
			options.inside = true;
		} else {
			global.show = "none";
			// 下拉项面板浮动以及背景，下拉列表不要
			global.panelCls = "ui-layer ui-shadow";
		}
		global.currItems = {};
		
		if(width === 0){
			width = options.width;
			global.minWidth = "148px";
		}else{
			options.width = width + "px";
			// 计算面板宽度以及最小宽度
			global.minWidth = options.panelWidth = ( ( match = /((?:\d*\.|)\d+)px/.exec( panelWidth ) ) ? +match[1] - 2 :
				width - 2 ) + "px";
		}
		
		// 如果当前window对象就是顶层window，则不做跨级
		// 设定面板上下文
		global.panelContext = (
			options.inside = (options.inside === false && window.top === window) ? true : 
				options.inside
			) ? window : 
			window.top;
	},
	// 使用父类文档说明
	"construct" : function(options, global) {
		var 
			domobj, 
			container, 
			context = global.panelContext;
			
		// 判断跨级时，顶级页面是否引用控件库
		// 如果没引用则取消跨级
		if(!context.fastDev) {
			global.panelContext = context = window;
			options.inside = true;
		}
		
		if(!global.expand){
			// 下拉框出面板感应区域
			global.inducArea = fastDev(this.elems).first();
			// 下拉框下拉图标
			global.icon = global.inducArea.last();
		}

		// 设定面板所在容器
		container = global.expand ? options.container : fastDev(context.document.body);
		// 根据面板模板生成DomObject对象
		global.panel = this.renderDynamicHtml(container, "panel", context, false);
		// 将面板归入当前控件统一管理
		this.merge(global.panel);
		// 修正面板索引，反正外部append方法改变面板所属容器
		this.correctElems(global);
	},
	// 使用父类文档说明
	"init" : function(options, global) {
		// 下拉框不是展开形态则初始化感应区域
		if(!global.expand) {
			if(options.disabled === true) {
				// 暂时修改成相反用作判断，在disable方法中会被修正
				options.disabled = false;
				this.disable();
			} else {
				// 激活感应区域事件
				this.bindInducAreaEvent(global, options);
			}
		}

		// 失去焦点隐藏面板
		global.htmlClickHandle = fastDev.setFnInScopeByParam(this, this.htmlClickHandle, options, global);
		// 在当前窗体增加失去焦点隐藏面板功能
		fastDev("html").bind("click", global.htmlClickHandle);
		// 当下拉面板被弹出到顶层时，需要在顶层添加失去焦点隐藏面板事件
		if(options.inside === false) {
			// 在顶层窗体中增加失去焦点隐藏面板功能
			global.panelContext.fastDev("html").bind("click", global.htmlClickHandle);
			var unloadHandle = fastDev.setFnInScope(this, function() {
				global.panelContext.fastDev("html").unbind("click", global.htmlClickHandle);
				this.destroy();
			});
			// 下拉框主体被销毁时需要注销顶层窗口中绑定的失去焦点事件
			fastDev(window).bind("unload", unloadHandle);
		}
	},
	// 使用父类文档说明
	"constructItems" : function() {
		// 下拉框是展开形态时，下拉项面板容器由用户指定，否则下拉项容器为当前文档Body
		var 
			value, 
			selectedList,
			options = this._options, 
			global = this._global, 
			initFinish = global.initFinish;
		
		if(fastDev.Browser.isIE8){
			value = "," + options.value + ",";
			this.dataset.update(function(index,data){
				if(value.indexOf(data.value) !== -1){
					return {selected : true};
				}
			});
		}
		
		// 调用父类方法构建下拉内容
		global.liList = this.renderDynamicHtml(global.panel, "content", global.panelContext, true).first();
		// 绑定下拉面板事件
		if(options.disabledItems) {
			this.disableItems(options.disabledItems);
		}
		
		value = [];
		selectedList = this.dataset.select(function(i, data) {
			return data.selected === true;
		});
		if(selectedList.length) {
			if(options.multiple === true) {
				for(var i = 0, item; item = selectedList[i]; i++) {
					value.push(item.value);
				}
			} else {
				value.push(selectedList.pop().value);
			}
			options.value = value.join(",");
			this.setValue(options.value);
		} else if(global.expand === false) {
			this.selectedDefault();
		}
		this.bindPanelEvent(global, options);
	},
	/**
	 * 绑定感应区域及其相关事件
	 * @private
	 */
	"bindInducAreaEvent" : function(global, options) {
		// 单击感应区域弹出下拉面板
		global.inducAreaClickHandle = fastDev.setFnInScope(this, this.showPanel);
		global.inducArea.bind("click", global.inducAreaClickHandle);
	},
	/**
	 * 解绑感应区域及其相关事件
	 * @private
	 */
	"unbindInducAreaEvent" : function(global) {
		global.inducArea.unbind("click", global.inducAreaClickHandle);
		fastDev("html").unbind("click", global.htmlClickHandle);
	},
	/**
	 * 绑定下拉面板事件
	 * @private
	 */
	"bindPanelEvent" : function(global, options) {
		if(global.panelEventReady === true) {
			return;
		}

		var panel = global.panel;
		// 下拉项双击事件
		global.panelDblclickHandle = fastDev.setFnInScopeByParam(this, this.panelDblclickHandle, options.onItemDblclick);
		// 鼠标悬停下拉项高亮事件
		global.panelMouseoverHandle = fastDev.setFnInScope(this, this.panelMouseoverHandle);
		// 单击选择下拉想事件
		global.panelClickHandle = fastDev.setFnInScope(this, this.panelClickHandle);
		if(!fastDev.isNoop(options.onItemDblclick)) {
			panel.bind("dblclick", global.panelDblclickHandle);
		}

		// 禁用处理
		panel.bind("mouseover", global.panelMouseoverHandle);
		
		if(options.readonly === false){
			panel.bind("click", global.panelClickHandle);
		}
		
		global.panelEventReady = true;
	},
	/**
	 * 解绑下拉面板事件
	 * @private
	 */
	"unbindPanelEvent" : function(global) {
		var panel = global.panel;
		panel.unbind("dblclick", global.panelDblclickHandle);
		panel.unbind("mouseover", global.panelMouseoverHandle);
		panel.unbind("click", global.panelClickHandle);
		global.panelEventReady = false;
	},
	/**
	 * 单击非感应区域隐藏下拉面板
	 * @private
	 */
	"htmlClickHandle" : function(event, options, global) {
		if(global.expand === false && (global.inducArea.contains(event.target) || !fastDev.isValid(global.panel))) {
			return;
		}
		this.onSelectBlur(event, options.onblur, global);
	},
	/**
	 * 双击选择项事件
	 * @private
	 */
	"panelDblclickHandle" : function(event, handle) {
		if(event.target.tagName === "LI") {
			var item = fastDev(event.target);
			if(this._options.multiple === true && this._global.expand === true){
				this._global.currItems[item.attr("ivalue")] = item;
			}else{
				this._global.currItems = {};
				this._global.currItems[item.attr("ivalue")] = item;
			}
			item.addClass("ui-list-selected");
			handle.call(this, event);
		}
	},
	/**
	 * 鼠标滑过下拉项高亮事件
	 * @private
	 */
	"panelMouseoverHandle" : function(event) {
		if(event.target.tagName === "LI") {
			this._global.liList.find("li.ui-list-over").removeClass("ui-list-over");
			var target = fastDev(event.target);
			if(!target.hasClass("ui-list-selected")) {
				target.addClass("ui-list-over");
			}
		}
	},
	/**
	 * 点击选择项事件
	 * @private
	 */
	"panelClickHandle" : function(event) {
		if(event.target.tagName === "LI") {
			var target = fastDev(event.target);
			if(target.hasClass("ui-list-disabled")) {
				return;
			}
			this.setValue(target.attr("ivalue"), true);
			this._global.focusState = true;
			if(!this._global.expand) {
				this.hidePanel();
			}
		}
	},
	/**
	 * 修正动态模板创建的元素位置
	 * @private
	 */
	"correctElems" : function(global) {
		if(!global.initFinish && !global.expand) {
			this.elems.splice(1, 0 , "none");
			global.initFinish = true;
		}
	},
	/**
	 * 显示内容面板
	 * @private
	 */
	"showPanel" : function(event) {
		var global = this._global, panel = global.panel, icon = global.icon, inducArea = global.inducArea;

		if(fastDev.isFunction(this._options.onclick)) {
			this._options.onclick.call(this, event);
		}
		// 定位下拉项面板
		this.fixedPosition();

		if(panel.isShow()) {
			return this.hidePanel();
		} else {
			panel.show();
			inducArea.addClass("ui-form-focus");
		}
		// 下拉图标高亮
		icon.addClass("ui-form-trigger-over");
		global.focusState = true;
	},
	/**
	 * 定位下拉面板
	 * @private
	 */
	"fixedPosition" : function() {
		var options = this._options, global = this._global, panelCss = {},
		// 获取面板高度
		panelHeight = parseInt(options.height, 10) || global.panel.height();

		if(!global.minWidth) {
			global.minWidth = fastDev(this.elems[0]).width() - 2 + "px";
			panelCss["min-width"] = global.minWidth;
		}

		if(fastDev.Browser.isIE6 && global.panel.width() < parseFloat(global.minWidth)) {
			panelCss.width = global.minWidth;
		}

		if(panelHeight < 20) {
			panelCss.height = "80px";
		}

		global.panel.css(panelCss);
		fastDev.Util.PositionUtil.locate(global.panel, global.inducArea, global.panelContext,null,null,options.direction);
	},
	/**
	 * 隐藏内容面板
	 * @private
	 */
	"hidePanel" : function() {
		var 
			global = this._global,
			// 下拉图标
			icon = global.icon,
			// 下拉项内容Div
			panel = global.panel;
			
		// 重置高亮为当前选中项
		global.liList.find(".ui-list-over").removeClass("ui-list-over");

		panel.hide();
		// 去除下拉图标高亮
		icon.removeClass("ui-form-trigger-over");
		global.inducArea.removeClass("ui-form-focus");
	},
	/**
	 * 获取当前选中项的值或者文本
	 * @private
	 */
	"getProp" : function(getValue) {
		var global = this._global, items = global.currItems, value = [];
		for(var p in items) {
			value.push(p === "_empty" ? "" : getValue ? p : items[p].getText());
		}
		value = value.join(",");
		return value === "_empty" ? "" : value;
	},
	/**
	 * 获取当前选中项的实际值
	 */
	"getValue" : function() {
		return this.getProp(true);
	},
	/**
	 * 获取当前选中项的文本值
	 */
	"getText" : function() {
		return this.getProp();
	},
	/**
	 * 设置当前选中项
	 * @param {String} values 下拉项实际值 (value / value1,value2,...)
	 */
	"setValue" : function(value, useChange) {
		var 
			options = this._options,
			global = this._global, 
			change = false, 
			currItems = global.currItems;
			
		value = value || options.value;
		// 下拉项内容
		var panel = global.panel, valueList = (value + "").split(",");
		while(fastDev.isValid(( value = valueList.shift()))) {
			// 获取当前选中项对象
			var item = global.liList.find("[ivalue='" + value + "']"), highlight = true;
			if(item.isEmpty()) {
				continue;
			}
			// 移除鼠标滑过样式
			item.removeClass("ui-list-over");

			if(options.multiple === true && global.expand === true) {
				// 多选处理
				// 如果当前项已经被选中则判断此次操作为取消选中
				if(item.hasClass("ui-list-selected")) {
					item.removeClass("ui-list-selected");
					delete currItems[value];
					highlight = false;
				}
			} else {
				// 单选处理
				if(item.hasClass("ui-list-selected")) {
					continue;
				}
				// 移除上次选中项
				global.liList.find(".ui-list-selected").removeClass("ui-list-selected");
				for(var p in currItems) {
					delete currItems[p];
				}
				this.find("#" + options.id.replace(".","\\.")).setText(item.getText());
				//this.superClass.setValue.call(this, item.getText(), true);
			}
			if(highlight === true) {
				// 选中项高亮
				item.addClass("ui-list-selected");
				currItems[value] = item;
			}
			change = true;
		}
		// 值被鼠标操作改变时触发事件
		if(useChange === true) {
			if(change === useChange) {
				if(!fastDev.isNoop(options.onchange) && fastDev.isFunction(options.onchange)) {
					options.onchange.call(this, this.getValue(), this.getText());
				}
			}
			this.fire("focus");
		}

		return this;
	},
	/**
	 * 改变当前组件禁用/启用状态
	 * @private
	 */
	"changeState" : function(oper, method, disable) {
		var 
			options = this._options, 
			global = this._global, 
			state = disable ? "disable" : "enable";

		// 目标状态与当前状态一致则当前操作无效
		if(options.disabled === disable) {
			return;
		}
		options.disabled = !options.disabled;

		if(global.expand) {
			this[oper+"PanelEvent"](global, options);
			global.panel[method]("ui-selectlist-disabled");
		} else {
			this[oper+"InducAreaEvent"](global, options);
			this.superClass[state].call(this);
		}
		fastDev("html")[oper]("click", global.htmlClickHandle);
		return this;
	},
	/**
	 * 启用当前组件(当组件被禁用时有效)
	 */
	"enable" : function() {
		return this.changeState("bind", "removeClass", false);
	},
	/**
	 * 禁用当前组件(当组件被启用时有效)
	 */
	"disable" : function() {
		return this.changeState("unbind", "addClass", true);
	},
	/**
	 * 设置当前组件是否只读
	 * @param {Boolean} [readonly=true] 是否只读
	 */
	"setReadonly" : function(readonly) {
		var 
			options = this._options,
			global = this._global,
			method = "bind";
			
		// 目标状态与当前状态一致或者组件被禁用则当前操作无效
		if(options.readonly === ( readonly = readonly === false ? false : true) || options.disabled === true) {
			return;
		}

		options.readonly = readonly;

		if(readonly) {
			method = "unbind";

		}
		global.panel[method]("click", global.panelClickHandle);
		this.superClass.setReadonly.call(this,readonly);
		return this;
	},
	/**
	 * 改变当前组件下拉项禁用/启用状态
	 * @param {String} values 待改变下拉项实际值
	 * @param {String} method 样式改变方法名称
	 * @private
	 */
	"changeItemState" : function(values, method) {
		var 
			options = this._options,
			global = this._global,
			panel = global.panel,
			disabledItems = options.disabledItems || "";
		
		values = values.split(",");
		for(var i = 0, value; value = values[i]; i++) {
			global.liList.find("[ivalue='"+value+"']")[method]("ui-list-disabled");
			
			options.disabledItems = method === "addClass" ? disabledItems + value + "," : 
				disabledItems.replace(value + ",", "");
		}
	},
	/**
	 * 禁用指定值的下拉项(下拉想被启用时有效)
	 * @param {String} values 待改变下拉项实际值 ( value / value1,value2,... )
	 */
	"disableItems" : function(values) {
		this.changeItemState(values, "addClass");
	},
	/**
	 * 启用指定值的下拉项(下拉想被禁用时有效)
	 * @param {String} values 待改变下拉项实际值 ( value / value1,value2,... )
	 */
	"enableItems" : function(values) {
		this.changeItemState(values, "removeClass");
	},
	/**
	 * 增加下拉项
	 * @param {JsonObject/Array[JsonObject]} items
	 */
	"addItems" : function(items) {
		// 数据兼容性处理
		if(!fastDev.isArray(items)) {
			items = [items];
		}
		var value = this.getValue();
		// 保存数据至数据集
		this.dataset.fill(items);
		// 重新初始化动态模板内容
		this.constructItems();
		// 重新设置当前选中项
		this.setValue(value);
	},
	/**
	 * 根据指定值删除下拉项
	 * @param {String} values 下拉项实际值 (value / value1,value2,...)
	 */
	"removeItems" : function(values) {
		var 
			value, 
			item,
			options = this._options, 
			global = this._global, 
			panel = global.panel;
			
		values = values.split(",");
		var currItems = global.currItems;

		while( value = values.shift()) {
			item = global.liList.find("li[ivalue='" + value + "']");
			if(item.isEmpty()) {
				continue;
			}
			delete currItems[value];

			this.dataset.remove(this.removeData, value);

			if(options.multiple === false && item.hasClass("ui-list-selected")) {
				this.selectedDefault();
			}
			item.remove();
		}
	},
	/**
	 * @private
	 */
	"removeData" : function(index, data, value) {
		return data.value === value;
	},
	/**
	 * 获取所有子项
	 * @return {Array{JsonObject}}
	 */
	"getItems" : function() {
		return this.dataset.select();
	},
	/**
	 * 获取选中选项
	 * @return {Array{JsonObject}}
	 */
	"getSelectedItem" : function() {
		var 
			result = [], 
			items = this._global.currItems;
			
		for(var p in items) {
			result.push({
				value : p,
				text : items[p].getText()
			});
		}
		return result;
	},
	/**
	 * 清除当前可选项
	 * @param {Boolean} all 清除所有选项包括静态配置的选项
	 */
	"clean" : function(all) {
		var global = this._global;
		
		// 重置数据集
		this.dataset.reset();
		
		if(all === true) {
			this.dataset.removeStaticData(function(i, item) {
				return item.value !== "_empty";
			});
		}
		
		// 删除当前选中值
		global.currItems = {};
		if(!global.expand){
			global.panel.removeCss("height");
		}
		// 重新构建下拉项
		this.constructItems();
		return this;
	},
	/**
	 * 重置下拉框为空值状态
	 */
	"reset" : function() {
		var global = this._global;
		
		global.currItems = {};
		global.liList.find(".ui-list-selected").removeClass("ui-list-selected");
		if(!global.expand) {
			this.selectedDefault();
		}
	},
	/**
	 * 初始化默认选中项
	 * @private
	 */
	"selectedDefault" : function() {
		var record = this.dataset.get(0);
		this.setValue( record ? record.value : "");
	},
	/**
	 * 下拉框失去焦点事件
	 * @param {Function} handle
	 * @private
	 */
	"onSelectBlur" : function(event, handle, global) {
		var target = event.target, clickPanel = global.panel.contains(target), clickInducArea = global.expand ? false : global.inducArea.contains(target);

		if(global.focusState !== true) {
			return;
		} else if(global.focusState === true && !clickInducArea && !clickPanel) {
			if(!global.expand) {
				this.hidePanel();
			}
			handle.call(this, event);
			global.focusState = false;
		}
	},
	/**
	 * 控件销毁方法
	 */
	"destroy" : function() {
		fastDev("html").unbind("click", this._global.htmlClickHandle);
		this.superClass.destroy.call(this);
	},
	/**
	 * 子项上下移动的实现方法
	 * @private
	 */
	"move" : function(item, method, position) {
		if(fastDev.isValid(item)) {
			return item[method](item[position]());
		}

		var items = this._global.currItems;
		for(var p in items) {
			this.move(items[p], method, position);
		}
		return this;
	},
	/**
	 * 将当前选中项上移一位
	 */
	"moveUp" : function() {
		return this.move(null, "insertBefore", "prev");
	},
	/**
	 * 将当前选中项下移一位
	 */
	"moveDown" : function() {
		return this.move(null, "insertAfter", "next");
	},
	"bind" : function(type, handle, cover) {
		var match;
		if( match = /(change|blur|click)/.exec(type)) {
			if(cover !== false) {
				this._options["on" + match[1]] = handle;
			}
		} else {
			this.superClass.bind.call(this, type, handle);
		}
		return this;
	},
	/**
	 * 获取焦点时记录标志位
	 * @private
	 */
	"onSelectFocus" : function() {
		this._global.focusState = true;
	}
});
/**
* @class fastDev.Ui.SelectTree
* @extends fastDev.Ui.Box 
* 下拉树控件 包括下拉树和下拉多选树，封装树控件，可以结合表单使用。继承自Box。<p>
*  注意事项：下拉树内的相关树配置和树一致。<p>
* 作者：姜玲<p>
*
*		<div itype="SelectTree" initSource="data.txt" rootValue="-请选择-" topParentid="0" openFloor=2>
*		</div>
*/
fastDev.define("fastDev.Ui.SelectTree", {
	"extend" : "fastDev.Ui.Box",
	"alias" : "SelectTree",
	"_options" : {
		/**
		 * @cfg {String}
		 * 异步的数据源
		 */
		"asyncDataSource" : "",
		/**
		 * @cfg {String} [topParentid="0"]
		 * 顶级节点id
		 */
		"topParentid" : "0",
		/**
		 * @cfg {Number} [openFloor=1]
		 * 默认打开层数
		 */
		"openFloor" : 1,
		/**
		 * @cfg {String} [treeType="normal"]
		 * 树类型，必须是normal;multitree;radiotree其一
		 */
		"treeType" : "normal",
		/**
		 * @cfg {Boolean} [showLine=true]
		 * 是否显示树的连接线
		 */
		"showLine" : true,
		/**
		 * @cfg {Boolean}
		 * 是否显示小图标
		 */
		"showIco" : false,
		/**
		 * @cfg {String}
		 * 根节点的文本值（非数据中的根节点）
		 */
		"rootValue" : null,
		/**
		 * @cfg {Boolean} [mTreeShowCkb=true]
		 * 复选框树显示多选框
		 */
		"mTreeShowCkb" : true,
		/**
		 * @cfg {Boolean} 
		 * 只能选中叶子节点的文本
		 */
		"onlySelectedLeaf" : false,
		/**
		 * @cfg {number} 
		 * 节点的文本最大长度
		 */
		"textMaxLength":20,
		/**
		 * @cfg {Boolean} [mTreeShowCkb=true]
		 * 单选框树显示单选框
		 */
		"mTreeShowRadio" : true,
		/**
		 * @cfg {Boolean}
		 * 根据多选树的叶子节点的选中状况勾选或半勾选其父节点
		 */
		"chkedByLeaf" : false,
		/**
		 * @cfg {String} [radioType="level"]
		 * 单选勾选分组范围有,分"同一级内"level，"整棵树内"all两种
		 */
		"radioType" : "level",
		/**
		 * @cfg {Boolean}
		 * 复选框是否要半选状态的值
		 */
		"partchkValue" : true,	
		/**
		 * @cfg {Boolean}
		 * 单选框是否要半选状态的值
		 */
		"partradioValue":true,	
		/**
		 * @cfg {Boolean} [onlyLeafValue=false]
		 * 多选树或单选树是否仅仅要叶节点的值
		 */
		"onlyLeafValue" : false,
		/**
		 * @cfg {string} 多个用逗号分割
		 * 自定义数据配置数据字段名
		 */
		"customFields" : "",
		"tree":null,
		/**
		 * @cfg {Boolean} [sTreeClickAfterShow=true]
		 * 下拉树点击之后再加载显示数据
		 */
		"sTreeClickAfterShow" : true,
		/**
		 * @cfg {String}
		 * 默认选中的节点id
		 */
		"currentId" : "",
		/**
		 * @cfg {Json}
		 * 合法的json数据源，必须有[val，id，pid]复选树加chk[值为true，part，false]，单选树加radio[值同chk]，异步树加asyn[值为true,false] font:文本样式 ico:图标样式 disabled:复选框或单选框禁用 nocheck:节点无复选框或单选框 readonly:文本只读
		 */
		"items" : "",
		/**
		 * @cfg {String}
		 * 控件初始化合法的json数据源url
		 */
		"initSource" : "",
		/**
		 * @cfg {String} [zindex=0]
		 * 下拉树的zindex在多个下拉框在一个页面上时可以把下面的设置小些
		 */		
		"zIndex":"200",
		/**
		 * @cfg {String} 
		 * 下拉树的宽度
		 */
		"width":"150px",
		/**
		 * @cfg {String}
		 * 下拉树弹出层的高度
		 */
		"height":"300px",
		/**
		 * @cfg {String}
		 * 下面面板弹出方向(auto、up、down) 
		 */
		"direction" : "auto",
		/**
		 * @cfg {String}
		 * 初始化下拉树的文本框的显示值
		 */
		"inputValue" : "-请选择-",
		/**
		 * @cfg {String}
		 * 初始化下拉树的隐藏域的值
		 */
		"hiddenValue" : "",
		/**
		 * @cfg {String} [inputName="input1"]
		 * 下拉树的文本框的name
		 */
		"inputName" : "input1",
		/**
		 * @cfg {String} [hiddenName="hidden1"]
		 * 隐藏域的name
		 */
		"hiddenName" : "hidden1",
		/**
		 * @cfg {Boolean}
         * 是否在当前页面展现
         * <p>此属性为false值时，面板将尝试跨出当前子页面展现
         */
        "inside": true,
        "enableDataSet" : false,
		"enableInitProxy" : false,
		"enableDataProxy" : false,
		/**
		 * @event onBlur
		 * 失去焦点事件
		 * @param {Object}  返回action请求结果
		 */
		"onblur":fastDev.noop,
		/**
		 * @event onclick
		 * 点击事件
		 * @param {Object}  
		 */
		"onclick":fastDev.noop,
		/**
		 * @event onchange
		 * 选项单击时触发事件
		 * @param {Object}  
		 */
		"onchange":fastDev.noop
	},
	"_global" : {
		//树的配置项
		"treeOptions":",asyncDataSource,initSource,dataSource,currentId,value,topParentid,openFloor,treeType,showLine,showIco,textMaxLength,rootValue,mTreeShowCkb,onlySelectedLeaf,mTreeShowRadio,chkedByLeaf,radioType,partchkValue,partradioValue,onlyLeafValue,onAfterLoadInit,onAfterInitRender,onAfterLoadData,customFields,",
		//是否有按钮
		"hasButton":"",
		//body单击事件句柄
		"bodyClick":null,
		//文本框单击事件句柄
		"textClick":null,
		//文本框的容器
		"inputDiv":null,
		//树的容器
		"treeDiv":null,
		//树
		"tree":null,
		//初始化完成标记
		"initFinish" : false,
		//获取焦点标记
		"infocus":false,	
		// 控件子项面板
		"panel" : null
	},
	//模板
	"template" : [
	'<div style="width: #{width};" class="ui-form" >',
	'<div id="#{id}" class="ui-form-wrap ui-select">',
		'<input type="text" autocomplete="off" readonly="readonly" class="ui-form-field ui-form-input" value="#{inputValue}" name="#{inputName}"/>',
		'<input type="hidden" value="#{hiddenValue}" name="#{hiddenName}" />',
		'<div class="ui-form-trigger" >',
			'<div class="ui-select-icon"></div>',
		'</div>',
	'</div>',
	'</div>',
	// 下拉项容器模板
	'<tpl dynamic name=panel>',
	'<div id="tree_#{id}" class="ui-select-tree" maxdivheight="#{height}" style="width:#{width};z-index:#{zIndex};display:none">',
		'<div id="treediv_#{id}">',
		'</div>',
		'<tpl if(#{hasButton}=="true")>',	
		'<div class="ui-tree-button" id="treebtn_#{id}">',
			'<a class="ui-button ui-button-bg" id="ok">',
               '<em class="ui-button-em">',
                    '<span class="ui-button-text">确定</span>',
                '</em>',
            '</a>',   
            '<a class="ui-button ui-button-bg" id="cancel">',
                '<em class="ui-button-em">',
                    '<span class="ui-button-text">取消</span>',
                '</em>',
            '</a>',
		'</div>',
		'</tpl>',	
	'</div>',
	'</tpl>'	
	],	
	"tplParam" : ["id","width","zIndex","inputValue","hiddenValue","inputName","hiddenName","hasButton","height","inside"],	
	"fields" : ["id","pid","val",{name : "chk",defaultValue : "false"},{name : "radio",defaultValue : "false"},{name : "asyn",defaultValue : "false"},{name:"font",defaultValue : ""},{name:"ico",defaultValue : ""},{name:"readonly",defaultValue : "false"},{name:"disabled",defaultValue : "false"},{name:"nocheck",defaultValue : "false"}],
	/**
	 * 面板参数准备
	 * @protected
	 */
	"ready" : function(options, global) {
		var width;
		if (width = /^(-?\d+\.?\d+|-?\d)(px|%|em|cm)?$/.exec(fastDev.Util.StringUtil.trim(options.width + ""))) {
            options.width = width[1] + (width[2] || "px");
        } else {
            options.width = "150px";
        }
		if(options.id===""){
			options.id=fastDev.getID();
		}
		if(options.value!==""){
			options.currentId=options.value;
		}
		if(options.currentId!==""){
			options.value=options.currentId;
		}
		if(options.customFields){			
			this.fields =this.fields.slice(0).concat(options.customFields.split(','));
		}
		var treeOptions=global.treeOptions;
		if(fastDev.isEmptyObject(options.tree)){
			options.tree={
				queue : options.queue
			};
		}
		for(var o in options){
			//将属于树的配置都移到树配置里
			if(treeOptions.indexOf(","+o+",")>-1 && !options.tree[o] && options[o]!==""){	
				options.tree[o]=options[o];
				if(/onAfterLoadInit|onAfterLoadData|onAfterInitRender|onAfterDataRender/.test(o))	{
					options[o] = fastDev.noop;
				}		
			}						
		}
		options.tree.id="t_"+options.id;
		if(options.tree.treeType==="multitree" || options.tree.treeType==="radiotree"){
			global.hasButton="true";
		}
		fastDev.apply(options, {
			 inside:fastDev.Util.PositionUtil.top.fastDev === fastDev || !! options.inside
        });       
		// 如果当前window对象就是顶层window，则不做跨级
		// 设定面板上下文
		global.panelContext = (
			options.inside = (options.inside === false && window.top === window) ? true : 
				options.inside
			) ? window : 
			window.top;
	},
	/**
     * 构造控件
     * @param {Object} options
     * @param {Object} global
     * @protected
     */
    "construct": function (options, global) {
		var container, 
			context = global.panelContext;
			
		// 判断跨级时，顶级页面是否引用控件库
		// 如果没引用则取消跨级
		if(!context.fastDev) {
			global.panelContext = context = window;
			options.inside = true;
		}
		// 设定面板所在容器
		container = fastDev(context.document.body);
		// 根据面板模板生成DomObject对象
		global.panel = this.renderDynamicHtml(container, "panel", context,[], false);
		// 根据面板模板生成DomObject对象
		global.panel = container.find("[id='tree_"+options.id+"']");
		if(global.panel.elems.length===0){
		  global.panel= fastDev(this.elems[1]);	
		}
		this.merge(global.panel);
		// 修正面板索引，反正外部append方法改变面板所属容器
		this.correctElems(global);
		var items,me=this;
		if(options.items){
			if(typeof options.items==="string"){
				items=fastDev.Util.JsonUtil.parseJson(options.items);
			}else{
				items=options.items;
			}
			options.tree.items=items;
		}
		options.tree.container =global.panel.find("[id='treediv_"+options.id+"']");
		options.tree.onNodeClick=function(event,id,val){
			me.treeNodeClick(event,id,val);
		};
		options.tree.onAfterDataRender=function(){
			var value= this.getValue();	
			var tv=me.getValue();
			if(options.treeType!== "normal"){
			me.setValue(tv);
			}else{
			me.setValue(value);
			if(!tv){
			options.onAfterDataRender.call(me);
			}
			}
			
		};
		if(options.sTreeClickAfterShow===false || !!options.tree.currentId || !!options.tree.dataSource){
			var tree=global.panelContext.fastDev.create("Tree", options.tree);
			global.tree=tree;
		}
		global.inputDiv=fastDev(this.elems[0]).find("[id='"+options.id+"']");		
		global.treeDiv=global.panel;
		global.box = global.inputDiv.find("input:text");
	},
	// 使用父类文档说明
	"init" :function(options, global){
		
		var inputDiv=global.inputDiv,treeDiv=global.treeDiv;		
		global.textClickHandle = fastDev.setFnInScope(this, this.textClickHandle);	
		//inputDiv.unbind("click");
		inputDiv.bind("click",global.textClickHandle);		
		if(options.tree.treeType==="multitree" || options.tree.treeType==="radiotree"){			
			var btnCancel=treeDiv.find("#cancel");
			var btnOk=treeDiv.find("#ok");
			btnOk.bind("click",fastDev.setFnInScope(this, this.buttonConfirmClickHandle));
			btnCancel.bind("click",fastDev.setFnInScope(this, this.buttonCancelClickHandle));
	    }		
		global.bodyClickHandle=fastDev.setFnInScope(this, this.bodyClickHandle);
		// 在当前窗体增加失去焦点隐藏面板功能
		fastDev("html").bind("click", global.bodyClickHandle);
		if(options.inside === false) {
			// 在顶级窗体中增加失去焦点隐藏面板功能	
			global.panelContext.fastDev("html").bind("click",fastDev.setFnInScope(this, global.bodyClickHandle));			
			fastDev(window).bind("unload",fastDev.setFnInScope(this, this.unloadHandle));
		}
	},
	/**
	 * 修正面板索引
	 * @param {Object} global
	 * @private
	 */
	"correctElems" : function(global) {
		if(!global.initFinish) {
			this.elems[2] = this.elems[1];
			this.elems[1] = "none";
			global.initFinish = true;
		}
	},
	/**
	 * 修正动态模板创建的元素位置
	 * @private
	 */
	"fixedPosition" : function(global) {
		var treediv=global.treeDiv;
		var optionheight=parseInt(treediv.attr("maxdivheight"),10);
		treediv.width(global.inputDiv.width()+21);
		treediv.removeCss("top");
		treediv.removeCss("left");
		treediv.first().css("overflow","auto");
		fastDev.Util.PositionUtil.locate(treediv, global.inputDiv, global.panelContext,null,null,this._options.direction);
		//treediv.height("auto").first().height(optionheight);
		treediv.first().height(optionheight);
		var treedivtop=parseInt(treediv.css("top"),10);
		if(treedivtop<global.inputDiv.offset().top){
			treediv.css("border-top","1px solid #98C0F4");
		}
	},
	/**
	 * 设置当前组件是否只读
	 * @param {Boolean} [readonly=true] 是否只读
	 */
	"setReadonly" : function(readonly) {
		var global = this._global, options = this._options;
		// 目标状态与当前状态一致或者组件被禁用则当前操作无效
		if(options.readonly === (readonly = readonly === false ? false : true) || options.disabled === true) {
			return;
		}
		options.readonly = readonly;
		var method = "bind";
		if(readonly) {
			method = "unbind";
			global.inputDiv.addClass("ui-form-disabled");
		}else{
			global.inputDiv.removeClass("ui-form-disabled");			
		}
		//global.inputDiv[method]("click", global.textClickHandle);
		this.superClass.setReadonly.call(this, readonly);
		if(!readonly){
			global.box.prop("readOnly", "readOnly");
		}
		return this;
	},
	/**
	 * 单击文本框响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"textClickHandle":function(event){
		var options=this._options,global=this._global,treeDiv=global.treeDiv;
		if(options.readonly===false && options.disabled === false){
			global.infocus=true;
			var text = treeDiv.find("div.ui-tree-panel").elems;
			this.fixedPosition(global);
			if(text.length === 0) {	
				treeDiv.removeCss("display");	
				//创建树
				global.tree=global.panelContext.fastDev.create("Tree", options.tree);
			}else{
				if(!treeDiv.isShow()){
					treeDiv.removeCss("display");
				}else{
					treeDiv.hide();
				}			
			}
			if(options.onclick!==fastDev.noop){
				options.onclick.call(this,event);
			}
		}
	},
	/**
	 * 单击确定按钮响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"buttonConfirmClickHandle":function(event){
		var options=this._options,global=this._global,inputDiv=global.inputDiv,treeDiv=global.treeDiv;
		 var tree=global.tree,texts,vType=tree.getValueType();
				var ids = options.tree.treeType === "radiotree" ? tree.getRadioedIds(vType) : tree.getChkedIds(vType);
				if(ids) {
					texts = tree.getValsByids(ids);
				}else{
					texts=options.inputValue;
				}
				treeDiv.hide();
				inputDiv.find("input:text").prop("value",texts).prop("title",texts);
				inputDiv.find("input[type='hidden']").prop("value",ids);
				if(options.onchange!==fastDev.noop){
					options.onchange.call(this,ids,texts);
				}
	},
	/**
	 * 单击取消按钮响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"buttonCancelClickHandle":function(event){
		var options=this._options,global=this._global,treeDiv=global.treeDiv;
		treeDiv.hide();
	},
	/**
	 * 单击页面响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"bodyClickHandle":function(event){
		var me=this, options=this._options,global=this._global,inputDiv=global.inputDiv,treeDiv=global.treeDiv;
		 var target = event.target,
			  clickTg = fastDev(target),
			  ctgclass = clickTg.getClass(),
			  targetInTreeDiv=clickTg.parents("div.ui-select-tree").elems.length>0?true:false,
			  treedct=treeDiv.contains(target),
			  inputdct=inputDiv.contains(target);
			   if((!targetInTreeDiv || !treedct) && !inputdct){
				   treeDiv.hide();
				   fastDev(me.elems[0]).find(".ui-form-wrap.ui-select").removeClass("ui-form-focus");
				   inputDiv.find("div.ui-form-trigger").removeClass("ui-form-trigger-over");
				   var txt=me.getText();
				   if(options.inputValue===txt){
				      inputDiv.find("input[type='hidden']").prop("value",options.hiddenValue);
				   }
				   if(!fastDev.isNoop(options.onblur) && global.infocus){
						global.infocus=false;
						me.onSelectTreeBlur(event,options.onblur);
				   }				
			 }else{
				if(inputdct){
					global.infocus=true;
					fastDev(me.elems[0]).find(".ui-form-wrap.ui-select").addClass("ui-form-focus");					
					inputDiv.find("div.ui-form-trigger").addClass("ui-form-trigger-over");
				}else if(treedct){
					fastDev(me.elems[0]).find(".ui-form-wrap.ui-select").removeClass("ui-form-focus");
					inputDiv.find("div.ui-form-trigger").removeClass("ui-form-trigger-over");
					  if(options.onchange!==fastDev.noop && ctgclass.indexOf("ui-tree-text")>-1){
						  var li=clickTg.find("li:first");
						  if(li.elems.length===0){
							li= clickTg.parents("li:first");
						  }
						  if(li.elems.length>0){
							var id=li.attr("id");
							var val=global.tree.getValByid(id);
							if(id===options.topParentid){
								id="";
								val="";
							}
							var spanReadonly=li.find("span.ui-tree-text-readonly").elems.length;
							if(spanReadonly===0){						
								options.onchange.call(this,id,val);
							}
						  }
					  }
				  }
			  }
	},
	/**
	 * 卸载页面响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"unloadHandle":function(event){
		var global=this._global,treeDiv=global.treeDiv;
		global.panelContext.fastDev("html").unbind("click", global.bodyClickHandle);
				treeDiv.hide();
				this.destroy();
	},
	/**
	 * 控件销毁方法
	 */
	"destroy" : function() {
		fastDev("html").unbind("click",this._global.bodyClickHandle);
		this.superClass.destroy.call(this);
	},
	/**
	 * 节点点击事件
	 * @private
	*/
	"treeNodeClick":function(event,id,val){
		var global=this._global,inputDiv=global.inputDiv,treeDiv=global.treeDiv;
		var div=treeDiv;
	    if(div.find(".ui-button").elems.length>0){
		   return;
	    }
		div.hide();
		var divparent=inputDiv;
		if(!!val){
		divparent.find("input:text").prop("value",val);
		divparent.find("input[type='hidden']").prop("value",id);
		}else{
			divparent.find("input:text").prop("value",this._options.inputValue);
			divparent.find("input[type='hidden']").prop("value",this._options.hiddenValue);
		}
		this.fire("focus");
	},
	/**
	 * 失去焦点事件
	 * @private
	*/
	"onControlBlur" : function(handle){		
		this.onBlur(handle);
	},
	/**
     * 绑定事件
     * @param {String} type 事件类型
     * @param {Function} handle 事件句柄 
     * @private 
     */
    "bind": function (type, handle) {
        if (type === "blur") {
            this._options.onblur = handle;
        } else {
            this.superClass.bind.apply(this, arguments);
        }
        return this;
    },
    /**
     * 失去焦点
     * @param {event} handle
     * @return {object}
     * @private
     */
	"onBlur" : function(handle){
		this._options.onblur = handle;
		return this;
	},
	/**
	 * 调用失去焦点事件
	 * @param {} event
	 * @param {} handle
	 * @private
	 */
	"onSelectTreeBlur" : function(event,handle) {	
		handle.call(this, event);	
	},
	/**
	 * 清空下拉框树的文本框与隐藏域中的值
	 */
	"clean": function() {
		var global=this._global,options=this._options,inputDiv=global.inputDiv,treeDiv=global.treeDiv;
		if(!!inputDiv){
		inputDiv.find("input:text").prop("value",options.inputValue);
		inputDiv.find("input[type='hidden']").prop("value",options.hiddenValue);
		if(global.tree){
			global.tree._options.currentId = "";
		}
		this._options.currentId = "";
		treeDiv.find("span.ui-tree-selected").removeClass("ui-tree-selected");
		treeDiv.find(".ico-checkbox-checked,.ico-checkbox-half").setClass("ico-checkbox");
		}
	},
	/**
	 * initSource数据源刷新
	 * @param {JsonObject/String} [config] 刷新参数/刷新地址
	 */
	"initRefresh" : function(config){
		var options=this._options,global=this._global;
		this.clean();
		this._global.treeDiv.find("div.ui-tree-panel").children().remove();
		if(this._options.items && !config){
			config={};
			config.data=this._options.items;
		}
		if(!!config.url || !!config.data){
			 this._global.tree.dataset.clean();
		}		
		this._global.tree.reLoad(config);
	},
	/**
	 * 设置选中的id值
	 * @param {String} id
	 */
	"setValue" : function(id){
		if( !id ){
			this.clean();
			return;
		}
		if(typeof id === "number"){
			id=""+id;
		}
		var global=this._global,options=this._options,inputDiv=global.inputDiv,treeDiv=global.treeDiv,falg=false,value,oldid;
		if(options.tree.treeType==="normal"){
			if(global.tree===null){
				options.tree.currentId = id;
				global.tree=global.panelContext.fastDev.create("Tree", options.tree);
				falg=true;
			}
			value=global.tree.getValByid(id);
			
			if(value){
				if(falg===false){
					//给树节点设置选中样式
					global.tree.setCurrentId(id);
				}
				//给文本框和隐藏域赋值
				inputDiv.find("input:text").prop("value",value);
				oldid=inputDiv.find("input[type='hidden']").prop("value");
				inputDiv.find("input[type='hidden']").prop("value",id);
				
			}
		}else{
			if(global.tree===null){
				options.tree.value = id;
				global.tree=global.panelContext.fastDev.create("Tree", options.tree);
				falg=true;
			}
			value=global.tree.getValsByids(id);			
			if(value.indexOf("undefined") === -1){
				inputDiv.find("input:text").prop("value",value);
				oldid=inputDiv.find("input[type='hidden']").prop("value");
				if(options.tree.treeType==="multitree"){
					fastDev.each(id.split(","), function(index, id){
						global.tree.find("li[id='" + id + "'] .ico-checkbox").setClass("ico-checkbox-checked");
					});
				}else{
					id = id.split(",").pop();
					global.tree.find("li[id='" + id + "'] .ico-radio").setClass("ico-radio-checked");
				}				
			}
			inputDiv.find("input[type='hidden']").prop("value",id);
		}
		if(!!oldid && oldid!==id){
				if(options.onchange!==fastDev.noop){
					if(id===options.topParentid){
						id="";
						value="";
					}
					options.onchange.call(this,id,value);
				}
		}
	},
	/**
	 * 设置下拉树文本框和隐藏域的值
	 * @param {String} id
	 * @param {String} text
	 */
	"setTextAndValue" : function(id,text){
		this._global.inputDiv.find("input[type='hidden']").prop("value",id);
		this._global.inputDiv.find("input:text").prop("value",text);
	},
	/**
	 * 获取选中的id值
	 * @return {String}
	 */
	"getValue" : function(){
		var value=this._global.inputDiv.find("input[type='hidden']").prop("value");
		if(value===this._options.topParentid){
			return "";
		}
		return value;
	},
	/**
	 * 获取选中的文本值
	 * @return {String}
	 */
	"getText" : function(){	
		var text=this._global.inputDiv.find("input:text").prop("value");
		if(text===this._options.inputValue){
			return "";
		}
		return text;
	},	
	/**
	 * 得到树的实例
	 * @return {Object}
	 */
	"getTree" : function(){
		return this._global.tree;
	}
});
/**
 * @class fastDev.Ui.TextBox
 * @extends fastDev.Ui.Box
 * TextBox文本框控件，继承自box控件,实现对文本的输入、验证。内含文本框、密码框、隐藏文本框、文本域的实现
 */
fastDev.define("fastDev.Ui.TextBox", {
    "extend": "fastDev.Ui.Box",
    "alias": "TextBox",
    "_options": {
        /**
         * @cfg {String} [width="150px"]
         * 输入框默认宽度
         */
        "width": "150px",
        /**
         * @cfg {String} [width="52px"]
         * 文本域的默认高度
         */
        "height": "52px",
        /**
         * @cfg {String} [type="text"]
         * 输入框类型
         * text : 文本框
		 * password : 密码框
		 * textarea : 文本域
		 * hidden : 隐藏域
         */
        "type": "text",
        /**
         * @cfg {String} [resize="none"]
         * 是否允许用户调节输入框大小 （目前只允许调节文本域的大小）
         * none ： 不允许调节大小（默认）
         * both ：允许调节宽度与高度（水平与垂直方向）
         * horizontal ：只允许调节宽度（水平方向）
         * vertical ： 只允许调节高度（垂直方向）
         */
        "resize": "none",
        /**
         * @cfg {String}
         * 提示文本信息
         */
        "tips": ""
    },
    /**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
    "template" : [
        '<tpl if(#{type} != "hidden")>',
		'<div elem="textbox-wrapper" style="width:#{width}" class="ui-form #{cls}">',
		'<div class="ui-form-wrap #{wrapperCls}">',
        '<tpl if(#{type}=="textarea")>',
		'<div style="width:100%"><textarea id="#{id}" name="#{name}" value="#{value}" title="#{tips}" class="ui-form-field ui-form-input" autocomplete="off" aria-invalid="false" style="resize:none;overflow:auto;height:#{height}"></textarea></div>',
        '<tpl else>',
		'<input id="#{id}" name="#{name}" value="#{value}" title="#{tips}" type="#{type}" class="ui-form-field ui-form-input"/>',
        '</tpl>',
		'</div>',
		'</div>',
        '<tpl else>',
		'<input id="#{id}" name="#{name}" value="#{value}" type="#{type}"/>',
        '</tpl>'],   
    "tplParam": ["width", "height", "name", "value", "id", "wrapperCls", "type", "tips", "cls"],
    /**
     * 输入框参数准备方法
     * @param {Object} options 当前控件配置信息
     * @param {Object} global 当前控件全局信息
     * @protected
     */
    "ready": function (options, global) {
        var type = (options.type + "").toLowerCase(),
            width;
        // 确保ID存在,用于内部查找
        options.id = options.id || fastDev.getID();
        global.wrapperCls = type === "textarea" ? "ui-textarea" : "ui-input";
        if (width = /^(-?\d+\.?\d+|-?\d)(px|%|em|cm)?$/.exec(fastDev.Util.StringUtil.trim(options.width + ""))) {
            options.width = width[1] + (width[2] || "px");
        } else {
            options.width = "150px";
        }
        if (type === "password") {
            // 输入框为密码框时，提示文本无效
            options.emptyText = "";
        } else if (type === "textarea") {
            // 文本域高度计算确定像素值
            options.height = (fastDev.Util.StringUtil.stripUnits(options.height, options.container.height()) || 52) - 4 + "px";
        }
        options.display = (options.display === "none" || options.display === false) ? false : true;
    },
    /**
     * 输入框初始化方法
     * @param {Object} options 当前控件配置信息
     * @param {Object} global 当前控件全局信息
     * @protected
     */
    "init": function (options, global) {
        if (options.type === "textarea" && (global.resize = /(both|horizontal|vertical)/i.exec(options.resize))) {
            fastDev.create("Resizable", {
                element: global.wrapper,
                handles: "se",
                minWidth: 150,
                minHeight: Math.min(parseInt(options.height, 10), 52),
                axis: /horizontal/i.test(global.resize[1]) ? "x" : /vertical/i.test(global.resize[1]) ? "y" : "x,y",
                onstop: function (event, width, height) {
                    var dimension = global.resize[1];
                    if (/both|horizontal/i.test(dimension)) {
                        global.wrapper.parent().width(width + 4);
                    }
                    if (/both|vertical/i.test(dimension)) {
                        global.box.height(height - 2);
                    }
                    return false;
                }
            });
        }
        if (!options.display) {
            this.hide();
        }
        if (options.disabled) {
            this.disable();
        }
    },
    /**
     * 隐藏输入框
     * @return {fastDev.Ui.TextBox} 当前控件实例
     */
    "hide": function () {
        this._options.display = false;
        this.find("[elem='textbox-wrapper']").hide();
        return this;
    },
    /**
     * 显示输入框
     * @return {fastDev.Ui.TextBox} 当前控件实例 
     */
    "show": function () {
        this._options.display = true;
        this.find("[elem='textbox-wrapper']").show();
        return this;
    },
    /**
     * 获取焦点
     * @return {fastDev.Ui.TextBox} 当前控件实例 
     */
    "focus":function () {
		this.find("input").elems[0].focus();
		return this;
    },
    "setValue" : function(value, empty){
		this.superClass.setValue.call(this, (fastDev.isValid(value) ? value+"" : "").replace(/\\r/g,"\r").replace(/\\n/g,"\n"), empty);
    },
    "getValue" : function(){
		return this.superClass.getValue.call(this).replace(/\r/g,"\\r").replace(/\n/g,"\\n");
    }
});
/**
 * @class fastDev.Ui.Editor
 * @extends fastDev.Ui.Component
 * 富文本框控件 富文本框主要支持对文本进行直接的编辑，如设置字体、粗体、高亮、列表等等，功能众多，开发起来工作量较大，现在网上有强大、稳定的第三方开源控件，本控件直接封装了百度ueditor组件，直接做接口适配封装后集成。有简单和完整两种模式，能在表单组件内使用。<p>
 * 注意事项：使用该控件的页面除引用框架的js外，还需要引用2个ueditor的js和1个css文件。
 * 控件不能缺少container属性。<p>
 * 作者： 姜玲
 *
 *			<div id="example" style="width:500px; height:400px;">
 *			<div itype="Editor" container="example" id="editor1" mode="complete"	 saveInstance="true" value="这是值"></div>
 *			</div>
 */
fastDev.define("fastDev.Ui.Editor", {
	"extend" : "fastDev.Ui.Component",
	"alias" : "Editor",
	"_options" : {
		/**
		 * @cfg {String}
		 * 控件容器id		 
		 */
		"container" : null,
		/**
		 * @cfg {String}
		 * 用于设置控件没值时的提示文本 
		 */
		"initialContent" : '<span style=\"color:#ccc\">请输入详细内容</span>',
		/**
		 * @cfg {Boolean}
		 * 控件没值时，是否显示提示文本
		 */
		"autoClearinitialContent" : true,
		/**
		 * @cfg {String}
		 * 初始值的url
		 */
		"dataSource" : "",
		/**
		 * @cfg {String}
		 * 用于设置控件的初始值 
		 */
		"value" : "",
		/**
		 * 设置名称
		 * @cfg {String}
		 */
		"name" : "editor",
		/**
		 * @cfg {String}
		 * 设置id
		 */
		"id" : "editor",
		/**
		 * @cfg {String}
		 * 设置控件类型,有简单和完整simple/complete两种
		 */
		"mode" : "simple",
		/**
		 * @cfg {Array}
		 * 设置控件工具栏，simple类型时使用
		 */
		"toolbars" : "",
		/**
		 * @cfg {Number}
		 * 允许的最大字符数
		 */
		"maximumWords" : 10000,
		/**
		 * @cfg {Number}
		 * iframe的最小高度
		 */
		"minFrameHeight" : 320,
		/**
		 * @cfg {Boolean}
		 * 是否启用Dom结构显示
		 */
		"elementPathEnabled" : false,
		/**
		 * @cfg {Boolean}
		 * 是否开启字数统计
		 */
		"wordCount" : false,
		"validateItems" : {
			"requires" : false
		},		
		"enableDataSet" : false,
		"enableInitProxy" : false,
		"enableDataProxy" : false
	},
	"_global" : {
		//编辑器
		"editor" : null,
		//容器id
		"containerid" : ""
	},
	// 使用父类文档说明
	"ready" : function(options, global) {
		// 初始化容器
		if(fastDev.isString(options.container)) {
			global.containerid = options.container;
		} else {
			global.containerid = fastDev(options.container).prop("id");
		}
		this.setID(options.id);
	},
	// 使用父类文档说明
	"construct" : function(options, global) {
		var containerId = global.containerid, editor;
		//根据编辑器的其他的配置的属性，给编辑器进行配置
		try {
			if(options.mode === "simple") {
				/*global baidu: true */
				editor = new baidu.editor.ui.Editor({
					toolbars : options.toolbars || [['FontFamily', 'FontSize', 'Bold', 'Italic', 'Underline', 'ForeColor', 'BackColor', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'Link', 'InsertUnorderedList', 'InsertOrderedList', 'Source']],
					elementPathEnabled : options.elementPathEnabled, //是否启用elementPath
					wordCount : options.wordCount, //是否开启字数统计
					initialContent : options.initialContent,
					minFrameHeight : options.minFrameHeight,
					textarea : options.name,
					autoClearinitialContent : options.autoClearinitialContent,
					maximumWords : options.maximumWords
				});
			} else {				
				editor = new baidu.editor.ui.Editor({
					initialContent : options.initialContent,
					textarea : options.name,
					minFrameHeight : options.minFrameHeight,
					autoClearinitialContent : options.autoClearinitialContent,
					maximumWords : options.maximumWords
				});
			}
			editor.render(containerId);

			global.editor = editor;
			//表单必须是post模式，get模式提交不了那么多字符
			options.container = null;
		} catch(e) {
			throw e;
		}
	},
	/**
	 * 从一个数据源URL地址设置控件的值
	 * @param {String}
	 */
	"setValueByUrl" : function(url) {
		var options = this._options;
		var that = this;
		var editor = this._global.editor;
		fastDev.Ajax.doPost(url, {
			complete : function(data) {
				editor.setContent(data.text);
			}
		});
	},
	/**
	 * 设置id
	 * @param {String}
	 */
	"setID" : function(id) {
		if(!id) {
			id = fastDev.getID();
			this._options.id = id;
		}
	},
	/**
	 * 获取id
	 */
	"getID" : function() {
		var options = this._options;
		if(options.id) {
			return options.id;
		}
	},
	/**
	 * 设置值
	 * @param {String}
	 */
	"setValue" : function(value) {
		if(value) {
			var editor = this._global.editor;
			/*global unescape: true */
			editor.setContent(unescape(value));
		}
	},
	/**
	 * 得到值
	 * @return {String}
	 */
	"getValue" : function() {
		var editor = this._global.editor;
		var result = editor.getContent();
		result = escape(result);
		return "" + result;
	},
	/**
	 * 得到文本
	 * @return {String}
	 */
	"getText" : function() {
		var editor = this._global.editor;
		var result = editor.getContentTxt();
		return "" + result;
	},
	/**
	 * 设置获取焦点　
	 */
	"focus" : function() {
		var editor = this._global.editor;
		editor.focus();
	}	
});
/**
 * <p>拖拽组件。</p>
 * 以下四个样式类名可供用户自定义使用：
 * <p>ui-draggable-element  被拖动的元素
 * <p>ui-draggable-handle  拖动触发元素
 * <p>ui-draggable-helper  拖动辅助层
 * <p>ui-draggable-dragging 正在拖动中
 * <p>作者：程伟</p>
 * @class fastDev.Interaction.Draggable
 * @extends fastDev.Core.Base
 * @author chengwei
 */
fastDev.define("fastDev.Interaction.Draggable", {
    "alias" : "Draggable",
    "extend" : "fastDev.Core.Base",
    "_options" : {
        /**
         * @cfg {Element|String|fastDev.Core.DomObject} element
         * 被拖拽元素对象或元素选择器
         */
        "element" : null,
        /**
         * @cfg {Element|String|fastDev.Core.DomObject}
         * 触发拖拽事件的元素对象或元素选择器
         */
        "handle" : null,
        /**
         * @cfg {Boolean} [ghost=true]
         * 是否使用辅助层拖动
         */
        "ghost" : true,
        /**
         * @cfg {String} [cursor="move"]
         * 触发拖动时光标的样式
         */
        "cursor" : "move",
        /**
         * @cfg {Float} [opacity=0.4]
         * 使用辅助层时辅助层的透明度
         */
        "opacity" : 0.4,
        /**
         * @cfg {String} [backgroundColor="#0099CC"]
         * 使用辅助层时辅助层的背景色
         */
        "backgroundColor" : "#0099CC",
        /**
         * @cfg {String} [helperCls]
         * 辅助层样式名
         */
        "helperCls" : "",
        /**
         * @cfg {Number} [zIndex=2000]
         * 索引重置
         */
        "zIndex" : 2000,
        /**
         * @cfg {Boolean} [inside=false]
         * 是否限制在父容器内拖动
         */
        "inside" : false,
        /**
         * @cfg {Boolean} [visible=true]
         * 是否限制在当前可视区域内拖动
         */
        "visible" : true,
        /**
         * @cfg {String|Array} [axis]
         * 可拖动的坐标轴线，为以下枚举值：
         * 'x,y'、'x'、'y'或['x','y']、['x']、['y']
         */
        "axis" : ["x", "y"],
        /**
         * @cfg {String|Array} grid
         * 以网格大小拖动，单位可为px、%、em，百分比相对于父元素，em受body的font-size字体尺寸样式影响，0表示不受限制，如：
         * '20,0'或[20,0]表示以宽为20px高不限制的格子拖动
         * '10%,10em'或['10%','10em']表示以宽为父元素宽(含margin)的10%、高为10倍字体大小的格子拖动
         */
        "grid" : [0, 0],
        /**
         * @event oncreate
         * 拖动初始完毕时的回调函数
         */
        "oncreate" : fastDev.noop,
        /**
         * @event onstart
         * 触发拖拽事件时的回调函数,this指向当前被拖动的元素,返回false值则终止拖动
         * @param {Event} event 事件对象
         */
        "onstart" : fastDev.noop,
        /**
         * @event ondrag
         * 拖动进行时的回调函数,this指向当前被拖动的元素,返回false值则不处理该元素的拖动事件,返回false值则终止拖动
         * @param {Event} event 事件对象
         * @param {Number} x X轴方向位移量
         * @param {Number} y Y轴方向位移量
         */
        "ondrag" : fastDev.noop,
        /**
         * @event onstop
         * 拖拽事件结束时的回调函数,this指向当前被拖动的元素,返回false值则不会更改元素定位坐标样式值
         * @param {Event} event 事件对象
         * @param {Number} left 元素经拖动后的X轴坐标值
         * @param {Number} top 元素经拖动后的Y轴坐标值
         */
        "onstop" : fastDev.noop
    },
    // 使用父类文档说明
    "ready" : function (options, global) {
        fastDev.apply(options, {
            zIndex: parseInt(options.zIndex, 10) || 2013,
            handle: fastDev(fastDev.isComponent(options.handle) ? options.handle.elems[0] : options.handle),
            element: fastDev(fastDev.isComponent(options.element) ? options.element.elems[0] : options.element),
            axis: options.axis ? /\s*(x|y)?\s*\,?\s*(x|y)?\s*$/i.exec(options.axis.toString()) ? [RegExp.$1, RegExp.$2 === RegExp.$1 ? '' : RegExp.$2].join("") : null : null,
            grid: options.grid ? /\s*(-?\d+\.?\d+|-?\d)\s*(px|%|em)?\s*\,\s*(-?\d+\.?\d+|-?\d)\s*(px|%|em)?\s*$/i.exec(options.grid.toString()) ? [RegExp.$1 + RegExp.$2, RegExp.$3 + RegExp.$4] : null : null
        });
    },
    // 使用父类文档说明
    "init" : function (options, global) {
        if (options.element.addClass("ui-draggable-element").hasElem()) {
            var that = this,
                doc = document;
            fastDev.apply(global, {
                uuid: fastDev.getID(),
                win: fastDev(window),
                doc: fastDev(doc),
                mask: fastDev("<div/>").appendTo(doc.body).css({
                    top: 0,
                    left: 0,
                    width: 1,
                    height: 1,
                    opacity: 0.01,
                    display: "none",
                    position: "absolute",
                    cursor: options.cursor || "move",
                    zIndex: options.zIndex + 99999997
                })
            });
            if (options.handle.hasElem()) {
				// 点击触发事件绑定
                global.trigger = options.handle.addClass("ui-draggable-handle").bind("mousedown", global.dragHandle = function (event) {
                    return event.button === ((fastDev.Browser.isIE6 || fastDev.Browser.isIE7 || fastDev.Browser.isIE8) ? 1 : 0) ? that.startDrag(event, options.element) : undefined;
                });
            } else {
                global.trigger = options.element.addClass("ui-draggable-handle").bind("mousedown", global.dragHandle = function (event) {
                    return event.button === ((fastDev.Browser.isIE6 || fastDev.Browser.isIE7 || fastDev.Browser.isIE8) ? 1 : 0) ? that.startDrag(event, fastDev(this)) : undefined;
                });
            }
        }
        (options.oncreate || fastDev.noop).call(this);
    },
    /**
     * 拖拽事件初始化
     * @param {Event} event 事件对象
     * @param {DomObject} target 目标元素
     * @private
     */
    "startDrag" : function (event, target) {
        var options = this._options;
        if (!options.disabled) {
            for (var that = this, global = this._global, targets = [], elems = target.elems, i = 0, elem; i < elems.length; i++) {
                if ((options.onstart || fastDev.noop).call(elem = fastDev(elems[i]), event) !== false) {
					// 重新设定当前位置及辅助层
                    this.resetBoundingRect(elem);
                    targets.push(elem.css("zIndex", options.zIndex + 99999996).addClass("ui-draggable-dragging"));
                }
            }
            if (targets.length) {
				// 拖拽事件绑定
                (global.handler = fastDev(event.target)).cursor = global.handler.css("cursor");
                global.doc.bind("mousemove", global.draggingHandle = function (event) {
                    return that.doDragging(event, targets);
                }).bind("mouseup", global.stopHandle = function (event) {
                    return that.stopDrag(event, targets);
                }).bind("dblclick", global.stopHandle).bind("selectstart", fastDev.Event.stopBubble);
                if (!fastDev.Browser.isIE6 && ("onlosecapture" in document.documentElement)) {
                    global.handler.bind("losecapture", global.stopHandle);
                } else {
                    global.win.bind("blur", global.stopHandle);
                }
                if ("setCapture" in document.documentElement) {
                    event.target.setCapture();
                }
                global.sClientX = event.clientX;
                global.sClientY = event.clientY;
            }
        }
        return false;
    },
    /**
     * 拖拽事件处理
     * @param {Object} event 事件对象
     * @param {Array[DomObject]} targets 被拖拽目标元素集
     * @private
     */
    "doDragging" : function (event, targets) {
        var options = this._options,
            global = this._global,
            x = event.clientX - global.sClientX,
            y = event.clientY - global.sClientY,
            target, settings, helper, grid, i;
        this.clsSelect();
        global.handler.css("cursor", options.cursor);
        for (i = 0; target = targets[i]; i++) {
            if ((options.ondrag || fastDev.noop).call(target, event, x, y) !== false) {
				// 指定网格大小限制计算
                grid = (settings = target.elems[0]["dragSettings" + global.uuid]).grid;
                settings.stopLeft = /^x|x$/i.test(options.axis) ? Math.max(settings.limit.minX, Math.min(settings.limit.maxX, (grid[0] ? Math.round(x / grid[0]) * grid[0] : x) + settings.startLeft)) : settings.startLeft;
                settings.stopTop = /^y|y$/i.test(options.axis) ? Math.max(settings.limit.minY, Math.min(settings.limit.maxY, (grid[1] ? Math.round(y / grid[1]) * grid[1] : y) + settings.startTop)) : settings.startTop;
                (helper = settings.helper).css({
                    left: helper.positionCss.left + settings.stopLeft - settings.startLeft,
                    top: helper.positionCss.top + settings.stopTop - settings.startTop,
                    display: "block"
                });
                if (!options.ghost) {
                    target.css({
                        left: settings.stopLeft,
                        top: settings.stopTop
                    });
                }
            }
        }
        global.mask.css({
            display: "block",
            width: global.win.width() + global.doc.scrollLeft(),
            height: global.win.height() + global.doc.scrollTop()
        });
        return false;
    },
    /**
     * 拖拽结束事件
     * @param {Object} event 事件对象
     * @param {Array} targets 被拖拽目标元素集
     * @private
     */
    "stopDrag" : function (event, targets) {
        var options = this._options,
            global = this._global,
            target, settings;
            // 解绑相关拖拽事件
        global.doc.unbind("mousemove", global.draggingHandle).unbind("mouseup", global.stopHandle).unbind("dblclick", global.stopHandle).unbind("selectstart", fastDev.Event.stopBubble);
        if (!fastDev.Browser.isIE6 && ("onlosecapture" in document.documentElement)) {
            global.handler.unbind("losecapture", global.stopHandle);
        } else {
            global.win.unbind("blur", global.stopHandle);
        }
        if ("setCapture" in document.documentElement) {
            global.handler.elems[0].releaseCapture();
        }
        global.handler.css("cursor", global.handler.cursor);
        global.mask.css("display", "none");
        while (target = targets.shift()) {
            target.removeClass("ui-draggable-dragging");
            (settings = target.elems[0]["dragSettings" + global.uuid]).helper.remove();
            if ((options.onstop || fastDev.noop).call(target, event, settings.stopLeft, settings.stopTop) !== false) {
                target.css({
                    left: settings.stopLeft,
                    top: settings.stopTop
                });
            }
            target.css("zIndex", settings.zIndex);
            target.elems[0]["dragSettings" + global.uuid] = null;
        }
        return false;
    },
    /**
     * 重设当前正在被拖拽的元素
     * @param {DomObject} elem 当前正在被拖拽的元素
     * @return {fastDev.Interaction.Draggable} 当前拖拽组件实例
     */
    "resetBoundingRect" : function (elem) {
        var options = this._options,
            global = this._global,
            body = fastDev(document.body),
            fx = fastDev.Util.StringUtil.stripUnits,
            bodyBorder = {
                left: parseInt(body.css("borderLeftWidth"), 10) || 0,
                top: parseInt(body.css("borderTopWidth"), 10) || 0
            },
            offset, position, positionCss, fixed, width, height, parent, helper, settings;
        if ((elem = fastDev(elem)).hasElem()) {
            parent = elem.css("position", positionCss = (position = elem.css("position")) === "static" ? "relative" : position).parent();
            offset = (fixed = positionCss === "fixed") ? {
                left: elem.elems[0].offsetLeft,
                top: elem.elems[0].offsetTop
            } : positionCss === "absolute" ? parent.elems[0] === document.body ? elem.offset() : elem.position() : {
                left: fx(elem.css("left"), parent.width()) || 0,
                top: fx(elem.css("top"), parent.height()) || 0
            };
            position = fixed ? offset : elem.offset();
            if (settings = elem.elems[0]["dragSettings" + global.uuid]) {
                settings.helper.remove();
            }
            (helper = this.createHelper(elem).css({
                position: fixed ? "fixed" : "absolute",
                height: height = elem.outerHeight(true),
                width: width = elem.outerWidth(true),
                left: (position = {
                    left: position.left + (fixed ? 0 : bodyBorder.left),
                    top: position.top + (fixed ? 0 : bodyBorder.top)
                }).left,
                top: position.top,
                display: "none"
            })).positionCss = position;
            if (positionCss === "absolute" && parent.elems[0] === document.body) {
                offset.left += bodyBorder.left;
                offset.top += bodyBorder.top;
            }
            elem.elems[0]["dragSettings" + global.uuid] = {
                grid: [fx(options.grid[0], parent.outerWidth(true)), fx(options.grid[1], parent.outerHeight(true))],
                limit: this.calculateLimit(width, height, offset, elem, parent, positionCss),
                zIndex: settings ? settings.zIndex : elem.css("zIndex"),
                startLeft: offset.left,
                stopLeft: offset.left,
                startTop: offset.top,
                stopTop: offset.top,
                helper: helper
            };
        }
        return this;
    },
    /**
     * 计算坐标范围
     * @param {Number} width
     * @param {Number} height
     * @param {Object} offset
     * @param {DomObject} elem
     * @param {DomObject} parent
     * @param {String} positionCss
     * @private
     */
    "calculateLimit" : function (width, height, offset, elem, parent, positionCss) {
        var options = this._options,
            global = this._global,
            fixed = positionCss === "fixed",
            maxX = Infinity,
            pMaxX = Infinity,
            minX = 0,
            pMinX = 0,
            maxY = Infinity,
            pMaxY = Infinity,
            minY = 0,
            pMinY = 0,
            docLeft, docTop;
        if (options.inside) {
            if (positionCss === "relative") {
                var fx = fastDev.Util.StringUtil.stripUnits,
                    position = elem.offset(),
                    pOffset = parent.offset(),
                    grandparent = parent.parent(),
                    gWidth = grandparent.width(),
                    gHeight = grandparent.height();
                pMinX = -(position.left - pOffset.left - offset.left - (parseInt(parent.css("borderLeftWidth"), 10) || 0) + (fx(parent.css("paddingLeft"), gWidth) || 0) + (fx(parent.css("marginLeft"), gWidth) || 0));
                pMinY = -(position.top - pOffset.top - offset.top - (parseInt(parent.css("borderTopWidth"), 10) || 0) + (fx(parent.css("paddingTop"), gHeight) || 0) + (fx(parent.css("marginTop"), gHeight) || 0));
            }
            pMaxX = pMinX + parent.width() - width;
            pMaxY = pMinY + parent.height() - height;
        }
        if (options.visible) {
            minX = docLeft = fixed ? 0 : global.doc.scrollLeft();
            minY = docTop = fixed ? 0 : global.doc.scrollTop();
            maxY = global.win.height() - height + docTop;
            maxX = global.win.width() - width + docLeft;
        }
        return {
            minX: Math.max(pMinX, minX),
            minY: Math.max(pMinY, minY),
            maxX: Math.min(pMaxX, maxX),
            maxY: Math.min(pMaxY, maxY)
        };
    },
    /**
     * 创建拖拽辅助层
     * @param {DomObject} elem 当前被拖拽的元素
     * @private
     */
    "createHelper" : function (elem) {
        var options = this._options;
        return fastDev("<div/>").css({
            cursor: options.cursor,
            zIndex: options.zIndex + 99999998,
            backgroundColor: options.backgroundColor,
            opacity: options.ghost ? options.opacity : 0.04
        }).setClass(options.helperCls || "ui-draggable-helper").appendTo(document.body);
    },
    /**
     * 清理文本选取
     * @private
     */
    "clsSelect" : "getSelection" in window ? function () {
        try {
            window.getSelection().removeAllRanges();
        } catch (e) {}
    } : function () {
        try {
            document.selection.empty();
        } catch (e) {}
    },
    /**
     * 开启拖拽功能
     * @return {fastDev.Interaction.Draggable} 当前拖拽组件实例
     */
    "enable" : function () {
        var options = this._options;
        options.disabled = !! options.destroyed;
        return this;
    },
    /**
     * 禁用拖拽功能
     * @return {fastDev.Interaction.Draggable} 当前拖拽组件实例
     */
    "disable" : function () {
        this._options.disabled = true;
        return this;
    },
    /**
     * 销毁当前拖拽控件实例
     * @return {fastDev.Interaction.Draggable} 当前拖拽组件实例
     */
    "destroy" : function () {
        var options = this._options,
            global = this._global;
        options.destroyed = options.disabled = true;
        options.element.removeClass("ui-draggable-element");
        (global.trigger || fastDev()).removeClass("ui-draggable-handle").unbind("mousedown", global.dragHandle);
        global.mask.remove();
        return this;
    }
});
/**
 * <p>调节大小组件。</p>
 * 以下三个样式类名可供用户自定义使用：
 * <p>ui-resizable-element  被调节大小的元素
 * <p>ui-resizable-helper  调节大小辅助层
 * <p>ui-resizable-resizing 正在调节中
 * <p>作者：程伟</p>
 * @class fastDev.Interaction.Resizable
 * @extends fastDev.Core.Base
 * @author chengwei
 */
fastDev.define("fastDev.Interaction.Resizable", {
    "alias" : "Resizable",
    "extend" : "fastDev.Core.Base",
    "_options" : {
        /**
         * @cfg {Element|String|DomObject} element
         * 可调整大小的元素对象或元素选择器
         */
        "element" : null,
        /**
         * @cfg {String|Array} [handles="s,e,se"]
         * 可捕获调整大小事件的方位，可为以下枚举量：
         * n(北)、ne(东北)、e(东)、se(东南)、s(南)、sw(西南)、w(西)、nw(西北)、all(全部)
         * 字符串类型值时用逗号分隔
         */
        "handles" : "s,e,se",
        /**
         * @cfg {String|Number} [maxWidth=Infinity]
         * 最大可调宽度限制，可使用单位px、em、%
         * 百分比相对于父元素，em受body的font-size字体尺寸样式影响
         */
        "maxWidth" : Infinity,
        /**
         * @cfg {String|Number} [maxHeight=Infinity]
         * 最大可调高度限制，可使用单位px、em、%
         * 百分比相对于父元素，em受body的font-size字体尺寸样式影响
         */
        "maxHeight" : Infinity,
        /**
         * @cfg {String|Number} [minWidth="1px"]
         * 最小可调宽度限制，可使用单位px、em、%
         * 百分比相对于父元素，em受body的font-size字体尺寸样式影响
         */
        "minWidth" : "1px",
        /**
         * @cfg {String|Number} [minHeight="1px"]
         * 最小可调高度限制，可使用单位px、em、%
         * 百分比相对于父元素，em受body的font-size字体尺寸样式影响
         */
        "minHeight" : "1px",
        /**
         * @cfg {Number} [ratio]
         * 宽高比例限制（宽/高）
         */
        "ratio" : null,
        /**
         * @cfg {String|Array} [axis="x,y"]
         * 可调坐标轴线，为以下枚举值：
         * <p>'x,y'、'x'、'y'或['x','y']、['x']、['y']
         * <p>x为只可调节宽度，y为只可调节高度
         */
        "axis" : "x,y",
        /**
         * @cfg {String|DomObject} container
         * 用于重设可调大小元素所在的父容器
         * 百分比值的计算将依赖于父容器的宽高
         */
        "container" : "",
        /**
         * @cfg {Boolean} [ghost=true]
         * 是否使用辅助层
         * 使用辅助层则在调整大小完成后才做实际变更
         */
        "ghost" : true,
        /**
         * @cfg {Boolean} [border="2px dotted #00F"]
         * 辅助层的边框样式
         */
        "border" : "2px dotted #00F",
        /**
         * @cfg {Float} [opacity=0.4]
         * 辅助层的透明度
         */
        "opacity" : 0.4,
        /**
         * @cfg {String} [backgroundColor="#6699FF"]
         * 辅助层的背景色
         */
        "backgroundColor" : "#6699FF",
        /**
         * @cfg {String} helperCls
         * 辅助层样式名
         * 用于通过样式文件配置
         */
        "helperCls" : "",
        /**
         * @cfg {Number} [zIndex=2000]
         * 索引重置
         */
        "zIndex" : 2000,
        /**
         * @cfg {Boolean} [showTips=false]
         * 是否显示尺寸提示标签
         */
        "showTips" : false,
        /**
         * @event oncreate
         * 初始完成时的回调函数
         */
        "oncreate" : fastDev.noop,
        /**
         * @event onstart
         * 触发调整大小事件时的回调函数,this指向当前被调整大小的元素,返回false值则不会继续处理
         * @param {Event} event 事件对象
         */
        "onstart" : fastDev.noop,
        /**
         * @event onresize
         * 调整大小进行时的回调函数,this指向当前被拖动的元素,返回false值则不会继续处理
         * @param {Event} event 事件对象
         * @param {Number} x X轴方向位移量
         * @param {Number} y Y轴方向位移量
         */
        "onresize" : fastDev.noop,
        /**
         * @event onstop
         * 拖拽事件结束时的回调函数,this指向当前被拖动的元素,返回false值则不会更改元素定位坐标样式值
         * @param {Event} event 事件对象
         * @param {Number} width 内容宽度
         * @param {Number} height 内容高度
         * @param {JsonObject} offset
         * @param {Number} offset.left 元素经拖动后的X轴坐标值
         * @param {Number} offset.top 元素经拖动后的Y轴坐标值
         */
        "onstop" : fastDev.noop
    },
    /**
     * handler模版
     * @private
     */
    "tpl" : {
        "n" : '<span class="ui-resizable-handle ui-resizable-handle-n" style="cursor: n-resize; height: 10px; width: 100%; top: -5px; left: 0; position: absolute;"></span>',
        "s" : '<span class="ui-resizable-handle ui-resizable-handle-s" style="cursor: s-resize; height: 10px; width: 100%; bottom: -5px; left: 0; position: absolute;"></span>',
        "e" : '<span class="ui-resizable-handle ui-resizable-handle-e" style="cursor: e-resize; width: 10px; right: -5px; top: 0; height: 100%; position: absolute;"></span>',
        "w" : '<span class="ui-resizable-handle ui-resizable-handle-w" style="cursor: w-resize; width: 10px; left: -5px; top: 0; height: 100%; position: absolute;"></span>',
        "se" : '<span class="ui-resizable ui-resizable-handle ui-resizable-handle-se" style="cursor: se-resize;  right: 1px; bottom: 1px; position: absolute; overflow: hidden;"></span>',
        "sw" : '<span class="ui-resizable-handle ui-resizable-handle-sw " style="cursor: sw-resize; width: 14px; height: 14px; left: -5px; bottom: -5px; position: absolute;"></span>',
        "nw" : '<span class="ui-resizable-handle ui-resizable-handle-nw" style="cursor: nw-resize; width: 14px; height: 14px; left: -5px; top: -5px; position: absolute;"></span>',
        "ne" : '<span class="ui-resizable-handle ui-resizable-handle-ne" style="cursor: ne-resize; width: 14px; height: 14px; right: -5px; top: -5px; position: absolute;"></span>'
    },
    // 使用父类文档说明
    "ready" : function (options, global) {
        var 
			handles = options.handles,
			elem = options.element,
            handle;
            
        options.handles = [];
        handles = /all/i.test(fastDev.Util.StringUtil.trim(handles)) ? ["n", "ne", "e", "se", "s", "sw", "w", "nw"] : handles ? handles.toString().split(",") : [];
        for (var i = 0; i < handles.length; i++) {
            if (/n[ew]|n|s[ew]|s|w|e/i.test(handle = fastDev.Util.StringUtil.trim(handles[i]))) {
                options.handles.push(handle);
            }
        }
        options.handles = options.handles.length ? options.handles : ["e", "s", "se"];
        fastDev.apply(options, {
            zIndex: parseInt(options.zIndex, 10) || 2013,
            ratio: Math.abs(parseFloat(options.ratio) || 0),
            element: (fastDev(fastDev.isComponent(elem) ? elem.elems[0] : elem) || fastDev()).addClass("ui-resizable-element"),
            container: fastDev(fastDev.isComponent(options.container) ? options.container.elems[0] : options.container),
            axis: options.axis ? /\s*(x|y)?\s*\,?\s*(x|y)?\s*$/i.exec(options.axis.toString()) ? [RegExp.$1, RegExp.$2 === RegExp.$1 ? "" : RegExp.$2].join("") : null : null
        });
    },
   // 使用父类文档说明
    "init" : function (options, global) {
		var doc = document;
        fastDev.apply(global, {
            uuid: fastDev.getID(),
            win: fastDev(window),
            doc: fastDev(doc),
            resizeHandler: []
        });
        for (var wrapper, position, elem, helper, body = doc.body, i = 0; elem = options.element.elems[i++];) {
            wrapper = this.getHandlerWrapper(elem = fastDev(elem));
            position = elem.css("position");
            if (/canvas|textarea|input|select|button|img/i.test(elem.elems[0].nodeName)) {
				// 特殊标签包装
                wrapper.css({
                    position: position === "static" ? "relative" : position,
                    top: position === "static" ? 0 : elem.css("top"),
                    left: position === "static" ? 0 : elem.css("left"),
                    zIndex: elem.css("zIndex"),
                    display: elem.css("display"),
                    width: elem.outerWidth(true),
                    height: elem.outerHeight(true)
                }).replace(elem.css({
                    position: "relative",
                    left: 0,
                    top: 0
                })).append(elem);
            } else {
                wrapper.children("span").appendTo(elem);
                wrapper.remove();
                if (position === "static") {
                    elem.css({
                        position: "relative",
                        left: 0,
                        top: 0
                    });
                }
                wrapper = null;
            }
            elem.elems[0]["resizeWrapper" + global.uuid] = wrapper || elem;
        }
        if (global.resizeHandler.length) {
            var elems = [];
            // 辅助层
            global.mask = fastDev(elem = doc.createElement("div")).css({
                top: 0,
                left: 0,
                width: 1,
                height: 1,
                opacity: 0.01,
                display: "none",
                position: "absolute",
                zIndex: options.zIndex + 99999997
            });
            elems.push(elem);
            helper = global.helper = fastDev(elem = doc.createElement("div")).css({
                display: "none",
                position: "absolute",
                border: options.border,
                zIndex: options.zIndex + 99999998,
                backgroundColor: options.backgroundColor,
                opacity: options.ghost ? parseFloat(options.opacity) || 0.4 : 0.001
            }).setClass(options.helperCls || "ui-resizable-helper");
            elems.push(elem);
            global.tips = options.showTips ? fastDev(elem = doc.createElement("div")).css({
                opacity: 0.4,
                display: "none",
                border: "1px solid",
                position: "absolute",
                backgroundColor: "#FFFFCC",
                zIndex: options.zIndex + 99999999
            }) : fastDev();
            elems.push(elem);
            fastDev(elems).appendTo(body);
        }
        (options.oncreate || fastDev.noop).call(this);
    },
    /**
     * 获取handler
     * @param {DomObject} elem 可调节大小的实际元素
     * @private
     */
    "getHandlerWrapper" : function (elem) {
        for (var that = this, options = this._options, global = this._global, wrapper = fastDev("<div class='ui-resizable-wrapper' style='zoom:1'/>"), handle, i = 0; handle = options.handles[i]; i++) {
            wrapper.append(handle = fastDev(this.tpl[handle]).css("zIndex", options.zIndex + (/n[we]|s[we]/.test(handle) ? 20 : 10)).bind("mousedown", this.getResizeHandle(elem)));
            global.resizeHandler.push(handle);
        }
        return wrapper;
    },
    /**
     * 获取resize处理函数
     * @param {DomObject} elem 可调节大小的实际元素
     * @private
     */
    "getResizeHandle" : function (elem) {
        var that = this;
        return function (event) {
            return event.button === ((fastDev.Browser.isIE6 || fastDev.Browser.isIE7 || fastDev.Browser.isIE8) ? 1 : 0) ? that.startResize(event, elem) : undefined;
        };
    },
    /**
     * 开始调节大小事件处理
     * @param {Event} event
     * @param {DomObject} target 可调节大小的实际元素
     * @private
     */
    "startResize" : function (event, target) {
        var that = this,
            options = this._options,
            global = this._global,
            helper = global.helper,
            settings, wrapper, handler, offset, parent, width, height, cursor;
        if (!options.disabled && (options.onstart || fastDev.noop).call(target, event) !== false) {
            fastDev.apply(target.elems[0]["resizeSettings" + global.uuid] = settings = {}, {
                handler: handler = fastDev(event.target),
                handlerName: handler.getClass().match(/ui-resizable-handle-(n[ew]|n|s[ew]|s|w|e)/)[1],
                wrapper: wrapper = target.elems[0]["resizeWrapper" + global.uuid],
                parent: parent = options.container.isEmpty() ? wrapper.parent() : options.container,
                startLeft: (offset = wrapper.offset()).left,
                startHeight: height = wrapper.outerHeight(true),
                startWidth: width = wrapper.outerWidth(true),
                limit: this.limit(wrapper, parent),
                position: wrapper.css("position"),
                zIndex: target.css("zIndex"),
                sClientX: event.clientX,
                sClientY: event.clientY,
                startTop: offset.top
            });
            if (settings.position === "fixed") {
                settings.fixedPosition = {
                    left: wrapper.elems[0].offsetLeft,
                    top: wrapper.elems[0].offsetTop
                };
                wrapper.css("position", "absolute").offset(offset);
            }
            wrapper.css("zIndex", options.zIndex + 99999996).addClass("ui-resizable-resizing");
            global.mask.css("cursor", cursor = handler.css("cursor"));
            global.helperBorder = global.helperBorder || {
				horizontal: helper.outerWidth() - helper.innerWidth(),
                vertical: helper.outerHeight() - helper.innerHeight()
            };
            helper.css({
                cursor: cursor,
                display: "block",
                width: Math.max(width - global.helperBorder.horizontal, 2),
                height: Math.max(height - global.helperBorder.vertical, 2)
            }).offset(offset);
            if (options.showTips) {
                global.tips.css({
                    display: "block",
                    left: event.clientX + 10,
                    top: event.clientY + 10
                }).setText(Math.ceil(width) + " × " + Math.ceil(height));
            }
            global.doc.bind("mousemove", global.resizingHandle = function (event) {
                return that.doResizing(event, target);
            }).bind("mouseup", global.stopHandle = function (event) {
                return that.stopResize(event, target);
            }).bind("dblclick", global.stopHandle).bind("selectstart", fastDev.Event.stopBubble);
            if (!fastDev.Browser.isIE6 && ("onlosecapture" in document.documentElement)) {
                settings.handler.bind("losecapture", global.stopHandle);
            } else {
                global.win.bind("blur", global.stopHandle);
            }
            if ("setCapture" in document.documentElement) {
                event.target.setCapture();
            }
        }
        return false;
    },
    /**
     * 调节大小过程事件处理
     * @param {Event} event
     * @param {DomObject} target 可调节大小的实际元素
     * @private
     */
    "doResizing" : function (event, target) {
        var options = this._options,
            global = this._global,
            settings = target.elems[0]["resizeSettings" + global.uuid],
            offsetX, offsetY;
        this.clsSelect();
        if ((options.onresize || fastDev.noop).call(target, event, offsetX = event.clientX - settings.sClientX, offsetY = event.clientY - settings.sClientY) !== false) {
            var p = settings.handlerName,
                axis = options.axis,
                limit = settings.limit,
                startWidth = settings.startWidth,
                startHeight = settings.startHeight,
                startLeft = settings.startLeft,
                startTop = settings.startTop,
                width = startWidth,
                height = startHeight,
                left = startLeft,
                top = startTop,
                offset;
                // 根据拖拽触发方向计算相应坐标值及宽高
            if (p === "e" || axis === "x") {
                width = startWidth + offsetX;
                if (options.ratio) {
                    height = width / options.ratio;
                }
            } else if (p === "s" || axis === "y") {
                height = startHeight + offsetY;
                if (options.ratio) {
                    width = height * options.ratio;
                }
            } else if (p === "se") {
                width = startWidth + offsetX;
                if (options.ratio) {
                    height = width / options.ratio;
                } else {
                    height = startHeight + offsetY;
                }
            } else if (/nw|sw|w/.test(p)) {
                left = startLeft + offsetX;
                width = startWidth - offsetX;
                if (options.ratio) {
                    offsetY = offsetX / options.ratio;
                    height = width / options.ratio;
                }
                if (p === "nw") {
                    top = startTop + offsetY;
                    height = startHeight - offsetY;
                } else if (!options.ratio && p === "sw") {
                    height = startHeight + offsetY;
                }
            } else { //ne、n
                top = startTop + offsetY;
                height = startHeight - offsetY;
                if (options.ratio) {
                    width = height * options.ratio;
                } else if (p === "ne") {
                    width = startWidth + offsetX;
                }
            }
            // 依据最值计算宽高
            width = Math.max(limit.minWidth, Math.min(limit.maxWidth, width));
            height = Math.max(limit.minHeight, Math.min(limit.maxHeight, height));
            left = left === startLeft ? left : Math.max(width === limit.maxWidth ? startLeft - (width - startWidth) : 0, Math.min(startLeft + startWidth - limit.minWidth, left));
            top = top === startTop ? top : Math.max(height === limit.maxHeight ? startTop - (height - startHeight) : 0, Math.min(startTop + startHeight - limit.minHeight, top));
            global.helper.css({
                width: Math.max(width - global.helperBorder.horizontal, 2),
                height: Math.max(height - global.helperBorder.vertical, 2)
            }).offset(offset = {
                left: left,
                top: top
            });
            global.mask.css({
                display: "block",
                width: global.win.width() + global.doc.scrollLeft(),
                height: global.win.height() + global.doc.scrollTop()
            });
            if (options.showTips) {
                global.tips.css({
                    left: event.clientX + 10,
                    top: event.clientY + 10
                }).setText(Math.ceil(width) + " × " + Math.ceil(height));
            }
            if (!options.ghost) {
                this.resize(target, width, height, Math.max(width - (target.outerWidth(true) - target.width()), 1), Math.max(height - (target.outerHeight(true) - target.height()), 1));
            }
        }
        return false;
    },
    /**
     * 调节大小终止件处理
     * @param {Event} event
     * @param {DomObject} target 可调节大小的实际元素
     * @private
     */
    "stopResize" : function (event, target) {
        var options = this._options,
            global = this._global,
            settings = target.elems[0]["resizeSettings" + global.uuid],
            wrapper = target.elems[0]["resizeWrapper" + global.uuid],
            helper = global.helper,
            offset = helper.offset(),
            position, outerWidth, outerHeight, width, height;
        global.doc.unbind("mousemove", global.resizingHandle).unbind("mouseup", global.stopHandle).unbind("dblclick", global.stopHandle).unbind("selectstart", fastDev.Event.stopBubble);
        if (!fastDev.Browser.isIE6 && ("onlosecapture" in document.documentElement)) {
            settings.handler.unbind("losecapture", global.stopHandle);
        } else {
            global.win.unbind("blur", global.stopHandle);
        }
        if ("setCapture" in document.documentElement) {
            settings.handler.elems[0].releaseCapture();
        }
        global.mask.css("display", "none");
        global.helper.css("display", "none");
        global.tips.css("display", "none");
        if (position = settings.fixedPosition) {
            target.css({
                position: "fixed",
                left: position.left,
                top: position.top
            });
            offset.left -= global.doc.scrollLeft();
            offset.top -= global.doc.scrollTop();
        } else if (settings.position === "relative") {
            var fx = fastDev.Util.StringUtil.stripUnits,
                parent = settings.parent,
                left = fx(target.css("left"), parent.width()) || 0,
                top = fx(target.css("top"), parent.height()) || 0;
            offset.left += (left - settings.startLeft);
            offset.top += (top - settings.startTop);
        }
        wrapper.css("zIndex", settings.zIndex).removeClass("ui-resizable-resizing");
        if ((options.onstop || fastDev.noop).call(target, event, width = Math.max((outerWidth = helper.outerWidth(true)) - (target.outerWidth(true) - target.width()), 1), height = Math.max((outerHeight = helper.outerHeight(true)) - (target.outerHeight(true) - target.height()), 1), offset) !== false) {
            this.resize(target, outerWidth, outerHeight, width, height);
        }
        return false;
    },
    /**
     * 变更元素的尺寸样式
     * @param {DomObject} target 可调节大小的实际元素
     * @param {Number} outerWidth 绝对宽度
     * @param {Number} outerHeight 绝对高度
     * @param {Number} width 内容宽度
     * @param {Number} height 内容高度
     * @private
     */
    "resize" : function (target, outerWidth, outerHeight, width, height) {
        var wrapper = target.elems[0]["resizeWrapper" + this._global.uuid];
        if (wrapper.elems[0] !== target.elems[0]) {
            wrapper.css({
                width: outerWidth,
                height: outerHeight
            });
        }
        target.css({
            width: width,
            height: height
        });
    },
    /**
     * 宽高限制计算
     * @param {DomObject} elem
     * @param {DomObject} parent 宽高百分比值计算的相对元素
     * @private
     */
    "limit" : function (elem, parent) {
        var options = this._options,
            global = this._global,
            ratio = options.ratio,
            pWidth = parent.width(),
            pHeight = parent.height(),
            fx = fastDev.Util.StringUtil.stripUnits,
            pMinWidth, pMinHeight, pMaxWidth, pMaxHeight, val, b = {
                minWidth: fx(options.minWidth, pWidth) || 1,
                maxWidth: fx(options.maxWidth, pWidth) || Infinity,
                minHeight: fx(options.minHeight, pHeight) || 1,
                maxHeight: fx(options.maxHeight, pHeight) || Infinity
            };
        if (ratio) {
			// 宽高比例限制计算
            pMinWidth = b.minHeight * ratio;
            pMinHeight = b.minWidth / ratio;
            pMaxWidth = b.maxHeight * ratio;
            pMaxHeight = b.maxWidth / ratio;
            if (pMinWidth > b.minWidth) b.minWidth = pMinWidth;
            if (pMinHeight > b.minHeight) b.minHeight = pMinHeight;
            if (pMaxWidth < b.maxWidth) b.maxWidth = pMaxWidth;
            if (pMaxHeight < b.maxHeight) b.maxHeight = pMaxHeight;
        }
        return b;
    },
    /**
     * 清理文本选取
     * @private
     */
    "clsSelect" : "getSelection" in window ? function () {
        try {
            window.getSelection().removeAllRanges();
        } catch (e) {}
    } : function () {
        try {
            document.selection.empty();
        } catch (e) {}
    },
    /**
     * 开启调节大小功能
     * @return {fastDev.Interaction.Resizable} 当前调节大小组件实例
     */
    "enable" : function () {
        var options = this._options;
        options.disabled = !! options.destroyed;
        for (var global = this._global, handler, i = 0; handler = global.resizeHandler[i++];) {
            handler.css("visibility", "visible");
        }
        return this;
    },
    /**
     * 开启调节大小功能
     * @return {fastDev.Interaction.Resizable} 当前调节大小组件实例
     */
    "disable" : function () {
        this._options.disabled = true;
        for (var global = this._global, handler, i = 0; handler = global.resizeHandler[i++];) {
            handler.css("visibility", "hidden");
        }
        return this;
    },
    /**
     * 开启调节大小功能
     * @return {fastDev.Interaction.Resizable} 当前调节大小组件实例
     */
    "destroy" : function () {
        var options = this._options,
            global = this._global,
            handler;
        options.destroyed = options.disabled = true;
        options.element.removeClass("ui-resizable-element");
        global.mask.remove();
        global.helper.remove();
        global.tips.remove();
        while (handler = global.resizeHandler.shift()) {
            handler.remove();
        }
        return this;
    }
});
/**
 * @class fastDev.Ui.Accordion
 * @extends fastDev.Ui.Component
 * 手风琴控件是一个提供多个收缩展开功能的控件。由数个标题和及其具体内容组成。点击标题可以收缩或展开其内容。继承自Component，导航类控件。<p>
 * 作者：姜玲
 *
 *		<div itype="Accordion" >
 *			<div id="accordion1" text="文本">
 *                我们的名字...
 *			</div>
 *			<div id="accordion2" text="列表">
 *				<ul><li>第1条数据</li><li>第2条数据</li><li>第3条数据</li><li>第4条数据</li></ul>
 *			</div>
 *			<div id="accordion4" text="树">
 *			 <div itype="Tree"  initSource="data1.txt" showIco="true" topParentid="0" openFloor=2 ></div>
 *			</div>
 *		</div>
 */
fastDev.define("fastDev.Ui.Accordion", {
	"extend" : "fastDev.Ui.Component",
	"alias" : "Accordion",
	"_options" : {
		/**
		 * @cfg {String} currentNode
		 * 默认展开子项ID
		 * @removed 已作废，推荐使用 {@link #activeId}
		 */
		"currentNode" : null,
		/**
		 * @cfg {Boolean} [showAll=false]
		 * 第一次加载是否展开所有节点
		 * @removed 已作废，推荐使用 {@link #expandAll}
		 */
		"showAll" : false,
		/**
		 * @cfg {String} [mode=maxContent]
		 * 子项展开显示模式
		 * maxContent : 以控件剩余最大值显示子项内容(已作废，推荐使用max)
		 * minContent : 以子项内容所占实际高度显示内容(已作废，推荐使用min)
		 * @removed 已作废，推荐使用 {@link #expandMode}
		 */
		"mode" : "maxContent",
		/**
		 * @cfg {Boolean} [showOne=true]
		 * 是否只能展开一个节点，不能同时展开多个节点
		 */
		"showOne" : true,
		/**
		 * @cfg {Boolean} [expandAll=false]
		 * 第一次加载是否展开所有节点
		 */
		"expandAll" : false,
		/**
		 * @cfg {String} activeId
		 * 默认展开子项ID
		 */
		"activeId" : null,
		/**
		 * @cfg {Number} [activeIndex=0]
		 * 默认展开子项索引，索引从0开始，代表第1个链接，-1为不打开
		 */
		"activeIndex" : 0,
		/**
		 * @cfg {String} [expandMode=max]
		 * 子项展开显示模式
		 * max : 以控件剩余最大值显示子项内容
		 * min : 以子项内容所占实际高度显示内容
		 */
		"expandMode" : "max",
		/**
		 * @event onCollect
		 * 子项收缩时回调事件
		 * @param {String} id 展开子项的ID
		 * @param {String} text 展开子项的文本
		 * @removed 已作废，推荐使用 {@link #onCollapse}
		 */
		"onCollect" : fastDev.noop,
		/**
		 * @event onItemClick
		 * 子项被鼠标单击时回调事件
		 * @param {Event} event 当前事件对象
		 * @param {String} id 被点击的子项ID
		 * @param {String} text 被点击的子项文本
		 * @removed 已作废，推荐使用 {@link #onclick}
		 */
		"onItemClick" : fastDev.noop,
		/**
		 * @event onAdd
		 * 增加一个子项后回调事件
		 * @removed 已作废，推荐使用 {@link #onAfterAdd}
		 */
		"onAdd" : fastDev.noop,
		/**
		 * @event onRemove
		 * 删除一个子项后回调事件
		 * @removed 已作废，推荐使用 {@link #onAfterRemove}
		 */
		"onRemove" : fastDev.noop,
		/**
		 * @event onExpand
		 * 子项展开时回调事件
		 * @param {String} id 展开子项的ID
		 * @param {String} text 展开子项的文本
		 */
		"onExpand" : fastDev.noop,
		/**
		 * @event onCollapse
		 * 子项收缩时回调事件
		 * @param {String} id 展开子项的ID
		 * @param {String} text 展开子项的文本
		 */
		"onCollapse" : fastDev.noop,
		/**
		 * @event onclick
		 * 子项被鼠标单击时回调事件
		 * @param {Event} event 当前事件对象
		 * @param {String} id 被点击的子项ID
		 * @param {String} text 被点击的子项文本
		 */
		"onclick" : fastDev.noop,
		/**
		 * @event onBeforeAdd
		 * 增加一个子项前回调事件，返回false不执行增加
		 */
		"onBeforeAdd" : fastDev.noop,
		/**
		 * @event onAfterAdd
		 * 增加一个子项后回调事件
		 */
		"onAfterAdd" : fastDev.noop,
		/**
		 * @event onBeforeRemove
		 * 删除一个子项前回调事件，返回false不执行删除
		 */
		"onBeforeRemove" : fastDev.noop,
		/**
		 * @event onAfterRemove
		 * 删除一个子项后回调事件
		 */
		"onAfterRemove" : fastDev.noop
	},
	"_global" : {
		// 控件子项面板
		"panel" : null,
		// 子项内容部分最大可用高度
		"contentHeight" : 0,
		// 常量 控件动画运行速度
		"animateSpeed" : 400
	},
	/**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
	"template" : [
		'<div class="ui-accordion" style="width:#{width};height:#{height};">', 
			'<div class="ui-accordion-panle">', 
				'<tpl dynamic>', 
					'<tpl each>', 
						'<div class="ui-accordion-item" id="item-{id}">', 
							'<a>',
								'<div class="ui-accordion-header">', 
									'<div class="ui-accordion-title">{text}</div>', 
									'<div class="ui-accordion-header-ico"></div>', 
									'<span class="ui-accordion-arrow"></span>', 
								'</div>', 
							'</a>',
							'<div class="ui-accordion-content" id="{id}"></div>', 
						'</div>', 
					'</tpl>', 
				'</tpl>', 
			'</div>', 
		'</div>'
	],
	/**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
	"tplParam" : ["width", "height", "id"],
	/**
	 * @property {Array} fields
	 * 控件所对应的数据模型定义
	 * @readonly
	 */
	"fields" : ["id", "text", "content"], 
	// 使用父类文档说明
	"ready" : function(options, global) {
		// 已作废的配置项mode配置与新配置expandMode之间的兼容处理
		var expandMode = options.expandMode, mode = options.mode;
		options.expandMode = mode.indexOf(expandMode) === -1 && expandMode === "max" && "min" || expandMode;
		
		// 已作废的配置项currentNode与新配置项activeId之间的兼容处理
		options.activeId = options.activeId || options.currentNode;
		
		// 已作废的配置项showAll与新配置项expandAll之间的兼容处理
		options.expandAll = options.expandAll || options.showAll;
		
		// 已作废的配置项onCollect与新配置项onCollapse之间的兼容处理
		options.onCollapse = fastDev.isNoop(options.onCollapse) && options.onCollect || options.onCollapse;
		
		// 已作废的配置项onItemClick与新配置项onclick之间的兼容处理
		options.onclick = fastDev.isNoop(options.onclick) && options.onItemClick || options.onclick;
		
		// 已作废的配置项onAdd与新配置项onAfterAdd之间的兼容处理
		options.onAfterAdd = fastDev.isNoop(options.onAfterAdd)  && options.onAdd || options.onAfterAdd;
		
		// 已作废的配置项onRemove与新配置项onAfterRemove之间的兼容处理
		options.onAfterRemove = fastDev.isNoop(options.onAfterRemove)  && options.onRemove || options.onAfterRemove;
		
		// expandAll为true时，showOne强制设为false
		options.showOne = options.expandAll ? false : options.showOne;
		// 控件自带1个像素边框，所以实际宽度与高度都需要减去俩个像素的边框值
		options.width = (global.width = global.width - 2) + "px";
		// expandAll或者showOne为true时，不再限定容器高度，让其自适应
		if(options.expandAll || options.showOne === false){
			options.height = "auto";
		}else{
			options.height =  (global.height = global.height - 2) + "px";
		}
		// 重设索引值，从HTML中读取的值为字符串类型，在控件中使用数字类型
		if(options.activeIndex){
			options.activeIndex = +options.activeIndex;
		}
		 
	},
	// 使用父类文档说明
	"construct" : function(options, global){
		global.panel = fastDev(this.elems).first();
	},
	// 使用父类文档说明
	"init" :function(options, global){
		// 绑定面板单击事件
		global.panel.bind("click", fastDev.setFnInScope(this,this.panelClickHandle));
	},
	// 使用父类文档说明
	"constructItems" : function(options, global) {
		// 使用动态数据初始化控件动态模板
		this.renderDynamicHtml(global.panel);
		
		// 展现模式为max时，计算子项内容部分最大展现高度
		// 子项头部每个高度占26px
		if(options.expandMode === "max" && !options.expandAll){
			global.contentHeight = global.height -  this.dataset.getSize() * 26;
		}
		
		// 根据配置搜索当前展开子项列表
		var expandItems = options.expandAll ? this.dataset.select() : options.activeId ? this.dataset.select(function(index, record) {
			return options.activeId === record.id;
		}) : options.activeIndex !== -1 ? this.dataset.select(function(index, record) {
			return options.activeIndex === index;
		}) : [];
		
		// 初始化需要展开子项的内容区域
		for(var i = 0, item; item = expandItems[i]; i++){
			this.expandItem(options, global, item);
		}
	},
	/**
	 * 展开子项
	 * @param {JsonObject} options 控件配置对象
	 * @param {JsonObject} global 控件全局对象
	 * @param {JsonObject} item 子项数据对象
	 * @private
	 */
	"expandItem" : function(options, global, item){
		
		// 展开子项面板并回调子项展开事件
		// 在模板中声明了每一个子项都由俩个子节点构成
		// 第一个子节点为子项头部
		// 第二个子节点为子项内容区域
		var domObj = this.find("#item-"+item.id),
			children = domObj.children().elems,
			itemHead = fastDev(children[0]),
			itemContent = fastDev(children[1]);
		
		if(itemContent.attr("init") !== "true"){
			// 添加子项内容至子项内容展示容器
			// 为子项内容容器加上初始化状态标识
			// 编译内容中的控件代码
			fastDev.Core.ControlBus.compile("itype", this.find("#"+item.id).append(fastDev.createByHTML(item.content)).attr("init", "true").elems, true);
		}
		
		// 子项内容高度值不为0时以子项可用最大高度展现
		// 否则以子项实际高度展现
		// expandMode为min或者expandAll为true时，contentHeight为0
		if(global.contentHeight && global.contentHeight > 0){
			itemContent.animate({"height" : global.contentHeight}, global.animateSpeed);
		}else{
			itemContent.css("height", "auto");
		}
		itemHead.addClass("ui-accordion-selected");
		options.onExpand.call(this, item.id);
	},
	/**
	 * 收缩子项
	 * @param {JsonObject} options 控件配置对象
	 * @param {JsonObject} item 子项数据对象
	 * @private
	 */
	"collapseItem" : function(options, item){
		var domObj = this.find("#item-"+item.id),
			children = domObj.children().elems,
			itemHead = fastDev(children[0]),
			itemContent = fastDev(children[1]);
		
		itemContent.animate({"height" : 0}, this._global.animateSpeed);
		itemHead.removeClass("ui-accordion-selected");
		options.onCollapse.call(this, item.id);
	},
	/**
	 * 对子项当前状态取反，如果当前已展开则收缩，如果当前已收缩则展开
	 * @param {JsonObject} options 控件配置对象
	 * @param {JsonObject} global 控件全局对象
	 * @param {JsonObject} item 子项数据对象
	 * @private
	 */
	"toggleItem" : function(options, global, item){
		return this.find("#item-"+item.id).first().hasClass("ui-accordion-selected") ? 
			this.collapseItem(options, item) : 
			this.expandItem(options, global, item);
	},
	/**
	 * 控件面板点击事件代理句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"panelClickHandle" : function(event){
		var 
			activeItem, 
			collapseItems, 
			collapseIds = "",
			options = this._options, 
			global = this._global, 
			activeDomObj = fastDev(event.target).parents(".ui-accordion-item"),
			activeItemId = activeDomObj.prop("id");
		
		// 点击到内容区域时，不执行展开收缩操作
		if(!activeDomObj.first().contains(event.target)){
			return;
		}
		
		// 确定当前点击的子项			
		activeItem = this.dataset.select(function(index, record){
			return "item-"+record.id === activeItemId;
		})[0] || {};
		
		options.onclick.call(this, event, activeItemId);
		
		// 如果配置showOne为true则关闭除当前点击项之外展开的子项
		if(options.showOne){
			// 如果当前点击的子项已经展开则不作处理
			if(activeDomObj.first().hasClass("ui-accordion-selected")){
				return;
			}
			
			collapseIds = ("," + this.getExpandItems() + ",").replace(activeItemId+",", "");
			
			collapseItems = this.dataset.select(function(index, record){
				return collapseIds.indexOf(",item-" + record.id + ",") !== -1;
			});
			for(var i = 0, item; item = collapseItems[i]; i++){
				this.collapseItem(options, item);
			}
			
			// 展开当前点击子项
			this.expandItem(options, global, activeItem);

		}else{
			// 对当前点击项执行状态取反，展开则收缩，收缩则展开	
			this.toggleItem(options, global, activeItem);
		}
	},
	/**
	 * 获取当前展开的子项id
	 * @removed 已作废，推荐使用 {@link #getExpandItems}
	 */
	"getSelected" : function() {
		return this.getExpandItems();
	},
	/**
	 * 获取当前展开的子项id，当当前展开子项为多个时，id以逗号分隔
	 * @return {String} ids 
	 */
	"getExpandItems" : function(){
		var collapseIds="";
		this.find(".ui-accordion-selected").parent().each(function(idx, elem){
			collapseIds += ","+fastDev(elem).prop("id");
		});
		return collapseIds.slice(1);
	},
	/**
	 * 添加一个子项至当前控件中
	 * @param {JsonObject} item 子项配置信息
	 * @param {String} item.id 子项ID
	 * @param {String} item.text 子项文本
	 * @param {String} item.content 子项内容
	 */
	"addItem" : function(item) {
		// 查找当前添加子项是否已存在，以子项ID作为判断
		var options = this._options, exist = this.dataset.select(function(index, record){
			return record.id === item.id;
		}).length;
		
		if(exist){
			fastDev.error("Accordion", "addItem", "id为" + item.id + "的数据已经存在");
			return;
		}
		if(options.onBeforeAdd.call(this,item.id) === false){
			return;
		}
		
		// 将当前子项数据添加到数据集中
		item = this.dataset.insert(item);
		
		this.renderDynamicHtml(this._global.panel);
		
		this.expandItem(options, this._global, item);
		
		options.onAfterAdd.call(this, item.id);
	},
	/**
	 * 从当前控件中移除一个子项
	 * @param {String} id 子项ID
	 */
	"removeItem" : function(id) {
		var options = this._options;
		// 回调删除前事件
		if(options.onBeforeRemove.call(this, id) === false) {
			return;
		}
		// 从数据集中删除
		this.dataset.remove(function(index, record) {
			return record.id === id;
		});
		// 使用删除后数据重新渲染界面
		this.refreshDataSet([], true, true, false);
		//回调删除后事件
		options.onAfterRemove.call(this, id);
	},
	/**
	 * 使用静态数据源重置刷新当前控件 
	 * @param {Array[JsonObject]} items
	 */
	"refresh" : function(items){
		if(fastDev.isArray(items)){
			this.refreshDataSet(items, true, true );
		}
	}
});
/**
 * @class fastDev.Ui.Panel
 * @extends fastDev.Ui.Component
 * @author 禄铭
 * <p>面板控件，继承自component。布局类控件。</p>
 * <p>可定义标题图标，折叠，最大最小，关闭按钮等。</p>
 * <p>作者：禄铭</p>
 *      
 *      <div itype="Panel" width="100px" height="100px">
 *           面板内容
 *      </div>
 */
fastDev.define("fastDev.Ui.Panel", {
    "extend": "fastDev.Ui.Component",
    "alias": "Panel",
    "_options": {
        /**
         * @cfg {String}
         * 标题内容
         */
        "title": "",
        /**
         * @cfg {String}
         * 标题内容自定义样式名
         */
        "headerCls": "",
        /**
         * @cfg {String}
         * 标题栏图标样式名
         */
        "iconCls": "",
        /**
         * @cfg {String}
         * 面板内容区域自定义样式名
         */
        "bodyCls": "",
        /**
         * @cfg {String} 
         * 面板内容区域自定义行内样式
         * <p>值格式如：margin:10px;padding:10px;
         */
        "bodyStyle": "",
        /**
         * @cfg {Boolean}
         * 是否显示面板内容区域的边框
         */
        "showBorder": true,
        /**
         * @cfg {Boolean}
         * 是否显示标题栏
         */
        "showHeader": true,
        /**
         * @cfg {String}
         * 面板内容
         */
        "content": "",
        /**
         * @cfg {Boolean}
         * 是否显示折叠面板按钮
         */
        "showCollapseBtn": false,
        /**
         * @cfg {Boolean}
         * 是否显示最小化面板按钮
         */
        "showMinBtn": false,
        /**
         * @cfg {Boolean}
         * 是否显示最大化面板按钮
         */
        "showMaxBtn": false,
        /**
         * @cfg {Boolean}
         * 是否显示关闭面板按钮
         */
        "showCloseBtn": false,
        /**
         * @cfg {Boolean}
         * 面板初始是否折叠
         */
        "collapsed": false,
        /**
         * @cfg {Boolean}
         * 面板初始是否最小化
         */
        "minimized": false,
        /**
         * @cfg {Boolean}
         * 面板初始是否最大化
         */
        "maximized": false,
        /**
         * @cfg {String}
         * 加载图标附带的提示消息内容
         */
        "loadingMsg": "",
        /**
         * @cfg {Boolean}
         * 加载面板内容时是否显示加载图标
         */
        "showLoading": true,
        /**
         * @cfg {String}
         * 面板的宽度
         */
        "width": "300px",
        /**
         * @cfg {String}
         * 面板的高度
         */
        "height": "185px",
        /**
         * @cfg {String}
         * 面板内部子页面链接地址
         */
        "src": "",
        /**
         * @cfg {Number|String}
         * 动画执行的速度值
         * <p>单位为毫秒
         * <p>0表示没有动画效果
         * <p>也可使用以下预定义速度枚举值：
         * <p>-slow 600毫秒 
         * <p>-fast 200毫秒 
         * <p>-default 400毫秒  
         */
        "animateSpeed": "default",
        /**
         * @cfg {String}
         * 重置动画执行算法
         * <p>默认情况下不同的窗口动画类型，使用的算法并不一致 
         * <p>该属性可将所有动画效果的算法重置为某一算法类型（如:liner）
         */
        "animateEasing": "liner",
        /**
         * @event onBeforeOpen
         * 面板显示之前事件
         * <p>回调函数返回布尔值false可阻止面板显示
         * <p>this指向当前面板控件
         */
        "onBeforeOpen": fastDev.noop,
        /**
         * @event onAfterOpen
         * 面板显示之后事件
         * <p>this指向当前面板控件
         */
        "onAfterOpen": fastDev.noop,
        /**
         * @event onBeforeClose
         * 面板关闭之前事件
         * <p>回调函数返回布尔值false可阻止面板关闭
         * <p>this指向当前面板控件
         */
        "onBeforeClose": fastDev.noop,
        /**
         * @event onBeforeClose
         * 面板关闭之后事件
         * <p>this指向当前面板控件
         */
        "onAfterClose": fastDev.noop,
        /**
         * @event onBeforeCollapse
         * 面板内容折叠之前事件
         * <p>回调函数返回布尔值false可阻止面板内容折叠
         * <p>this指向当前面板控件
         */
        "onBeforeCollapse": fastDev.noop,
        /**
         * @event onAfterCollapse
         * 面板内容折叠之后事件
         * <p>this指向当前面板控件
         */
        "onAfterCollapse": fastDev.noop,
        /**
         * @event onAfterCollapse
         * 面板内容展开之前事件
         * <p>回调函数返回布尔值false可阻止面板内容展开
         * <p>this指向当前面板控件
         */
        "onBeforeExpand": fastDev.noop,
        /**
         * @event onAfterExpand
         * 面板内容展开之后事件
         * <p>this指向当前面板控件
         */
        "onAfterExpand": fastDev.noop,
        /**
         * @event onAfterResize
         * 面板大小被改变事件
         * <p>this指向当前面板控件
         */
        "onAfterResize": fastDev.noop,
        /**
         * @event onAfterMove
         * 面板位置被改变事件
         * <p>this指向当前面板控件
         */
        "onAfterMove": fastDev.noop,
        /**
         * @event onBeforeMaximize
         * 面板最大化前事件
         * <p>回调函数返回布尔值false可阻止面板最大化
         * <p>this指向当前面板控件
         */
        "onBeforeMaximize": fastDev.noop,
        /**
         * @event onAfterMaximize
         * 面板最大化后事件
         * <p>this指向当前面板控件
         */
        "onAfterMaximize": fastDev.noop,
        /**
         * @event onBeforeReset
         * 面板还原前事件
         * <p>this指向当前面板控件
         */
        "onBeforeReset": fastDev.noop,
        /**
         * @event onAfterReset
         * 面板还原后事件
         * <p>this指向当前面板控件
         */
        "onAfterReset": fastDev.noop,
        /**
         * @event onBeforeMinimize
         * 面板最小化（隐藏）前事件
         * <p>this指向当前面板控件
         */
        "onBeforeMinimize": fastDev.noop,
        /**
         * @event onAfterMinimize
         * 面板最小化（隐藏）后事件
         * <p>this指向当前面板控件
         */
        "onAfterMinimize": fastDev.noop,
        /**
         * @event onExpandBtnClick
         * 工具栏展开按钮点击事件 
         * <p>返回false可阻止控件相关方法继续执行
         * @param {Event} event 事件对象
         */
        "onExpandBtnClick" : fastDev.noop,
        /**
         * @event onCollapseBtnClick
         * 工具栏折叠按钮点击事件
         * <p>返回false可阻止控件相关方法继续执行
         * @param {Event} event 事件对象
         */
        "onCollapseBtnClick" : fastDev.noop,
        /**
         * @event onMinBtnClick
         * 工具栏最小化按钮点击事件
         * <p>返回false可阻止控件相关方法继续执行
         * @param {Event} event 事件对象
         */
        "onMinBtnClick" : fastDev.noop,
        /**
         * @event onMaxBtnClick
         * 工具栏最大化按钮点击事件
         * <p>返回false可阻止控件相关方法继续执行
         * @param {Event} event 事件对象
         */
        "onMaxBtnClick" : fastDev.noop,
        /**
         * @event onRestoreBtnClick
         * 工具栏还原按钮点击事件
         * <p>返回false可阻止控件相关方法继续执行
         * @param {Event} event 事件对象
         */
        "onRestoreBtnClick" : fastDev.noop,
        /**
         * @event onCloseBtnClick
         * 工具栏关闭按钮点击事件 
         <p>返回false可阻止控件相关方法继续执行
         * @param {Event} event 事件对象
         */
        "onCloseBtnClick" : fastDev.noop,
        /**
         * @event onAnimateStart
         * 动画开始前的回调函数
         * <p>返回false值则终止动画的执行
         * <p>this指向当前面板控件
         */
        "onAnimateStart": fastDev.noop,
        /**
         * @event onAnimateStop
         * 动画结束时的回调函数
         * <p>this指向当前面板控件
         */
        "onAnimateStop": fastDev.noop,
        /**
         * @private
         */
        "enableInitProxy": false,
        /**
         * @private
         */
        "enableDataProxy": false,
        /**
         * @private
         */
        "enableDataSet": false
    },
	"_global" : {
		//唯一标识
		"sequence" : "",
		//panel内部iframe对象
		"iframe" : fastDev(),
		//panel主体div对象
		"box" : null,
		//panel头部div对象
		"header" : null,
		//头部按钮工具栏对象
		"tool" : null,
		//头部标题对象
		"title" : null,
		//panel内容外层对象
		"body" : null,
		//内容对象
		"content" : null,
		//展开按钮对象
		"Expand" : null,
		//折叠按钮对象
		"Collapse" : null,
		//最小化按钮对象
		"Min" : null,
		//还原按钮对象
		"Restore" : null,
		//最大化按钮对象
		"Max" : null,
		//关闭按钮对象
		"Close" : null,
		//边框样式
		"borderCls" : "",
		//有边框时增加的高度
		"bodyBorderHeight" : 0,
		// 设定初始化完成标示s
        "initialized" : false,
        //加载内容时的ProgressBar对象
        "loading" : null,
        //标题栏图标样式
        "iconClsName" : "",
        //动画是否在执行
        "drawing" : false
        
	},
    "template" : [
		'<div id="panel-box-#{sequence}" class="ui-panel ui-panel-box #{cls}">',
			'<tpl if(#{showHeader})>',
				'<div id="panel-header-#{sequence}" class="ui-panel-header">',
					'<div class="ui-window-header-text #{iconCls} #{headerCls}">#{title}</div>',
					'<div id="panel-tool-#{sequence}" class="ui-window-tool">',
						'<span class="ui-window-tool-show" handler="expand" title="展开"></span>',
						'<span class="ui-window-tool-hidden" handler="collapse" title="折叠"></span>',
						'<span class="ui-window-tool-min" handler="minimize" title="最小化"></span>',
						'<span class="ui-window-tool-restore" handler="reset" title="还原"></span>',
						'<span class="ui-window-tool-max" handler="maximize" title="最大化"></span>',
						'<span class="ui-window-tool-close" handler="close" title="关闭"></span>',
					'</div>',
				'</div>',
			'</tpl>',
			'<div id="panel-body-#{sequence}" class="ui-panel-body #{borderCls}" style="overflow: hidden;">',
				'<div id="panel-content-#{sequence}" class="ui-panel-content #{bodyCls}" style="position: relative;#{bodyStyle}"></div>',
			'</div>',
		'</div>'
    ],
    /**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
    "tplParam": ["title", "showHeader","sequence", "cls", "iconCls", "headerCls", "borderCls", "bodyCls", "bodyStyle"],
	// 使用父类文档说明
    "ready": function (options, global) {
		//获得唯一ID
		global.sequence = fastDev.getID();
        // 根据 showBorder 参数设置来设定内容边框样式
		global.borderCls = options.showBorder ? options.showHeader ? "" : "ui-border-top" :"ui-noborder";
        
        // 根据 showBorder 和 showHeader 参数值计算内容部分 border-top 与 border-bottom 值
        // 如果参数设置为不显示内容部分的边框，则 border-top 与 border-bottom 都为 0
        // 如果参数设置为显示内容部分的边框但不显示面板头部，则 border-top 与 border-bottom 都为 1
        // 如果参数设置为显示内容部分的边框和显示面板头部，则border-top 为 0 (共享面板头部底边) border-bottom为 1 
		global.bodyBorderHeight = options.showBorder ? options.showHeader ? 1 : 2 : 0;
        
        // 如果配置了标题图标样式参数则追加标题图标定位样式
		if( fastDev.isString( options.iconCls ) ){
			options.iconCls += " ui-window-header-ico";
		}
        
        // 内嵌子页面地址有效性检测
        if (!fastDev.isString(options.src) || !(options.src = fastDev.Util.StringUtil.trim(options.src))) {
            options.src = "";
        }
        //默认速度设置
        switch (options.animateSpeed) {
		case "fast":
			options.animateSpeed = 200;
			break;
		case "slow":
			options.animateSpeed = 600;
			break;
		case "default":
			options.animateSpeed = 400;
			break;
		}
    },
	// 使用父类文档说明
    "construct": function (options, global) {
        // 缓存常用DomObject对象
		var sequence = global.sequence;
		global.box=fastDev(this.elems[0]);
		global.header = global.box.find("#panel-header-" + sequence);
		global.tool = global.header.find("#panel-tool-" + sequence);
		global.title = global.tool.prev();
		global.body = this.find("#panel-body-" + sequence);
		global.content = this.find("#panel-content-" + sequence);
		//工具栏按钮
		global.Expand = global.tool.first();
		global.Collapse = global.Expand.next();
		global.Min = global.Collapse.next();
		global.Restore = global.Min.next();
		global.Max = global.Restore.next();
		global.Close = global.Max.next();
		//缓存头部工具按钮，并根据当前设置初始化按钮的显示/隐藏状态
		fastDev.each(["Expand", "Collapse", "Min", "Restore", "Max", "Close"],function(index,elem){
			if(options.showHeader){
				global[elem][!options["show" + elem + "Btn"] ? "hide" : "show"]();
			}else {
				options["show" + elem + "Btn"] = false;
			}
		});
        
    },
	// 使用父类文档说明
    "init": function (options, global) {
        var that = this;
        // 绑定标题栏按钮事件
        // 事件绑定对象为工具栏，将工具栏作为各按钮的事件代理，节省开销
        // onmouseover 鼠标划入按钮范围按钮高亮
        // onmouseout 鼠标划出按钮范围取消高亮
        // onmouseup 鼠标点击按钮时触发用户配置事件
        // onmousedown 取消事件往父元素传播(可去除)
        // dblckick 取消事件往父元素传播(可去除)
        if (options.showHeader) {
            global.tool.bind("mouseover", fastDev.setFnInScope(that, that.toolBtnEventHandle))
				.bind("mouseout", fastDev.setFnInScope(that, that.toolBtnEventHandle))
				.bind("mouseup", fastDev.setFnInScope(that, that.toolBtnEventHandle))
				.bind("mousedown", fastDev.Event.stopBubble).bind("dblclick", fastDev.Event.stopBubble);
        }
        // 根据配置参数决定内容部分的显示形态
        // 如果用户配置了src属性，则在内容部门创建iframe来加载其他地址内容
        // 如果用户配置了htmlContent属性，则将此属性追加至内容部分展现
        // 如果用户配置了content属性，则覆盖当前内容部分显示
        if (!options.src) {
            // 追加HTML模式定义的面板内容
            if (options.htmlContent) {
                this.append(options.htmlContent);
            } else if (fastDev.isValid(options.content) && options.content !== "") {
                this.setContent(options.content);
            }
        } else if (!options.minimized && !options.collapsed) {
            // 加载iframe子页面
            this.load(options.src, true);
        }
        
        // 设定面板的宽高、位置、显示/隐藏值
        this.toOriginalPanel({
            "width": options.width,
            "height": options.height,
            "left": options.left || 0,
            "top": options.top || 0
        }, true);
        
        // 保存历史坐标与宽高
        fastDev.apply(global, {
            "offsetLeft": options.left || 0,
            "offsetTop": options.top || 0,
            "offsetWidth": options.width || 0,
            "offsetHeight": options.height || 0
        });
        
        // 对配置中的隐藏/最小化参数做处理
        if (!options.display || options.display === "none" || options.minimized) {
            this.minimize(true, options.minimized = false);
        } else {
            options.display = true;
        }
        
        // 对配置中的最大化/折叠参数值做处理
        fastDev.each(["maximize", "collapse"], function (index, handle) {
            if (options[handle + "d"]) {
                that[handle](true, options[handle + "d"] = false);
            }
        });
        
        // 设定初始化完成标示
        global.initialized = true;
    },
    /**
     * 标题栏按钮事件处理
     * @param {String} type 事件类型
     * @param {DomObject} target 事件目标
     * @param {Event} event 事件对象
     * @private
     */
    "toolBtnEventHandle": function (event) {
        var handle, global = this._global,type = event.type==="mouseup" ? "click":event.type,target = fastDev(event.target);
		// 变更标题工具栏按钮样式
        if (target.elems[0] !== global.tool.elems[0]) {
            if (type === "mouseover") {
                target.setClass(target.getClass().replace("-over", "") + "-over");
            } else if (type === "mouseout") {
                target.setClass(target.getClass().replace("-over", ""));
            } else if ((handle = target.attr("handler")) && (this._options["on" + target.attr("name") + "BtnClick"] || fastDev.noop).call(this, event) !== false) {
                this[handle](false, true);
            }
        }
        fastDev.Event.stopBubble(event);
        return false;
    },
    /**
     * 刷新标题栏的工具按钮
     * @return {fastDev.Ui.Panel}
     * @private
     */
    "refreshToolBtn": function () {
        var options = this._options,
            global = this._global;
        if (options.showHeader) {
			// 显示或隐藏相关按钮
            if (options.showMaxBtn) {
				// 当前窗体最大化时隐藏最大化功能按钮显示还原功能按钮
                global.Max.css("display", options.maximized ? "none" : "inline");
                global.Restore.css("display", options.maximized ? "inline" : "none");
            }
            if (options.showCollapseBtn) {
				// 当前内容部分展开时隐藏展开功能按钮显示折叠功能按钮
                global.Collapse.css("display", options.collapsed ? "none" : "inline");
                global.Expand.css("display", options.collapsed ? "inline" : "none");
            }
        }
        return this;
    },
    /**
     * 加载Iframe内容
     * @return {fastDev.Ui.Panel}
     * @protected
     */
    "loadIframe": function () {
        var options = this._options,
            global = this._global;
        if (options.src && !global.loading && !global.loaded && !options.collapsed) {
            this.load(options.src);
        } else {
			// 显示加载图标
            this.showLoading();
        }
        return this;
    },
    /**
     * 加载Iframe子页前的回调函数
     * <p>子类可实现此回调来作相应的加载前的准备
     * <p>返回false可中断Iframe的加载准备
     * @param {DomObject} iframe
     * @protected 
     */
    "readyForLoading": fastDev.noop,
    /**
     * 显示加载图标 
     * @return {fastDev.Ui.Panel}
     * @param {Boolean} show 为false时隐藏Loading，为null时销毁Loading
     * @protected
     */
    "showLoading": function (show) {
        var options = this._options,
            global = this._global;
        if (fastDev.isComponent(global.loading)) {
            if (!(options.minimized || options.collapsed || options.closed || global.loaded)) {
                global.loading[show === null ? "close" : show === false ? "hide" : "show"]();
            }
        }
        return this;
    },
    /**
     * 获取内容部分高度值
     * @param {Number} bodyHeight 当前body高度
     * @return {Number}
     * @protected
     */
    "getContentHeight": function (bodyHeight) {
        var content = this._global.content;
        return Math.max(bodyHeight - (content.outerHeight(true) - content.height()), 0);
    },
    /**
     * 获取面板主体部分的高度值
     * @param {Number} height 面板总高度
     * @return {Number}
     * @protected
     */
    "getBodyHeight": function (height) {
        var global = this._global;
        // 27px的标题栏
        return Math.max(parseInt(height, 10) - (this._options.showHeader ? global.header.outerHeight(true) || 27 : 0) - global.bodyBorderHeight, 0);
    },
    /**
     * 执行动画
     * @param {DomObject} target 目标
     * @param {Array} queue 动画队列配置
     * @param {Function} callback 动画结束时的回调
     * @param {String} type 动画操作类型
     * @return {fastDev.Ui.Panel}
     * @private
     */
    "exec": function (target, queue, callback, type) {
        var animation = fastDev.isArray(queue) ? queue : [queue || {}],
            stop = (animation[animation.length - 1] || {}).stop || {}, frame, frames=null;
            // 动画开始
        if (this.startAnimation(target, animation, type) === false) {
            this.stopAnimation(target, animation, type);
            return this;
        }
        target.css("display", "block");
        // 读取每一帧动画，并依次执行
        for (queue = animation.slice(0); frame = queue.shift();) {
            if (!frame || !frame.duration) {
                target.css((frame = frame || {}).stop || {});
                if (!queue.length) {
					// 变更相应状态的回调事件
                    callback.call(this);
                    // 结束动画
                    this.stopAnimation(target, animation, type);
                    // 动画结束后的动画配置回调事件
                    (frame.callback || fastDev.noop).call(this, stop);
                    // 一次操作结束后（调大小、移位置，改变几何属性等）的回调
                    this.finishAction(target, stop);
                    // 以下回调主要是调用用户配的回调函数
                    callback.call(this, true);
                } else {
                    (frame.callback || fastDev.noop).call(this, stop);
                }
            } else {
				// 执行动画
                this.draw(frames = (frames || target.css(frame.start).show()), type, animation, frame, (queue[0] || {}).start, stop, callback);
            }
        }
        return this;
    },
    /**
     * 执行动画队列中的一帧动画
     * @param {DomObject} target 动画目标
     * @param {String} type 动画类型
     * @param {Array[Object]} animation 动画队列
     * @param {Object} frame 动画队列中的当前帧
     * @param {Object} next 下一帧动画的起始样式
     * @param {Object} end 动画队列最终样式
     * @param {Function} callback 动画队列结束后的回调
     * @private
     */
    "draw": function (target, type, animation, frame, next, end, callback) {
        var that = this,
            options = this._options,
            global = this._global;
        global.drawing = true;
        target.animate(frame.stop, frame.duration, options.animateEasing || frame.easing, function () {
            if (!options.destroyed) {
                target.css(next || {});
                if (frame.stop === end) {
                    global.drawing = false;
                    callback.call(that);
                    that.stopAnimation(target, animation, type);
                    (frame.callback || fastDev.noop).call(that, end);
                    that.finishAction(target, end);
                    try {
                        callback.call(that, true);
                    } catch (e) {
                        fastDev.error("Panel", "draw", "运行时错误！（" + e + "）");
                    }
                }
            }
        });
    },
    /**
     * 动画开始前的回调函数
     * 返回false则中断动画
     * @param {DomObject} target 动画目标
     * @param {Array[Object]} animation 动画配置队列 
     * @param {String} type 动画类型 
     * @protected 
     */
    "startAnimation": function (target, animation, type) {
        var global = this._global,
            isBox;
        global.body.css("borderColor", isBox = target.elems[0] === global.box.elems[0] ? "white" : "");
        global.content.css({
            display: isBox ? "none" : "block",
            overflow: "hidden"
        });
        return (this._options.onAnimateStart || fastDev.noop).apply(this, arguments);
    },
    /**
     * 动画结束时的回调函数
     * @param {DomObject} target 动画目标
     * @param {Array[Object]} animation 动画配置队列 
     * @param {String} type 动画类型 
     * @protected
     */
    "stopAnimation": function (target, animation, type) {
        var options = this._options;
        if (!options.closed) {
            var global = this._global;
            global.body.removeCss("borderColor");
            global.content.css("overflow", "auto").show();
            global.box.removeCss("opacity");
        }
        (options.onAnimateStop || fastDev.noop).apply(this, arguments);
    },
    /**
     * 初始动画配置队列
     * @param {DomObject} target 动画目标对象
     * @param {Object|Array} animation
     * @param {Number} [cWidth] 容器宽度
     * @param {Number} [cHeight] 容器高度
     * @return {Array} 动画队列
     * @protected
     */
    "toAnimationQueue": function (target, animation, cWidth, cHeight) {
        var that = this,
            options = this._options,
            speed = options.animateSpeed,
            container = options.container,
            plain;
        cWidth = cWidth || container.width();
        cHeight = cHeight || container.height();
        fastDev.each(animation = fastDev.isArray(animation) ? animation : [animation], function (index, frame) {
            plain = !frame || frame.duration === 0;
            animation[index] = frame = fastDev.isPlainObject(frame) ? frame : {};
            fastDev.each(["start", "stop"], function (i, name) {
				// 对动画配置对象里面的回调函数调用，以获取动画配置参数
                frame[name] = fastDev.isFunction(frame[name]) ? frame[name].call(that, target, cWidth, cHeight) : frame[name];
                frame[name] = fastDev.isPlainObject(frame[name]) ? frame[name] : {};
            });
            frame.duration = plain ? 0 : Math.max(parseInt(frame.duration, 10) || 0, 0) || speed;
        });
        return animation;
    },
    /**
     * 初始动画设置
     * @param {String} type
     * @param {DomObject} target
     * @param {Object|Boolean} animation
     * @return {Object}
     * @protected
     */
    "initAnimation": function (type, target, animation) {
        var options = this._options,
            global = this._global;
        switch (type) {
        case "expand":
        // 展开事件
            animation = this.toAnimationQueue(target, animation)[0];
            animation.easing = animation.easing || "expo-easeIn";
            animation.start.height = 0;
            animation.stop.height = global.bodyHeight;
            return animation;
        case "collapse":
        // 折叠事件
            animation = this.toAnimationQueue(target, animation)[0];
            animation.easing = animation.easing || "quart-easeOut";
            animation.stop.height = 0;
            return animation;
        case "maximize":
        // 最大化
            this.toOriginalPanel({
                "left": 0,
                "top": 0,
                "width": options.container.width(),
                "height": options.container.height()
            });
            break;
        case "reset":
        // 重置上一次状态
            this.toOriginalPanel({
                "left": global.offsetLeft,
                "top": global.offsetTop,
                "width": global.offsetWidth,
                "height": global.offsetHeight
            });
        }
    },
    /**
     * 判断动画是否正在进行中
     * @return {Boolean} 
     */
    "isDrawing": function () {
        return this._global.drawing;
    },
    /**
     * 对面板的每一次操作结束时，必将执行的一次回调
     * <p>可供子类实现使用
     * @param {DomObject} target 动画目标
     * @param {Object} stop 结束时的状态
     * @protected 
     */
    "finishAction": function (target, stop) {
        this.loadIframe().refreshToolBtn();
    },
    /**
     * 还原面板至常态
     * @param {Object} rect
     * @param {Boolean} noShow
     * @return {fastDev.Ui.Panel}
     * @protected
     */
    "toOriginalPanel": function (rect, noShow) {
        var global = this._global;
        if (!noShow) {
            global.box.show();
            global.body.show();
            global.content.show();
        }
        return this.resize(rect).move(rect);
    },
    /**
     * 根据事件回调判断方法是否需要执行
     * @param {Boolean} only
     * @param {String} type
     * @return {Boolean}
     * @private
     */
    "execuable": function (only, type) {
        var options = this._options;
        if (options.closed || (!only && options["onBefore" + type].call(this) === false)) {
            return false;
        }
        // 隐藏加载图标
        this.showLoading(false);
        return true;
    },
    /**
     * 展开面板内容
     * @param {Boolean} [only=false] 为true时，不触发展开面板事件
     * @param {Boolean} [animation=false] 是否使用动画效果。同时需指定animateSpeed参数
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "expand": function (only, animation) {
        var options = this._options,
            global = this._global;
        if (!options.collapsed || !this.execuable(only, "Expand")) {
            return this;
        }
        global.box.removeCss("height");
        return this.exec(global.body, this.initAnimation("expand", global.body, animation), function () {
            options.collapsed = false;
            if (!only && arguments[0]) {
                options.onAfterExpand.call(this);
            }
        }, "expand");
    },
    /**
     * 折叠面板内容
     * @param {Boolean} [only=false] 为true时，不触发折叠面板事件
     * @param {Boolean} [animation=false] 是否使用动画效果。同时需指定animateSpeed参数
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "collapse": function (only, animation) {
        var options = this._options,
            global = this._global;
        if (options.collapsed || !this.execuable(only, "Collapse")) {
            return this;
        }
        // 内容body部分的高度需要实时计算
        global.expandedBodyHeight = global.bodyHeight || (global.bodyHeight = this.getBodyHeight(options.height));
        global.box.removeCss("height");
        return this.exec(global.body, this.initAnimation("collapse", global.body, animation), function () {
            options.collapsed = true;
            global.body.hide();
            if (!only && arguments[0]) {
                options.onAfterCollapse.call(this);
            }
        }, "collapse");
    },
    /**
     * 最大化面板
     * @param {Boolean} [only=false] 为true时，不触发面板最大化事件
     * @param {Boolean|Object} [animation=false] 是否使用动画效果。同时需指定animateSpeed参数
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "maximize": function (only, animation) {
        var options = this._options;
        if ((options.maximized && !options.collapsed && !options.minimized) || !this.execuable(only, "Maximize")) {
            return this;
        }
        var global = this._global,
            original = !(options.minimized || options.collapsed);
            // 保存当前几何状态
        fastDev.apply(global, {
            offsetLeft: !original ? global.offsetLeft : options.left,
            offsetTop: !original ? global.offsetTop : options.top,
            offsetWidth: !original ? global.offsetWidth : options.width,
            offsetHeight: !original ? global.offsetHeight : options.height
        });
        return this.exec(global.box, this.initAnimation("maximize", global.box, animation), function () {
            options.maximized = options.display = !(options.minimized = options.collapsed = false);
            global.body.show();
            if (!only && arguments[0]) {
                options.onAfterMaximize.call(this);
            }
        }, "maximize");
    },
    /**
     * 显示面板
     * @param {Boolean} [only=false] 为true时，不触发面板显示事件
     * @param {Boolean|Object} [animation=false] 是否使用动画效果。同时需指定animateSpeed参数
     * @return {fastDev.Ui.Panel}
     */
    "open": function (only, animation) {
        var options = this._options,
            global = this._global;
        if (!options.minimized || !this.execuable(only, "Open")) {
            return this;
        }
        return this.exec(global.box, this.initAnimation("open", global.box, animation), function () {
            options.display = !(options.minimized = false);
            global.box.css("display", "block");
            if (!only && arguments[0]) {
                options.onAfterOpen.call(this);
            }
        }, "open");
    },
    /**
     * 最小化面板
     * @param {Boolean} [only=false] 为true时，不触发面板最小化事件
     * @param {Boolean|Object} [animation=false] 是否使用动画效果。同时需指定animateSpeed参数
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "minimize": function (only, animation) {
        var options = this._options,
            global = this._global;
        if (options.minimized || !this.execuable(only, "Minimize")) {
            return this;
        }
        return this.exec(global.box, global.initialized ? this.initAnimation("minimize", global.box, animation) : {}, function () {
            options.display = !(options.minimized = true);
            global.box.hide();
            if (!only && arguments[0]) {
                options.onAfterMinimize.call(this);
            }
        }, "minimize");
    },
    /**
     * 将已最大化、已折叠或已隐藏的面板还原至一般状态
     * @param {Boolean} [only=false] 为true时，不触发面板还原事件
     * @param {Boolean|Object} [animation=false] 是否使用动画效果。同时需指定animateSpeed参数
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "reset": function (only, animation) {
        var options = this._options,
            global = this._global;
        if (!(options.collapsed || options.maximized || options.minimized) || !this.execuable(only, "Reset")) {
            return this;
        }
        return this.exec(global.box, this.initAnimation("reset", global.box, animation), function () {
            options.display = !(options.collapsed = options.minimized = options.maximized = false);
            global.body.show();
            if (!only && arguments[0]) {
                options.onAfterReset.call(this);
            }
        }, "reset");
    },
    /**
     * 关闭面板
     * @param {Boolean} [only=false] 为true时，不触发相关事件
     * @param {Boolean|Object} [animation=false] 是否使用动画效果。同时需指定animateSpeed参数
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "close": function (only, animation) {
        var options = this._options,
            global = this._global;
        if (!this.execuable(only, "Close")) {
            return this;
        }
        // persisted标记为实例重用，用以提升性能
        options.closed = !options.persisted;
        options.display = !(options.minimized = true);
        return this.exec(global.box, this.initAnimation("close", global.box, animation), function () {
            if (!arguments[0]) {
				// 销毁加载图标
                this.showLoading(null);
                global.box.hide();
            } else {
                if (!options.persisted) {
					// 清空iframe
                    options.onBeforeDestroy.call(this);
                    if (!global.iframe.isEmpty()) {
                        global.iframe.prop("src", "");
                    }
                    this.destroy();
                }
                if (!only) {
                    options.onAfterClose.call(this);
                }
                if (!options.persisted) {
					// 非单实例模式时，清理私有变量（可能对IE6下的内存释放有点帮助）
                    var prop = null;
                    for (prop in global) {
                        global[prop] = null;
                    }
                    for (prop in options) {
                        options[prop] = null;
                    }
                    options.destroyed = true;
                }
            }
        }, "close");
    },
    /**
     * 判断面板是否可见
     * @return {Boolean} true时可见，false时不可见
     */
    "isShow": function () {
        return this._options.display;
    },
    /**
     * 重新定义面板大小
     * @param {Object} size 尺寸参数对象
     * @param {String} size.width 宽度
     * @param {String} size.height 高度
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "resize": function (size) {
        var options = this._options,
            global = this._global,
            container = options.container,
            fx = fastDev.Util.StringUtil.stripUnits,
            tmp;
        if (fastDev.isPlainObject(size)) {
			// 记录宽高信息
            fastDev.each(["width", "height"], function (index, name) {
                if (!isNaN(tmp = fx(size[name], container, name))) {
                    options[name] = Math.round(tmp);
                }
            });
            global.box.width(options.width = options.width || 0);
            options.height = options.height || 0;
            if (!options.collapsed) {
                global.box.height(options.height);
            }
            // 设置宽高
            global.body.height(global.bodyHeight = this.getBodyHeight(options.height));
            global.content.height(this.getContentHeight(global.bodyHeight));
            options.onAfterResize.call(this.showLoading());
        }
        return this;
    },
    /**
     * 移动面板至指定坐标
     * @param {Object} position 坐标参数对象
     * @param {String} position.left X轴坐标值
     * @param {String} position.top Y轴坐标值
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "move": function (position) {
        var options = this._options,
            global = this._global,
            container = options.container,
            fx = fastDev.Util.StringUtil.stripUnits,
            tmp;
        if (fastDev.isPlainObject(position)) {
			// 记录坐标信息
            fastDev.each(["left", "top"], function (index, name) {
                if (!isNaN(tmp = fx(position[name], container, index === 0 ? "width" : "height"))) {
                    options[name] = Math.round(tmp);
                }
            });
            // 设置坐标信息
            global.box.css({
                "left": options.left = options.left || 0,
                "top": options.top = options.top || 0
            });
            options.onAfterMove.call(this.showLoading());
        }
        return this;
    },
    /**
     * 重设标题内容及标题栏图标
     * @param {String} title 标题内容，可带HTML标签文本
     * @param {String} [iconCls] 标题图标样式名，值为空字符串时将去除标题图标
     * @return {fastDev.Ui.Panel}
     */
    "setTitle": function (title, iconCls) {
        var global = this._global,
            elem;
        if (this._options.showHeader) {
			// 标题栏可以使用标签
            (elem = global.title).elems[0].innerHTML = title + "";
            if (typeof iconCls === "string") {
                elem.removeClass("ui-window-header-ico").removeClass(global.iconClsName);
                if (iconCls) {
                    elem.addClass("ui-window-header-ico").addClass(global.iconClsName = iconCls);
                }
            }
        }
        return this;
    },
    /**
     * 设置窗体内容（可包含HTML标签以及复合控件声明字符串）
     * <p>若使用了src配置属性声明了内部子页面，将默认禁止设置新的内容
     * <p>可先调用empty方法清空窗体内容后（内部子页面同样也会被清理掉）再设置新的内容
     * <p>该方法会清空之前的窗体内容
     * @param {String} content 内容文本
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "setContent": function (content) {
        var global = this._global;
        if (fastDev.isValid(content) && global.iframe.isEmpty()) {
            global.content.empty().removeClass("ui-window-nopadding").elems[0].innerHTML = content + "";
            // 编译
            fastDev.Core.ControlBus.compile(null, global.content.elems);
        }
        return this;
    },
    /**
     * 清空内容区域
     * @return {fastDev.Ui.Panel} 当前控件实例 
     */
    "empty": function () {
        var options = this._options,
            global = this._global;
        (global.iframeLoadHandle || fastDev.noop)();
        global.content.empty().removeClass("ui-window-nopadding");
        global.iframe = fastDev();
        options.src = "";
        return this;
    },
    /**
     * 追加窗体内容（可包含文本、标签、控件等）
     * <p>若使用了src配置属性声明了内部子页面，将默认禁止往内容区域追加内容
     * <p>可先调用empty方法清空窗体内容后（内部子页面同样也会被清理掉）再追加新的内容
     * <p>该方法不会清空之前的窗体内容
     * @param {String|Element|Component|DomObject} content 需追加的内容
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "append": function (content) {
        var global = this._global,
            elem;
        if (fastDev.isValid(content) && global.iframe.isEmpty()) {
            global.content.append(elem = (fastDev.isComponent(content) || fastDev.isDomObject(content)) ? content : fastDev(typeof content === "string" ? "<div>" + content + "</div>" : content));
            if (elem !== content) {
                fastDev.Core.ControlBus.compile(null, elem.elems);
            }
        }
        return this;
    },
    /**
     * 加载新的面板内部Iframe子页面
     * @param {String} src 子页面链接地址
     * @return {fastDev.Ui.Panel}
     */
    "load": function (src) {
        var options = this._options,
            global = this._global;
        if (fastDev.isString(src) && (src = fastDev.Util.StringUtil.trim(src)) && !options.closed) {
            var time = new Date().getTime();
            options.src = src;
            if (global.iframe.isEmpty()) {
				// 初始iframe
                global.iframe = fastDev("<iframe frameborder='0' width='100%' height='100%' style='position:relative;top:0'></iframe>")
                //
                .addClass("ui-window-iframe").appendTo(global.content.empty().addClass("ui-window-nopadding"));
                if (!arguments[1]) {
                    this.resize({
                        "width": options.width,
                        "height": options.height
                    });
                }
            }
            // 加载iframe前，进行相应的状态判断与准备
            if (this.readyForLoading(global.iframe) !== false) {
                (global.iframeLoadHandle || fastDev.noop)();
                global.loaded = false;
                // 设置src并加载子页面
                global.iframe.prop("src", src).bind("load", global.iframeLoadHandle = function () {
                    if (fastDev.isComponent(global.loading)) {
                        global.loading.close();
                    }
                    global.iframe.unbind("load", global.iframeLoadHandle);
                    global.loaded = !(global.loading = false);
                });
                // 实例化加载图标
                global.loading = options.showLoading ? fastDev.create("ProgressBar", {
                    "container": global.content,
                    "text": options.loadingMsg,
                    "zIndex": options.zIndex + 3,
                    "opacity": 0.025,
                    "onOverlayClick": function () {
                        if (new Date().getTime() - time > 5000) {
                            this.close();
                        }
                    }
                }) : true;
            }
        }
        return this;
    },
    /**
     * 显示面板
     * @return {fastDev.Ui.Panel}
     */
    "show": function () {
        return this._global.initialized ? this.open.apply(this, arguments) : this;
    },
    /**
     * 最小化（隐藏）面板
     * @return {fastDev.Ui.Panel}
     */
    "hide": function () {
        return this._global.initialized ? this.minimize.apply(this, arguments) : this;
    }
});
/**
 * @class fastDev.Ui.Window
 * @extends fastDev.Ui.Panel
 * @author luming
 * <p>弹出窗控件。</p>
 * <p>支持窗口折叠，最大最小化，拖拽定位，调节尺寸，跨级交互等。</p>
 * <p>作者：禄铭</p>
 *     
 *     fastDev.create("Window", {
 *          title : "标题",
 *          content : "弹窗内容"
 *     });
 */
fastDev.define("fastDev.Ui.Window", {
    "extend": "fastDev.Ui.Panel",
    "alias": "Window",
    "_options": {
        /**
         * @cfg {String|Number}
         * 浮动层级
         */
        "zIndex": "auto",
        /**
         * @cfg {Boolean}
         * 是否显示最大化按钮
         */
        "showMaxBtn": true,
        /**
         * @cfg {Boolean}
         * 是否显示关闭窗体按钮
         */
        "showCloseBtn": true,
        /**
         * @cfg {Boolean}
         * 是否显示折叠按钮
         */
        "showCollapseBtn": true,
        /**
         * @cfg {String} 
         * 内容图标名
         * <p>在内容区域显示
         * <p>可选值为ok,error,tip,warning,help
         */
        "icon": "",
        /**
         * @cfg {Boolean}
         * 是否可拖动
         */
        "allowDrag": true,
        /**
         * @cfg {Boolean}
         * 是否可拖拽调节尺寸
         */
        "allowResize": true,
        /**
         * @cfg {Boolean}
         * 是否显示阴影
         * <p>出于浏览器性能考虑，IE6下将默认禁用窗体阴影（用户可通过此属性再次开启）
         */
        "showShadow": fastDev.Browser.isIE6 ? false : true,
        /**
         * @cfg {String} 
         * 窗体宽度值
         */
        "width": "auto",
        /**
         * @cfg {String} 
         * 窗体高度值
         */
        "height": "auto",
        /**
         * @cfg {String|Element|DomObject|Component}
         * 动画执行的参照对象
         * <p>使用组件对象时，将取组件对象中的第一个元素作为目标元素
         * <p>控件将优先从原父页面寻找该目标元素，若找不到该目标元素则从当前页面找（在跨级展现的情况下）
         */
        "animateTarget": "",
        /**
         * @cfg {Boolean}
         * 是否限制在父容器中，即是否需要窗口跨级(跨iframe)显示。
         * 此属性指定为false时，窗口将跨级创建并展示（有权访问的顶层窗口需引入该控件js）。
         * 跨窗口显示即指弹窗从当前窗口（一般是一个iframe页面）跨级至有权访问的最顶层窗口（一般是框架集的最顶层框架）创建并展现。
         * 跨级弹窗的作用域（window）将不再是原窗口对象，而是原窗口对象的顶层父页面对象（top），此时若弹窗需与原父页面交互，则需通过指定的接口来存储和传递数据。
         * 可通过实例的setData(name, value)、getData(name)方法和fastDev.Ui.Window.setData(name, value)、fastDev.Ui.Window.getData(name)方法存取数据。
         * <frameset/>定义的框架集由于浏览器限制而不能够跨级访问，但iframe可以。
         * 由于浏览器安全限制，跨域访问将受到限制，若需跨域访问则需做其他特殊处理。
         * 此控件目前对跨域问题不作支持。
         */
        "inside": true,
        /**
         * @cfg {Boolean}
         * 窗口是否总是可见
         * 此属性为真时，则窗口仅能在当前可视区域内拖动
         */
        "visible": true,
        /**
         * @cfg {Boolean}
         * 是否为模态窗体（锁屏）
         */
        "modal": true,
        /**
         * @cfg {Number} 
         * 锁屏时遮罩层的透明度
         * 透明度设置区间为0-1,设置越小，背景越透明
         */
        "overlayOpacity": 0.08,
        /**
         * @cfg {Boolean}
         * 是否使用固定定位
         * 固定定位的窗口，相当于悬浮窗口，不随滚动条的滚动改变位置，始终固定在页面的某一位置
         * 兼容IE6
         */
        "fixed": false,
        /**
         * @cfg {Array}
         * 定义底部的buttons
         * 各个按钮的配置中align属性可指定按钮的摆放位置（left、right、center）
         * 按钮点击事件回调中，作用域为当前按钮控件，参数为：
         * <p>-event 点击事件对象</p>
         * <p>-win 当前弹窗实例</p>
         * <p>-window 内部子页的window对象（仅当存在且有权访问此变量时）</p>
         * <p>-fastDev 内部子页面的fastDev对象（仅当存在此变量时）</p>
         */
        "buttons": null,
        /**
         * @cfg {String|Number}
         * 最大宽度限制，可带单位px、em、%
         */
        "maxWidth": Infinity,
        /**
         * @cfg {String|Number}
         * 最小宽度限制，可带单位px、em、%
         */
        "minWidth": 199,
        /**
         * @cfg {String|Number}
         * 最大高度限制，可带单位px、em、%
         */
        "maxHeight": Infinity,
        /**
         * @cfg {String|Number}
         * 最小高度限制，可带单位px、em、%
         */
        "minHeight": 122,
        /**
         * @cfg {String}
         * 调节大小时的可调方向(s:窗口下方边框处进行上下的高度调节,e:窗口右方边框处进行左右的宽度调节,se:窗口右下角进行高度宽度的同时调节)
         * <p>s,e,se三种方式相互独立,se与s,e不存在包含的关系，仅代表不同的方式
         */
        "resizeDirection": "s,e,se",
        /**
         * @cfg {Number}
         * 调节大小时的宽高比例
         * <p>指定此比例后，窗口的宽高比将始终保持此值（包括初始窗口及最大化窗口时）
         */
        "resizeRatio": null,
        /**
         * @cfg {Boolean}
         * 调节窗口尺寸时是否显示窗口大小提示标签
         * <p>开发阶段，需对窗口固定大小时开启此属性可帮助开发人员确定窗口合适的尺寸大小
         */
        "showSizeTips": false
        
    },
    "_global" : {
		//窗口实例
        "instance" : null,
		//当前窗口对象
		"pageContext" : null,
		//窗口改变大小事件
		"windowResizeHandles" : {},
		//ie6.7marginleft修正值
		"btnPanelMarginLeft" : 0,
		//ie6.7marginright修正值
		"btnPanelMarginRight" : 0,
		//ie6.7margin修正值
		"btnPanelMargin" : 0,
		//按钮实例
		"buttonInstances" : null,
		//当前窗口的文档对象
		"doc" : null,
		//当前窗口的window对象
		"win" : null,
		//底部button外层div对象
		"buttons" : null,
		//底部按钮左侧容器对象
		"left" : null,
		//底部按钮中部容器对象
		"center" : null,
		//底部按钮右侧容器对象
		"right" : null,
		//阴影div对象
		"shadow" : null,
		//模态窗口遮罩层
		"mask" : null,
		// 遮罩层透明度样式值
		"maskOpacity" : null,
		//动画是否被处理完
		"initialized" : false,
		//是否正在改变大小
		"resizing" : false,
		//改变大小后的高度
		"offsetHeight" : null,
		//改变大小后的宽度
		"offsetWidth" : null,
		//改变大小时的阴影对象
		"resizer" : null,
		//是否有底部按钮
		"hasButton" : false,
		//计算当前的页面滚动条位置
		"docScrollLeft" : 0,
		"docScrollTop" : 0,
		// 依据固定定位进行坐标转换的坐标
        "offsetLeft" : 0,
        "offsetTop" : 0,
        //容器高度
        "containerWidth" : 0,
        //容器宽度
        "containerHeight" : 0,
        //窗口关闭timeout
        "windowCloseTimer" : null,
        //窗口改变大小timeout
        "windowResizeTimer" : null,
        //是否需要编译窗体内容
        "needCompile" : false
    },
    /**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
	"template" : [
		'<tpl if(#{inside})>',
			'<div id="panel-box-#{sequence}" class="ui-window ui-panel ui-panel-box #{cls}" style="display:none;z-index:#{zIndex}">',
				'<tpl if(#{showHeader})>',
					'<div id="panel-header-#{sequence}" class="ui-panel-header">',
						'<div class="ui-window-header-text #{iconCls} #{headerCls}" style="height:16px">#{title}</div>',
						'<div id="panel-tool-#{sequence}" class="ui-window-tool">',
							'<span class="ui-window-tool-show" handler="expand" title="展开"></span>',
							'<span class="ui-window-tool-hidden" handler="collapse" title="折叠"></span>',
							'<span class="ui-window-tool-min" handler="minimize" title="最小化"></span>',
							'<span class="ui-window-tool-restore" handler="reset" title="还原"></span>',
							'<span class="ui-window-tool-max" handler="maximize" title="最大化"></span>',
							'<span class="ui-window-tool-close" handler="close" title="关闭"></span>',
						'</div>',
					'</div>',
				'</tpl>',
				'<div id="panel-body-#{sequence}" class="ui-panel-body #{borderCls}">',
					'<div id="panel-content-#{sequence}" class="ui-panel-content #{bodyCls}" style="position: relative;#{bodyStyle}"></div>',
					'<tpl if(!!#{buttons})>',
						'<div id="panel-buttons-#{sequence}" class="ui-window-button-panel">',
							'<span class="ui-left" style="display:none;margin-left:#{btnPanelMarginLeft}"></span>',
							'<span class="ui-center" style="display:none;overflow:hidden"></span>',
							'<span class="ui-right" style="display:none;margin-right:#{btnPanelMarginRight}"></span>',
						'</div>',
					'</tpl>',
				'</div>',
			'</div>',
			'<tpl if(!!#{showShadow})>',
				'<div id="panel-shadow-#{sequence}" class="ui-window-shadow-bg" style="display:none">',
					'<div class="shadow-st">',
						'<div class="shadow-stl"></div>',
						'<div class="shadow-stc"></div>',
						'<div class="shadow-str"></div>',
					'</div>',
					'<div class="shadow-sc" id="panel-shadow-sc-#{sequence}">',
						'<div class="shadow-sml"></div>',
						'<div class="shadow-smc"></div>',
						'<div class="shadow-smr"></div>',
					'</div>',
					'<div class="shadow-sb">',
						'<div class="shadow-sbl"></div>',
						'<div class="shadow-sbc"></div>',
						'<div class="shadow-sbr"></div>',
					'</div>',
				'</div>',
			'</tpl>',
			'<tpl if(!!#{modal})>',
				'<div id="panel-mask-#{sequence}" class="ui-mask" style="display:none"></div>',
			'</tpl>',
		'</tpl>'
	],
	/**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
    "tplParam": ["inside", "zIndex", "showHeader", "sequence","cls", "iconCls", "headerCls", "title", "borderCls", "bodyCls", "bodyStyle", "buttons", "showShadow", "modal", "btnPanelMarginLeft", "btnPanelMarginRight"],
	// 使用父类文档说明
    "ready": function (options, global) {
        var target = options.container,
            counter;
        if (!(options.inside = !! options.inside) && !this.equals(fastDev.Ui.Window.top, window) && (!target.hasElem() || fastDev.isWindow(target.elems[0]))) {
            // 窗口跨级
            global.instance = this.cross(options, global);
            if (options.saveInstance && options.id) {
				// 将当前实例保存起来
                fastDev.Core.ControlBus.saveInstance(options.id, global.instance);
            }
            return false;
        } else {
			//创建弹窗
            global.pageContext = global.pageContext || window;
            if (!fastDev.isValid(document) || !fastDev.isValid(document.body)) {
                options.alias = this.alias;
                options.instance = this;
                // 若页面body未初始，则在页面加载完毕后渲染弹窗
                fastDev(function () {
                    var win = fastDev.create(options.alias, options),
                        instance = options.instance;
                    instance._options = win._options;
                    instance._global = win._global;
                    instance.elems = win.elems;
                });
                return false;
            }
            global.instance = this;
            // 当前页面弹窗计数器，用于协助计算索引值
            counter = ++fastDev.Util.PositionUtil.top.fastDev.Ui.Window.count;
            global.container = (target.hasElem() && !fastDev.isWindow(target.elems[0])) ? target : null;
            options.left = parseInt(options.left, 10) ? options.left + "" : 0;
            options.top = parseInt(options.top, 10) ? options.top + "" : 0;
            //ie6.7marginleft修正值
            global.btnPanelMarginLeft = (fastDev.Browser.isIE6 || fastDev.Browser.isIE7) ? "10px" : "5px";
			//ie6.7marginright修正值
            global.btnPanelMarginRight = (fastDev.Browser.isIE6 || fastDev.Browser.isIE7) ? "0px" : "6px";
			//ie6.7margin修正值
            global.btnPanelMargin = (fastDev.Browser.isIE6 || fastDev.Browser.isIE7) ? "5px" : "10px";
			//按钮实例
            global.buttonInstances = [];
            global.doc = fastDev(document);
            global.win = fastDev(window);
            fastDev.apply(options, {
                "inside": true,
                "left": global.container ? options.left : options.left || "50%",
                "top": global.container ? options.top : options.top || "38.2%",
                "buttons": [].concat(options.buttons),
                "showShadow": !! options.showShadow && !global.container,
                "animateTarget": this.toDomObject(options.animateTarget),
                "showMaxBtn": options.allowResize && options.showMaxBtn,
                "container": global.container || fastDev(document.body),
                "zIndex": (parseInt(options.zIndex, 10) || (100 + counter * 3)) + 2,
                "resizeRatio": parseFloat(options.resizeRatio) || 0,
                "modal": !! options.modal && !global.container,
                "content": (fastDev.Browser.isIE6 && options.content === "") ? "　" : options.content
            });
        }
    },
	// 使用父类文档说明
    "construct": function (options, global) {
        if (options.inside) {
            global.buttons = this.find("#panel-buttons-"+global.sequence);
            global.shadow = this.find("#panel-shadow-"+global.sequence);
            global.mask = this.find("#panel-mask-"+global.sequence);
            global.left = global.buttons.first();
            global.center = global.left.next();
            global.right = global.center.next();
            options.container = global.container || global.win;
            if (global.container) {
				// 嵌入页面中显示时，设置为相对定位，以便可移动位置
                global.box.css("position", "relative");
            } else if (options.fixed) {
				// 固定定位应用
                this.fixed(global.box);
            } else {
				// 设置绝对定位样式，针对当前body定位
                global.box.css("position", "absolute");
                global.shadow.css("position", "absolute");
            }
            // 遮罩层透明度样式值
            global.maskOpacity = parseFloat(options.overlayOpacity) || 0.021;
            // 初始底部按钮栏按钮
            this.addButtons(options.buttons).setButtons(false);
            if (options.modal) {
                this.elems.splice(this.elems.length - 1, 1);
            }
            global.constructed = true;
        }
    },
	// 使用父类文档说明
    "init": function (options, global) {
        if (options.inside) {
            global.initialized = false;
            if (options.display) {
				// 显示窗体
                this.open(!(options.minimized = true));
                options.height = global.offsetHeight;
            } else {
				// 不显示时，隐藏阴影
                this.setShadow(false);
                global.initialized = true;
            }
            if (options.showMaxBtn) {
				// 标题栏双击最大化窗体事件绑定
                global.header.bind("dblclick", function () {
                    this[options.maximized ? "reset" : "maximize"]();
                }, this);
            }
        }
    },
    /**
     * 获取内容部分高度值
     * @param {Number} bodyHeight 当前body高度
     * @return {Number}
     * @protected
     */
    "getContentHeight": function (bodyHeight) {
        var global = this._global,
            content = global.content;
        // 底部按钮栏有37px的高度
        return Math.max(bodyHeight - (content.outerHeight(true) - content.height()) - (global.hasButton ? Math.max(global.buttons.outerHeight(true), 37) : 0), 0);
    },
    /**
     * 获取内容区域以外部分的宽高值
     * @return {Number} width、height
     * @protected 
     */
    "getContentBounding": function () {
        var options = this._options,
            global = this._global;
        return {
            "width": Math.abs(global.content.outerWidth(true) - global.content.width() + (options.showBorder ? 2 : 0)),
            // 增加10px的冗余高度，使得内容显示更美观
            "height": Math.abs(10 + (options.showBorder ? 1 : 0) + (global.content.outerHeight(true) - global.content.height()) + (global.hasButton ? Math.max(global.buttons.outerHeight(true), 37) : 0) + (options.showHeader ? Math.max(global.header.outerHeight(true), 27) : 1))
        };
    },
    /**
     * 将目标对象转换为DomObject对象
     * @param {Object} target 目标对象
     * @param {fastDev} fast 命名空间
     * @return {DomObject}
     * @private
     */
    "toDomObject": function (target, fast) {
        var options = this._options,
            element;
        if (options.crossed === "crossed" && !fast) {
			// 从原父页面找对应元素对象
            return this.toDomObject(target, options.parent.fastDev);
        } else {
			// 从当前页面找元素对象
            fast = (fast || fastDev);
            if ((element = ((fast.isComponent(target) || fast.isDomObject(target)) ? fast(target.elems) : fast((fast.isString(target) && target) ? "#" + target : target) || fast())).isEmpty() && fast !== fastDev) {
                return this.toDomObject(target, fastDev);
            }
            return element;
        }
    },
    /**
     * 初始动画设置
     * @param {String} type
     * @param {DomObject} target
     * @param {Object|Boolean|Array} queue
     * @return {Object}
     * @protected
     */
    "initAnimation": function (type, target, animation) {
        var that = this,
            options = this._options,
            global = this._global,
            container = options.container,
            box = global.box,
            queue, index = null;
            // 计算当前的页面滚动条位置
        global.docScrollLeft = !isNaN(global.docScrollLeft) ? global.docScrollLeft : global.doc.scrollLeft();
        global.docScrollTop = !isNaN(global.docScrollTop) ? global.docScrollTop : global.doc.scrollTop();
        // 清理计时器，并隐藏阴影等
        this.clearTimer().setShadow(false).setButtons();
        // 初始动画队列，取最后一帧动画用于定义默认动画设置
        for (index in (queue = this.toAnimationQueue(target, animation === false ? false : animation || true, global.containerWidth = global.containerWidth || container.width(), global.containerHeight = global.containerHeight || container.height()))) {
            queue[index].start = this.limit(queue[index].start);
            queue[index].stop = this.limit(queue[index].stop);
        }
        animation = queue[queue.length - 1];
        switch (type) {
        case "expand":
        case "collapse":
        // 展开与折叠事件
            this.setResizer(false).setButtons(false);
            // 获取动画参数并对相应的用户回调进行代理等
            animation.callback = this.getAnimationParam(animation.callback, function () {
				// 动画结束后的收尾处理
                options.height = box.height();
                this.setResizer(type === "expand").setButtons(type === "expand");
            });
            return fastDev.Ui.Panel.initAnimation.call(this, type, target, queue);
        case "maximize":
            if (!fastDev.Browser.isIE6 || global.container) {
                // 保存转换为fixed定位后的元素坐标值
                var offset = options.fixed ? {
                    "left": box.elems[0].offsetLeft,
                    "top": box.elems[0].offsetTop
                } : global.container ? {
                    "left": parseInt(box.css("left"), 10) || 0,
                    "top": parseInt(box.css("top"), 10) || 0
                } : box.offset();
                // 依据是否固定定位进行坐标转换
                global.offsetLeft = offset.left - ((options.fixed || global.container) ? 0 : global.docScrollLeft);
                global.offsetTop = offset.top - ((options.fixed || global.container) ? 0 : global.docScrollTop);
            }
            // 隐藏Resizer
            this.setResizer(false);
            // 动画配置参数初始
            animation.easing = animation.easing || "expo-easeIn";
            animation.start.opacity = animation.start.opacity || (options.minimized ? 0.1 : 0.8);
            // 若指定了用户配置动画，则不加载默认的动画配置设置
            animation.stop = this.getAnimationParam(animation.stop, this.limit({
                "left": "50%", // 水平居中
                "top": "38.2%", // 垂直黄金比例定位
                "width": global.containerWidth,
                "height": global.containerHeight,
                "opacity": 1
            }));
            animation.callback = this.getAnimationParam(animation.callback, function (stop) {
				// 动画结束后，重新定义固定定位，以及自适应窗体大小（跟随窗口大小变化，自动最大化填充窗口）
                this.fixed(box).fill(box, function (size) {
                    that.resize(size);
                });
            });
            break;
        case "reset":
            animation.easing = animation.easing || "expo-easeIn";
            if (options.minimized) {
				// 获取目标元素的坐标信息等
                this.getBoundingRect(animation.start, animation.target);
            }
            animation.start.opacity = animation.start.opacity || (options.minimized ? 0.1 : 0.8);
            // 应用默认的动画配置参数（若已存在用户配置动画参数，则不会加载默认的动画配置参数）
            animation.stop = this.getAnimationParam(animation.stop, {
                "top": global.offsetTop,
                "left": global.offsetLeft,
                "width": global.offsetWidth,
                "height": global.offsetHeight,
                "opacity": 1
            });
            // 动画结束后的回调事件设置
            animation.callback = this.getAnimationParam(animation.callback, function (stop) {
                this.fixed(box, false).fill(box, false).setResizer().lock();
            });
            break;
        case "minimize":
            this.fill(box, false).lock(false);
            animation.easing = animation.easing || "quad-easeOut";
            if (fastDev.isEmptyObject(this.getBoundingRect(animation.stop, animation.target, 0.1))) {
                fastDev.apply(animation.stop, {
                    "top": 0,
                    "left": 0,
                    "width": 80,
                    "height": 30,
                    "opacity": 0.1
                });
            }
            break;
        case "open":
            this.lock().setButtons(false);
            animation.easing = animation.easing || "expo-easeIn";
            var max = (options.maximized && !options.collapsed),
            // 几何属性限制值处理
                rect = this.limit({
                    "left": max ? "50%" : options.left,
                    "top": max ? "38.2%" : options.top,
                    "width": options.maximized ? global.containerWidth : options.width,
                    "height": max ? global.containerHeight : options.height
                });
            rect.height = options.collapsed ? options.height : rect.height;
            if (!options.collapsed && fastDev.isEmptyObject(this.getBoundingRect(animation.start, animation.target, 0.1))) {
                fastDev.apply(animation.start, {
                    "left": rect.left + (rect.width < 8 ? rect.width / 2 : 4),
                    "top": rect.top + (rect.height < 8 ? rect.height / 2 : 4),
                    "height": Math.max(rect.height - 8, 0),
                    "width": Math.max(rect.width - 8, 0),
                    "opacity": 0.1
                });
            }
            fastDev.apply(animation.stop, this.getAnimationParam(animation.stop, {
                "top": rect.top,
                "left": rect.left,
                "width": rect.width,
                "height": rect.height,
                "opacity": 1
            }));
            animation.callback = this.getAnimationParam(animation.callback, function (stop) {
                global.initialized = true;
                if (options.maximized) {
                    this.fixed(box).fill(box, function (size) {
                        that.resize(size);
                    });
                }
                this.setResizer().setDragger().setButtons(!options.collapsed);
            });
            break;
        case "close":
        // 清理计时器
            window.clearInterval(global.windowCloseTimer);
            window.clearTimeout(global.windowResizeTimer);
            window.clearTimeout(global.windowCloseTimer);
            this.lock(options.persisted ? false : null);
            animation.easing = animation.easing || "liner-easeOut";
            if (fastDev.isEmptyObject(this.getBoundingRect(animation.stop, animation.target))) {
                var width = options.width,
                    height = parseInt(box.css("height"), 10);
                fastDev.apply(animation.stop, {
                    "left": parseInt(box.css("left"), 10) + (width < 8 ? width / 2 : 4),
                    "top": parseInt(box.css("top"), 10) + (height < 8 ? height / 2 : 4),
                    "height": Math.max(height - 8, 0),
                    "width": Math.max(width - 8, 0)
                });
            }
            animation.stop.opacity = animation.stop.opacity || 0;
            animation.callback = this.getAnimationParam(animation.callback, function (stop) {
				// 解除自动填充
                this.fill(box, false);
                if (!options.persisted) {
					// 清理resizer、dragger、按钮等
                    this.setResizer(null).setDragger(null).setButtons(null);
                    // 清理全局状态变量
                    delete(this.getData("@fastDev" + global.sequence) || fastDev).Ui.Window.windows[global.sequence];
                    this.setData("@fastDev" + global.sequence, null);
                    fastDev.Util.PositionUtil.top.fastDev.Ui.Window.count--;
                }
            });
        }
        // 清理无效的动画样式参数值
        for (var i = 0, j, k=null, limit, name = ["start", "stop"]; i < queue.length; i++) {
            for (j = 0; j < 2; j++) {
                for (k in (limit = queue[i][name[j]])) {
                    if (isNaN(limit[k])) {
                        delete limit[k];
                    }
                }
            }
        }
        return queue;
    },
    /**
     * 动画结束时的回调函数
     * @param {DomObject} target 动画目标
     * @param {Array[Object]} animation 动画配置对象 
     * @param {String} type 动画类型 
     * @protected
     */
    "stopAnimation": function (target, animation, type) {
        var options = this._options,
            box = this._global.box,
            frame = animation[animation.length - 1].stop || {};
            // 结束动画后，重新计算尺寸并设置其值
        if (!options.collapsed && !options.closed && options.display && target.elems[0] === box.elems[0]) {
            fastDev.Ui.Panel.resize.call(this, {
                "width": frame.width || box.width(),
                "height": frame.height || box.height()
            });
        }
        // 应用父类的方法
        return fastDev.Ui.Panel.stopAnimation.apply(this, arguments);
    },
    /**
     * 获取动画配置参数
     * @param {Object} param 参数配置值
     * @param {Object} defaults 默认配置值
     * @return {Object}
     * @private
     */
    "getAnimationParam": function (param, defaults) {
        if (fastDev.isFunction(param)) {
            var that = this;
            return function () {
                if (param.apply(that, arguments) !== false) {
                    (defaults || fastDev.noop).apply(that, arguments);
                }
            };
        }
        // 若不包含用户自定义的配置参数时，才会使用默认的配置参数
        return (!param || fastDev.isEmptyObject(param)) ? defaults : param;
    },
    /**
     * 每一次动画操作结束时，必将执行的一次回调
     * @param {DomObject} target 动画目标
     * @param {Object} stop 结束时的状态
     * @protected 
     */
    "finishAction": function (target, stop) {
        var global = this._global;
        if (global.initialized) {
            if (this.isShow()) {
				// 固定定位重计算
                if (this._options.fixed) {
                    this.fixed(global.box);
                }
                fastDev.Ui.Panel.finishAction.apply(this, arguments);
                this.setShadow();
                if (global.needCompile) {
					// 编译窗体内容
                    fastDev.Core.ControlBus.compile(null, global.content.elems);
                    global.needCompile = false;
                }
            }
            global.containerWidth = global.containerHeight = global.docScrollLeft = global.docScrollTop = undefined;
        }
        return this;
    },
    /**
     * 获取元素的边界信息
     * @param {Object} rect
     * @param {DomObject} [target]
     * @param {Number} [opacity]
     * @return {Object} left、top、width、height
     * @private
     */
    "getBoundingRect": function (rect, target, opacity) {
        if (fastDev.isEmptyObject(rect) && (target = this.toDomObject(target || this._options.animateTarget)).hasElem()) {
            var global = this._global,
                offset = this.getOffset(target),
                doc = global.doc,
                fixed = global.box.css("position") === "fixed";
                // 当前坐标及宽高信息计算
            fastDev.apply(rect, {
                "left": offset.left - (fixed ? !isNaN(global.docScrollLeft) ? global.docScrollLeft : doc.scrollLeft() : 0),
                "top": offset.top - (fixed ? !isNaN(global.docScrollTop) ? global.docScrollTop : doc.scrollTop() : 0),
                "width": target.innerWidth(),
                "height": target.innerHeight()
            });
            if (opacity !== undefined) {
                rect.opacity = opacity;
            }
        }
        return rect;
    },
    /**
     * 判断2个窗口对象是否属同一个对象
     * <p>解决IE某些浏览器中不能通过运算符直接判断的问题
     * @param {Window} a
     * @param {Window} b
     * @private 
     */
    "equals": function (a, b) {
        var equal = false;
        try {
            equal = a.fastDev.Ui.Window.id === b.fastDev.Ui.Window.id;
        } catch (e) {} 
        return equal;
    },
    /**
     * 获取目标元素的坐标值
     * @param {DomObject} [target] 不传target参数，则获取原父页面的偏移量
     * @return {Object} left、top
     * @private
     */
    "getOffset": function (target) {
        var options = this._options;
        if (options.crossed === "crossed") {
            var that = this,
                parent = options.parent,
                id = parent.fastDev.Ui.Window.id,
                iframes = this.getData("@iframes" + id) || fastDev.Util.PositionUtil.getIframePath(function () {
                    return that.equals(this, parent);
                });
            this.setData("@iframes" + id, iframes);
            return fastDev.Util.PositionUtil.getBoundingRect(target, iframes);
        } else {
            return (target && !fastDev.isWindow(target)) ? target.offset() : {
                "left": 0,
                "top": 0
            };
        }
    },
    /**
     * 清理计时器
     * @return {fastDev.Ui.Window}
     * @private
     */
    "clearTimer": function () {
        if (!this._options.destroyed) {
            var global = this._global;
            // 清理可能用到的计时器
            window.clearInterval(global.shadowFlickTimer);
            window.clearInterval(global.windowShakeTimer);
            global.box.removeCss("marginLeft").removeCss("opacity");
            global.shadow.removeCss("marginLeft");
        }
        return this;
    },
    /**
     * 设置阴影
     * @param {Boolean} [show] 是否显示阴影
     * @return {fastDev.Ui.Window}
     * @private
     */
    "setShadow": function (show) {
        var options = this._options;
        if (options.showShadow) {
            var global = this._global;
            if (show === false || !global.initialized || options.minimized || options.closed || this.isDrawing()) {
				// 隐藏阴影
                global.shadow.css("display", "none");
            } else {
				// 重计算阴影
                var box = global.box,
                    height = box.height(),
                    width = box.width(),
                    shadow = global.shadow,
                    fixed = global.box.css("position") === "fixed",
                    offset = {
                        "left": fixed ? box.elems[0].offsetLeft : parseInt(box.css("left"), 10) || 0,
                        "top": fixed ? box.elems[0].offsetTop : parseInt(box.css("top"), 10) || 0
                    },
                    body = global.htmlBody || (global.htmlBody = fastDev(document.body)),
                    win = global.win,
                    docLeft = !isNaN(global.docScrollLeft) ? global.docScrollLeft : global.doc.scrollLeft(),
                    docTop = !isNaN(global.docScrollTop) ? global.docScrollTop : global.doc.scrollTop();
                    //  边界处理，以免阴影撑出页面滚动条
                width = offset.left + width >= Math.max(body.width(), docLeft + (global.containerWidth || win.width())) ? width - 5 : width;
                height = offset.top + height >= Math.max(body.height(), docTop + (global.containerHeight || win.height())) ? height - 4 : height;
                // 设置阴影样式
                shadow.css({
                    "position": fixed ? "fixed" : "absolute",
                    "zIndex": options.zIndex - 1,
                    "left": offset.left - 5,
                    "top": offset.top - 4,
                    "height": height + 8,
                    "width": width + 10,
                    "display": "block"
                }).find("#panel-shadow-sc-"+global.sequence).css("height", height - 4);
                shadow.children("div").find("div[class$='c']").css("width", width - 2);
                // 对阴影进行固定定位处理（如果需要的话）
                this.fixed(shadow, !! global.boxFixed, docLeft, docTop);
            }
        }
        return this;
    },
    /**
     * 锁屏
     * @param {Boolean} enable 为布尔值false时解除锁屏，为null时销毁遮罩
     * @return {fastDev.Ui.Window}
     * @private
     */
    "lock": function (enable) {
        var that = this,
            options = this._options,
            global = this._global;
        if (options.modal && (!global.locked || enable === false || enable === null) && fastDev.isWindow(options.container.elems[0])) {
            var docLeft = !isNaN(global.docScrollLeft) ? global.docScrollLeft : global.doc.scrollLeft(),
                docTop = !isNaN(global.docScrollTop) ? global.docScrollTop : global.doc.scrollTop(),
                mask = global.mask;
                // 设置锁屏层样式
            global.mask.css(global.locked ? {} : {
                "position": fastDev.Browser.isIE6 ? "absolute" : "fixed",
                "opacity": 0,
                "height": (global.containerHeight || global.win.height()) + docTop,
                "width": (global.containerWidth || global.win.width()) + docLeft,
                "zIndex": options.zIndex - 2,
                "display": "block",
                "left": 0,
                "top": 0
            }).animate({
				// 显影与消影动画处理（通过透明度）
                "opacity": (enable !== false && enable !== null) ? global.maskOpacity : 0
            }, fastDev.Ui.Panel.launchAnimation ? Math.min(1.5 * options.animateSpeed, 1000) : 0, "expo-easeIn", function () {
                mask[enable === null ? "remove" : enable === false ? "hide" : "show"]();
                if (enable !== false && enable !== null && !global.maskClickHandle && options.showShadow) {
                    global.mask.bind("click", global.maskClickHandle = function () {
                        if (options.destroyed || that.isDrawing()) {
                            return;
                        }
                        var times = 10;
                        // 点击锁屏时，对阴影进行闪烁处理，以提醒用户当前操作状态
                        that.clearTimer();
                        global.box.css("opacity", 0.85);
                        global.shadowFlickTimer = window.setInterval(function () {
                            if (times % 2 === 0) {
                                global.shadow.hide();
                            } else {
                                global.shadow.show();
                            }
                            if (--times === 0 || options.minimized) {
                                window.clearInterval(global.shadowFlickTimer);
                                global.box.removeCss("opacity");
                                global.shadow[options.minimized ? "hide" : "show"]();
                            }
                        }, 80);
                    });
                }
            });
            global.locked = enable !== false;
            // 对锁屏进行固定定位以及自适应窗口大小处理（如果需要的话）
            this.fixed(global.mask, enable === null ? false : enable, docLeft, docTop).fill(global.mask, enable === null ? false : enable);
        }
        return this;
    },
    /**
     * 摇晃效果
     * @param {Number} frequency 摇晃的频率
     * @return {fastDev.Ui.Window}
     */
    "shake": function (frequency) {
        var options = this._options;
        if (!options.minimized) {
            this.clearTimer();
            // 窗体抖动效果设置
            var global = this._global,
                box = global.box,
                shadow = global.shadow,
                margin, p = [4, 8, 4, 0, -4, -8, -4, 0],
                fx = function () {
                    box.css("marginLeft", margin = p.shift());
                    shadow.css("marginLeft", margin);
                    shadow[p.length % 4 === 0 ? "hide" : "show"]();
                    if (!p.length) {
                        window.clearInterval(global.windowShakeTimer);
                        box.removeCss("marginLeft");
                        if ( !! shadow) {
                            shadow.removeCss("marginLeft").show();
                        }
                    }
                };
            p = p.concat(p.concat(p));
            global.windowShakeTimer = window.setInterval(fx, Math.abs(parseInt(frequency, 10)) || 20);
        }
    },
    /**
     * 设置超时关闭
     * @param {Number} time 超时关闭等待时长，单位为秒（默认为3秒）
     * @param {Object|Boolean} animation 动画配置
     * @return {fastDev.Ui.Window}
     */
    "closeTimeout": function (time, animation) {
        var that = this,
            global = this._global;
            // 超时自动关闭计时器设定
        clearTimeout(global.windowCloseTimer);
        global.windowCloseTimer = setTimeout(function () {
            that.close(false, animation);
        }, Math.abs(parseFloat(time) || 3) * 1000);
        return this;
    },
    /**
     * 绑定浏览器窗口事件，自适应窗口大小
     * @param {DomObject} elem 与绑定事件相关的元素
     * @param {Boolean|Function} handle 为布尔值false时，解绑与元素对应的事件。为函数时在事件发生时回调该函数
     * @return {fastDev.Ui.Window}
     * @private
     */
    "fill": function (elem, handle) {
        if (fastDev.isWindow(this._options.container.elems[0]) && fastDev.isDomObject(elem)) {
            var global = this._global,
                id;
            elem.attr("winResizeEventId", (id = elem.attr("winResizeEventId") || fastDev.getID()));
            global.win.unbind("resize", (global.windowResizeHandles[id] || "").bind || fastDev.noop);
            if (handle === false) {
                delete global.windowResizeHandles[id];
                return this;
            }
            global.windowResizeHandles[id] = {
                "target": elem,
                "handle": handle,
                "bind": function () {
                    clearTimeout(global.windowResizeTimer);
                    global.windowResizeTimer = setTimeout(function () {
						// 若需要自适应多个对象，则在同一个resize事件里面监听，以减少资源占用
                        var handles = global.windowResizeHandles,
                            handle, target=null, id = null;
                        for (id in handles) {
							// 迭代多个处理程序，并进行相应的回调处理
                            (fastDev.isFunction(handle = handles[id].handle) ? handle : (target = handles[id].target).css).call(target, {
                                width: global.win.width(),
                                height: global.win.height()
                            });
                        }
                    }, 120);
                }
            };
            // 绑定窗口的resize事件
            global.win.bind("resize", global.windowResizeHandles[id].bind);
        }
        return this;
    },
    /**
     * 将指定的元素模拟为固定定位（IE6下）
     * @param {DomObject} elem
     * @param {Boolean} enable 为布尔值false时取消固定定位
     * @param {Number} docLeft
     * @param {Number} docTop
     * @return {fastDev.Ui.Window}
     * @private
     */
    "fixed": function (elem, enable, docLeft, docTop) {
        var options = this._options;
        if (elem.hasElem() && fastDev.isWindow(options.container.elems[0])) {
            var global = this._global,
                isBox = elem.elems[0] === global.box.elems[0],
                position;
            if (isNaN(docLeft)) {
                docLeft = global.docScrollLeft = global.doc.scrollLeft();
                docTop = global.docScrollTop = global.doc.scrollTop();
            }
            if (fastDev.Browser.isIE6) {
				// IE6下面的通过样式表达式来模拟固定定位
                var html = fastDev(document.documentElement),
                    offset = elem.css("position", "absolute").show().offset(),
                    style;
                position = "backgroundAttachment";
                if (html.css(position) !== "fixed" && fastDev(document.body).css(position) !== "fixed") {
                    var backgroundImage = html.css("backgroundImage");
                    // 应用背景层，解决IE6下面模拟固定定位时，元素抖动的问题
                    html.css({
                        "backgroundImage": (backgroundImage && backgroundImage !== "none") ? backgroundImage : "url(about:blank)",
                        "backgroundAttachment": "fixed",
                        "zoom": 1
                    });
                }
                style = elem.elems[0].style;
                html = "(document.documentElement)";
                style.removeExpression("left");
                style.removeExpression("top");
                if (options.fixed || enable !== false) {
					// 设置样式表达式
                    style.setExpression("left", 'eval(' + html + '.scrollLeft + ' + (offset.left - docLeft) + ') + "px"');
                    style.setExpression("top", 'eval(' + html + '.scrollTop + ' + (offset.top - docTop) + ') + "px"');
                }
            } else if (isBox) {
				// 如果是当前窗体对象，则根据相应的定位类型，进行坐标值转换
                var prev = elem.css("position"),
                    next = (options.fixed || enable !== false) ? "fixed" : "absolute";
                position = {
                    "left": prev === "fixed" ? elem.elems[0].offsetLeft : parseInt(elem.css("left"), 10) || 0,
                    "top": prev === "fixed" ? elem.elems[0].offsetTop : parseInt(elem.css("top"), 10) || 0
                };
                position.left += (prev === "absolute" && next === "fixed") ? -docLeft : (prev === "fixed" && next === "absolute") ? docLeft : 0;
                position.top += (prev === "absolute" && next === "fixed") ? -docTop : (prev === "fixed" && next === "absolute") ? docTop : 0;
                // 这种坐标值样式与定义样式
                elem.css({
                    "position": next,
                    "left": position.left,
                    "top": position.top
                });
            }
            if (isBox) {
                global.boxFixed = options.fixed || enable !== false;
            }
        }
        return this;
    },
    /**
     * 还原面板至常态
     * @param {Object} rect
     * @param {Boolean} noShow
     * @return {fastDev.Ui.Window}
     * @protected
     */
    "toOriginalPanel": function (rect, noShow) {
        var global = this._global;
        if (!noShow) {
			// 显示所有区域
            global.box.show();
            global.body.show();
            global.content.show();
        }
        if (!global.resized) {
            this.resize(rect);
        } else {
            this.limit(rect);
        }
        global.resized = false;
        return fastDev.Ui.Panel.move.call(this, rect);
    },
    /**
     * 计算宽高限制处理后的size以及offset信息
     * @param {Object} rect left、top、width、height
     * @return {Object} left、top、width、height（无值则为NaN）
     * @private
     */
    "limit": function (rect) {
        if (!fastDev.isEmptyObject(rect = fastDev.isPlainObject(rect) ? rect : {})) {
            var options = this._options,
                global = this._global,
                container = options.container,
                cWidth = global.containerWidth || container.width(),
                cHeight = global.containerHeight || container.height(),
                fx = fastDev.Util.StringUtil.stripUnits,
                inWindow = fastDev.isWindow(container.elems[0]),
                fixed = global.box.css("position") === "fixed",
                ie6Fixed = fastDev.Browser.isIE6 && options.fixed,
                regx = /^\d+(?:\.\d+|)%$/,
                leftPercent = regx.test(rect.left),
                topPercent = regx.test(rect.top),
                docLeft = !isNaN(global.docScrollLeft) ? global.docScrollLeft : global.doc.scrollLeft(),
                docTop = !isNaN(global.docScrollTop) ? global.docScrollTop : global.doc.scrollTop(),
                sWidth = fx(rect.width, cWidth),
                sHeight = fx(rect.height, cHeight),
                pMinWidth, pMinHeight, pMaxWidth, pMaxHeight, val, b = {
                    "minWidth": (val = fx(rect.minWidth || options.minWidth, cWidth)) ? val : 2,
                    "maxWidth": (val = fx(rect.maxWidth || options.maxWidth, cWidth)) ? val : Infinity,
                    "minHeight": (val = fx(rect.minHeight || options.minHeight, cHeight)) ? val : 2,
                    "maxHeight": (val = fx(rect.maxHeight || options.maxHeight, cHeight)) ? val : Infinity
                }, left, top, width, height, ratio;
            if (ratio = options.resizeRatio || rect.ratio) {
				// 宽高等比限制
                pMinWidth = b.minHeight * ratio;
                pMinHeight = b.minWidth / ratio;
                pMaxWidth = b.maxHeight * ratio;
                pMaxHeight = b.maxWidth / ratio;
                if (pMinWidth > b.minWidth) b.minWidth = pMinWidth;
                if (pMinHeight > b.minHeight) b.minHeight = pMinHeight;
                if (pMaxWidth < b.maxWidth) b.maxWidth = pMaxWidth;
                if (pMaxHeight < b.maxHeight) b.maxHeight = pMaxHeight;
            }
            // 计算有效宽高，坐标等样式值
            rect.width = isNaN(sWidth) ? NaN : Math.floor(Math.max(b.minWidth, Math.min(b.maxWidth, sWidth)));
            rect.height = isNaN(sHeight) ? NaN : ratio ? Math.min(Math.floor(rect.width / ratio), sHeight) : Math.floor(Math.max(b.minHeight, Math.min(b.maxHeight, sHeight)));
            rect.width = (!isNaN(sWidth) && !isNaN(rect.height) && ratio) ? Math.floor(rect.height * ratio) : rect.width;
            rect.width = width = rect.width || Math.max(options.width || global.box.width(), b.minWidth);
            rect.height = height = rect.height || Math.max(options.height || global.box.height(), b.minHeight);
            // 坐标限制计算
            fastDev.apply(b, this.coordinateLimit(width, height, rect.visible, {
                "dLeft": docLeft,
                "dTop": docTop,
                "cWidth": cWidth,
                "cHeight": cHeight
            }));
            left = fx(rect.left, inWindow ? cWidth - width : cWidth) + ((leftPercent && inWindow) ? ie6Fixed ? docLeft : fixed ? 0 : docLeft : 0);
            top = fx(rect.top, inWindow ? cHeight - height : cHeight) + ((topPercent && inWindow) ? ie6Fixed ? docTop : fixed ? 0 : docTop : 0);
            rect.left = isNaN(left) ? NaN : Math.floor(Math.max(b.minX, Math.min(b.maxX, left)));
            rect.top = isNaN(top) ? NaN : Math.floor(Math.max(b.minY, Math.min(b.maxY, top)));
            fastDev.apply(rect, {
                "left": rect.left,
                "top": rect.top,
                "width": rect.width,
                "height": rect.height
            });
        }
        return rect;
    },
    /**
     * 计算坐标范围
     * @param {Number} width 元素宽
     * @param {Number} height 元素高
     * @param {Boolean} visible 是否在可视区域内定位
     * @param {Object} rect cWidth、cHeight、dLeft、dTop
     * @return {Object} minX、minY、maxX、maxY
     * @private
     */
    "coordinateLimit": function (width, height, visible, rect) {
        var options = this._options,
            global = this._global,
            container = options.container,
            positionCss = global.box.css("position"),
            fixed = positionCss === "fixed",
            maxX = Infinity,
            pMaxX = Infinity,
            minX = -Infinity,
            pMinX = -Infinity,
            maxY = Infinity,
            pMaxY = Infinity,
            minY = -Infinity,
            pMinY = -Infinity,
            docLeft, docTop;
        visible = visible === undefined ? options.visible : visible;
        if (options.inside && !fastDev.isWindow(container.elems[0])) {
            var parent = global.box.parent(),
                pWidth = parent.width(),
                pHeight = parent.height();
            if (positionCss === "relative") {
                var fx = fastDev.Util.StringUtil.stripUnits,
                    position = global.box.show().offset(),
                    grandparent = parent.parent(),
                    gWidth = grandparent.width(),
                    gHeight = grandparent.height(),
                    pOffset = parent.offset(),
                    offset = {
                        "left": fx(global.box.css("left"), pWidth) || 0,
                        "top": fx(global.box.css("top"), pHeight) || 0
                    };
                pMinX = -(position.left - pOffset.left - offset.left - (parseInt(parent.css("borderLeftWidth"), 10) || 0) + (fx(parent.css("paddingLeft"), gWidth) || 0) + (fx(parent.css("marginLeft"), gWidth) || 0));
                pMinY = -(position.top - pOffset.top - offset.top - (parseInt(parent.css("borderTopWidth"), 10) || 0) + (fx(parent.css("paddingTop"), gHeight) || 0) + (fx(parent.css("marginTop"), gHeight) || 0));
            } else {
                pMinX = pMinY = 0;
            }
            pMaxY = pMinY + pWidth - height;
            pMaxX = pMinX + pHeight - width;
        }
        if (visible && fastDev.isWindow(container.elems[0])) {
            minX = docLeft = fixed ? 0 : rect.dLeft;
            minY = docTop = fixed ? 0 : rect.dTop;
            maxX = rect.cWidth - width + docLeft;
            maxY = rect.cHeight - height + docTop;
        }
        return {
            "minX": Math.max(pMinX, minX),
            "minY": Math.max(pMinY, minY),
            "maxX": Math.min(pMaxX, maxX),
            "maxY": Math.min(pMaxY, maxY)
        };
    },
    /**
     * 设置拖拽调节大小
     * @param {Boolean} enable 是否启用Resizer
     * @return {fastDev.Ui.Window} 当前控件实例
     * @private
     */
    "setResizer": function (enable) {
        var options = this._options,
            global = this._global;
        if (options.allowResize && global.initialized) {
            var that = this;
            global.resizer = global.resizer || global.pageContext.fastDev.create("Resizable", {
                "container": options.container,
                "element": global.box,
                "maxHeight": options.maxHeight,
                "maxWidth": options.maxWidth,
                "minHeight": options.minHeight,
                "minWidth": options.minWidth,
                "ratio": options.resizeRatio,
                "handles": options.resizeDirection,
                "showTips": options.showSizeTips,
                "zIndex": options.zIndex + 3,
                "onstart": function () {
                    if (that.isDrawing()) {
                        return false;
                    }
                    global.resizing = true;
                    that.clearTimer().setShadow(false);
                },
                "onresize": function () {
                    if (!options.display) {
                        return false;
                    }
                },
                "onstop": function (event, width, height, offset) {
                    that.resize({
                        "width": width,
                        "height": height
                    });
                    if (options.allowDrag) {
                        that.move(offset);
                    }
                    global.offsetWidth = width;
                    global.offsetHeight = height;
                    global.resizing = false;
                    return false;
                },
                "oncreate": function () {
                    global.box.css("overflow", "hidden");
                }
            });
            global.resizer[enable === null ? "destroy" : (enable !== false && !options.maximized && !options.collapsed) ? "enable" : "disable"]();
        }
        return this;
    },
    /**
     * 设置拖拽
     * @param {Boolean} enable 是否启用拖拽
     * @return {fastDev.Ui.Window} 当前控件实例
     * @private
     */
    "setDragger": function (enable) {
        var options = this._options,
            global = this._global;
        if (options.allowDrag && global.initialized) {
            var that = this;
            global.dragger = global.dragger || global.pageContext.fastDev.create("Draggable", global.dragSettings = {
                "ghost": false,
                "element": global.box,
                "handle": global.header,
                "zIndex": options.zIndex + 3,
                "visible": options.visible,
                "inside": global.container && options.inside,
                "onstart": function () {
                    if (that.isDrawing() || global.resizing) {
                        return false;
                    }
                    global.readyForDragging = true;
                },
                "ondrag": function (event, offsetX, offsetY) {
                    if (!options.display || global.resizing) {
                        return false;
                    }
                    if (options.maximized && (offsetX !== 0 || offsetY !== 0)) {
                        var clientX = event.clientX;
                            // 拖动还原坐标计算
                        options.left = parseInt(global.box.css("left"), 10) || 0;
                        options.top = parseInt(global.box.css("top"), 10) || 0;
                        global.offsetLeft = Math.max(Math.floor(clientX - (clientX - options.top) * global.offsetWidth / options.width), 0);
                        global.offsetLeft = clientX - global.offsetWidth + Math.min(global.offsetWidth - 40, Math.max(global.offsetWidth - (clientX - global.offsetLeft), 90));
                        global.offsetTop = Math.max(options.top + offsetY, 0);
                        that.reset(false, false);
                        global.dragger.resetBoundingRect(global.box);
                    }
                    if (global.readyForDragging) {
                        global.readyForDragging = false;
                        that.clearTimer().showLoading(false).setButtons(false).setResizer(false);
                        global.box.css("opacity", 0.6);
                        if (!global.contentHidden) {
                            global.content.css("visibility", "hidden");
                        }
                        if (global.onDragStart) {
                            global.onDragStart.apply(that, arguments);
                        }
                    }
                    that.setShadow(false);
                },
                "onstop": function (event, left, top) {
                    if (!options.maximized) {
                        if (!global.contentHidden) {
                            global.content.removeCss("visibility");
                        }
                        that.move({
                            "left": left,
                            "top": top
                        }).setButtons().setResizer();
                        global.box.removeCss("opacity");
                        if (global.onDragStop) {
                            global.onDragStop.apply(that, arguments);
                        }
                        // 移动至最顶端时，最大化窗体
                        if ((event.clientY <= 0) && options.showMaxBtn && !options.collapsed && fastDev.isWindow(options.container.elems[0])) {
                            left = global.offsetLeft;
                            top = global.offsetTop;
                            that.maximize();
                        }
                        global.offsetLeft = left;
                        global.offsetTop = top;
                    }
                    return false;
                },
                "oncreate": function () {
                    global.title.css("cursor", "default");
                }
            });
            if (enable === null) {
                global.dragger.destroy();
            }
        }
        return this;
    },
    /**
     * 构建窗体底部按钮
     * @param {Boolean} [show] 是否显示按钮栏
     * @return {fastDev.Ui.Window} 前控件实例
     * @private
     */
    "setButtons": function (show) {
        var global = this._global;
        if (this._options.closed) {
            global.buttons.remove();
        } else if (!global.hasButton || show === false) {
            global.buttons.css("display", "none");
        } else {
            global.buttons.removeCss("display");
        }
        return this;
    },
    /**
     * 移动窗体至指定坐标
     * @param {Object} position 坐标参数对象
     * @param {String} position.left X轴坐标值
     * @param {String} position.top Y轴坐标值
     * @param {Boolean} [animation=false] 是否启用动画效果
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "move": function (position, animation) {
        var options = this._options;
        if (fastDev.isPlainObject(position) && options.inside) {
            var that = this,
                global = this._global;
            this.limit(position);
            if (animation === true && !options.minimized && options.animateSpeed) {
                this.clearTimer().setShadow(false);
                global.box.animate(position = {
                    "left": position.left || global.box.css("left"),
                    "top": position.top || global.box.css("top")
                }, options.animateSpeed, "liner", function () {
                    fastDev.Ui.Panel.move.call(that, position).finishAction();
                });
            } else {
                fastDev.Ui.Panel.move.call(this, position).finishAction();
            }
        }
        return this;
    },
    /**
     * 重新定义窗体大小
     * @param {Object} size 尺寸参数对象
     * @param {String} size.width 宽度，未指定则窗体宽度保持原来值不变，使用auto则适应内容宽度（非内部子页面模式时） 
     * @param {String} size.height 高度，未指定则窗体高度保持原来值不变，使用auto则适应内容高度（非内部子页面模式时）
     * @param {Boolean} [animation=false] 是否启用动画效果
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "resize": function (size, animation) {
        var options = this._options;
        if (fastDev.isPlainObject(size) && options.inside) {
            var global = this._global,
                box = global.box,
                container = options.container,
                fx = fastDev.Util.StringUtil.stripUnits,
                width, height = 0;
            if (options.src) {
				// 含内部子页面时，默认宽高根据当前窗口比例调整
                size.width = (!size.width || size.width === "auto") ? "71.3402%" : size.width;
                size.height = (!size.height || size.height === "auto") ? "89.8061%" : size.height;
                size.ratio = (size.width === "71.3402%" || size.height === "89.8061%" ? 1.618 : 0);
            } else if (size.width === "auto" || size.height === "auto") {
                var sWidth = size.width === "auto" ? "auto" : fx(size.width, global.containerWidth || container, "width") || options.width,
                    sHeight = size.height === "auto" ? "auto" : fx(size.height, global.containerHeight || container, "height") || options.height,
                    bounding = this.getContentBounding(box.css({
                        "display": "block",
                        "width": "auto"
                    })),
                    // 自动宽高时，根据内容宽高计算
                    elem = global.content.css({
                        "width": width = (!sWidth || sWidth === "auto") ? "auto" : Math.max(sWidth - bounding.width, 1),
                        "height": height = (!sHeight || sHeight === "auto") ? "auto" : Math.max(sHeight - bounding.height, 1)
                    }),
                    contentWidth = width === "auto" ? elem.width() : width,
                    contentHeight = height === "auto" ? elem.height() : height;
                box.css("width", options.width);
                elem.removeCss("width");
                size.width = contentWidth + bounding.width;
                size.height = contentHeight + bounding.height;
            }
            // 限制计算
            this.limit(size);
            if (animation === true && !options.minimized && !options.collapsed && options.animateSpeed && !(size.width === (width = global.box.width()) && size.height === (height = global.box.height()))) {
                var that = this;
                this.clearTimer().setShadow(false);
                global.content.hide();
                box.animate(size = {
                    "width": size.width || width,
                    "height": size.height || height
                }, options.animateSpeed, "liner", function () {
                    fastDev.Ui.Panel.resize.call(that, size).finishAction().showContent();
                });
                global.body.animate({
                    "height": this.getBodyHeight(size.height)
                }, options.animateSpeed, "liner");
            } else {
                fastDev.Ui.Panel.resize.call(this, size).finishAction();
            }
        }
        return this;
    },
    /**
     * 新增底部按钮控件
     * <p>按钮配置对象中，属性align可指定按钮的摆放位置，可选值为：left、center、right，默认为right。
     * @param {Object|Array} buttons 按钮控件配置对象，可使用数组传递多个按钮配置对象
     * @return {fastDev.Ui.Window} 当前弹窗控件实例
     */
    "addButtons": function (buttons) {
        var global = this._global,
            button, i = 0;
        buttons = fastDev.isArray(buttons) ? buttons : [buttons];
        while (button = buttons[i++]) {
            if (!fastDev.isPlainObject(button)) {
                continue;
            }
            button.onclick = this.getBtnCallback(button.onclick, button.name);
            switch (button.align) {
            case "left":
                button.container = global.left.removeCss("display");
                break;
            case "center":
                button.container = global.center.removeCss("display");
                break;
            default:
                button.container = global.right.removeCss("display");
            }
            global.buttonInstances.push(fastDev.create("Button", button));
            global.hasButton = true;
        }
        return this;
    },
    /**
     * @param {Function} callback 按钮点击回调
     * @param {String} [name] 按钮名
     * @return {Function}
     * @protected 
     */
    "getBtnCallback": function (callback, name) {
        var that = this;
        return function (event) {
            var iframe = that._global.iframe,
                win = null;
            try {
                if (iframe.hasElem()) {
                    win = iframe.elems[0].contentWindow;
                }
            } catch (e) {
                win = undefined;
            } finally {
                (callback || fastDev.noop).call(this, event, that, win, win ? win.fastDev : undefined);
            }
        };
    },
    /**
     * 获取底部按钮栏Dom对象
     * <p>可调用Window控件的addButtons方法动态添加按钮
     * @param {String} [position] 按钮栏的子区域，可为以下值：
     * <p>-left 左边区域 </p> 
     * <p>-center 中部区域 </p> 
     * <p>-right 右部区域</p>
     * <p>未指定position时将获取整个底部按钮栏的DOM对象
     * @return {fastDev.Core.DomObject} 底部按钮栏的fastDev.Core.DomObject对象
     */
    "getFooter": function (position) {
        var global = this._global,
            footer = /^(left|center|right)$/i.test(position) ? global[RegExp.$1].show() : global.buttons;
        return footer;
    },
    /**
     * 显示底部按钮栏
     * @return {fastDev.Ui.Window} 当前弹窗控件实例
     */
    "showFooter": function () {
        var global = this._global;
        if (global.hasButton = !! global.buttonInstances.length) {
            global.buttons.show();
            this.resize({
                "height": global.box.height()
            });
        }
        return this;
    },
    /**
     * 隐藏底部按钮栏 
     * @return {fastDev.Ui.Window} 当前弹窗控件实例
     */
    "hideFooter": function () {
        var global = this._global;
        global.hasButton = false;
        global.buttons.hide();
        if (global.buttonInstances.length) {
            this.resize({
                "height": global.box.height()
            });
        }
        return this;
    },
    /**
     * 显示窗体内容
     * @return {fastDev.Ui.Window} 当前弹窗控件实例
     */
    "showContent": function () {
        var global = this._global;
        global.content.css({
            "display": "block",
            "overflow": "auto",
            "visibility": "visible"
        });
        global.body.removeCss("display");
        global.contentHidden = false;
        return this;
    },
    /**
     * 隐藏窗体内容
     * @return {fastDev.Ui.Window} 
     */
    "hideContent": function () {
        var global = this._global;
        global.content.css("visibility", "hidden");
        global.contentHidden = true;
        return this;
    },
    /**
     * 获取通过src属性指定的内部子页面的窗口对象（Window）
     * <p>若内部子页面为跨域页面，可能会出现Window无权限访问的异常，此时，返回值为undefined
     * @return {Window} 子页面窗口对象或者undefined(无访问权限或者无内部子页面时) 
     */
    "getContentWindow": function () {
        var iframe = this._global.iframe;
        if (!iframe.isEmpty()) {
            try {
                return iframe.elems[0].contentWindow;
            } catch (e) {}
        }
        return undefined;
    },
    /**
     * 追加窗体内容（可包含文本、标签、控件等）
     * <p>若内容文本包含了fastui控件声明标签时，请通过当前弹窗控件实例的getInstance方法获取被创建控件的实例（需声明了ID和saveInstance=true才能拿到实例）。详情请参见getInstance方法说明。
     * <p>若使用了src配置属性声明了内部子页面，将默认禁止往内容区域追加内容
     * <p>可先调用empty方法清空窗体内容后（内部子页面同样也会被清理掉）再追加新的内容
     * <p>该方法不会清空之前的窗体内容
     * @param {String|Element|Component|DomObject|Array} content 需追加的内容，可以使用数组一次性追加多个元素
     * @return {fastDev.Ui.Panel} 当前控件实例
     */
    "append": function (content) {
        var global = this._global;
        if (global.iframe.isEmpty()) {
            var elements = [].concat(content),
                html = fastDev(),
                doc = document,
                body = doc.body;
            while (fastDev.isValid(content = elements.shift())) {
                if (!fastDev.isString(content)) {
                    content = this.toDomObject(content);
                    // fastDev.Core.ControlBus.compile(null, content.elems);
                } else {
                    (html = fastDev(doc.createElement("div")).appendTo(body).hide()).elems[0].innerHTML = content;
                    // fastDev.Core.ControlBus.compile(null, html.elems);
                    content = html.children();
                }
                global.needCompile = true;
                try {
                    global.content.append(content);
                } catch (e) {
                    fastDev.error("Window", "append", "当前弹窗已<span style='color:red'>从子页面跨往父页面</span>创建并展现。<br/><span style='color:red'>IE6浏览器</span>不支持从子页面往父页面追加在<span style='color:red'>子页面上创建的DOM对象</span>。<br/>若追加的内容为控件对象，可使用标签声明方式来创建控件实例，或者使用形如以下的方式创建控件实例：<br/><hr/>fastDev.Ui.Window.top.fastDev.create(\"Button\",{text:\"按钮\"});");
                    break;
                }
                html.remove();
            }
        }
        return this;
    },
    /**
     * 获取控件实例
     * <p>当弹窗跨级时，若弹窗的内容文本包含形如:<div itype="DataGrid" id="datagrid" saveInstance="true" />的控件声明时，该控件仍会被创建出来。
     * <p>此时在声明创建弹窗的页面上，若通过fastDev.getInstance("datagrid")来取得DataGrid控件实例，则会行不通。这是因为跨级弹窗将在其真实展现页面内创建，其window作用域已经不是原来的那个弹窗声明页面了。
     * <p>跨级时，可通过弹窗实例的getInstance方法获取已跨级的控件实例。弹窗会根据当前是否跨级判定实例保存的命名空间，因此，弹窗未跨级时，通过该方法也是能正确获取到指定ID的控件实例的（前提是确实保存了该ID的控件实例）。
     * @param {String} id 控件ID值
     * @return {fastDev.Ui.Component} fastui 控件 
     */
    "getInstance": function (id) {
        var options = this._options;
        return (options.crossed === "crossed" || !fastDev.isWindow(options.parent)) ? fastDev.Ui.Window.top.fastDev.getInstance(id) : options.parent.fastDev.getInstance(id);
    },
    /**
     * 设置窗体内容（可包含HTML标签以及复合控件声明字符串）
     * <p>若内容文本包含了fastui控件声明标签时，请通过当前弹窗控件实例的getInstance方法获取被创建控件的实例（需声明了ID和saveInstance=true才能拿到实例）。详情请参见getInstance方法说明。
     * <p>若使用了src配置参数声明了内部子页面，将默认禁止设置新的内容
     * <p>可先调用empty方法清空窗体内容后（内部子页面同样也会被清理掉）再设置新的内容
     * <p>该方法会清空之前的窗体内容
     * <p>追内容请使用append方法
     * <p>setContent与append方法的主要区别在于，append方法直接追加内容（如Element对象、控件对象、字符串等，使用src声明了子页面时则追加无效）至内容区域，追加完成后若需要重新调整窗体大小，可调用resize方法来调整窗体大小。</p>
     * <p>setContent方法若接受字符串参数（包含字符串形式的标签声明，复合控件声明），则会根据配置属性icon添加内容消息图标，以及默认添加字体行高样式等。</p>
     * <p>设置新的内容后，窗体默认将根据新的内容自适应调整窗体尺寸，也可以通过参数指定是否自动调节尺寸以及如何调节尺寸。</p>
     * @param {String|Element|Array[Element]} content 需设置的窗体内容
     * @param {Object|Boolean} [resize] 指定更新内容后窗体的新尺寸，为布尔值false时则不自动调整窗体尺寸，未传值或传值为非对象字面量时则根据内容自适应调整大小，为对象字面量值时则根据指定的宽高来调整大小
     * @param {Number} [resize.width] 窗体宽度，未指定则窗体保持原宽度不变，可以使用auto、数值、百分比等，百分比计算基数为当前可视区域大小，下同
     * @param {Number} [resize.height] 窗体高度，未指定则保持原值不变
     * @param {Boolean} [animation=false] 调整窗体尺寸时是否使用动画效果 
     * @return {fastDev.Ui.Window} 
     */
    "setContent": function (content, resize, animation) {
        var options = this._options,
            global = this._global,
            doc = document,
            body = doc.body;
        if (!fastDev.isValid(content) && !global.iframe.isEmpty()) {
            return this;
        }
        resize = global.initialized ? resize === false ? false : fastDev.isPlainObject(resize) ? resize : {
            "width": "auto",
            "height": "auto"
        } : false;
        resize = {
            "width": resize === false ? options.width : resize.width === undefined ? global.box.width() : resize.width,
            "height": resize === false ? options.height : resize.height === undefined ? global.box.height() : resize.height
        };
        this.empty();
        global.resized = true;
        if (typeof content === "string") {
            var fx = fastDev.Util.StringUtil.stripUnits,
                container = options.container,
                width = fx(resize.width, container, "width"),
                height = fx(resize.height, container, "height"),
                text, rect = {
                    "width": width || "auto",
                    "height": height || "auto"
                }, tag = "content-main-" + global.sequence,
                bounding = this.getContentBounding(),
                cWidth = global.containerWidth = container.width(),
                cHeight = global.containerHeight = container.height(),
                html;
            text = '<div id="' + tag + '" class="' + ((options.icon && fastDev.isString(options.icon)) ? "ui-window-content-icon ui-window-content-" + options.icon : "") + ' ui-window-content-text">';
            content += "</div>";
            if (resize.width === "auto" && resize.height === "auto") {
                var element, elementWidth, elementHeight;
                // 应用表格特性，来自适应宽高
                html = ["<span style='display:none'><table width='" + (Math.max(width ? width - bounding.width : 0, 0) || Math.max((Math.round((options.icon ? 184 : 162) * cWidth / (cHeight || 1))), options.icon ? 368 : 325)) + "px' height='1px'>"];
                html.push("<tbody><tr><td>" + text + content + "</td></tr></tbody></table></span>");
                (element = fastDev(doc.createElement("div")).appendTo(body)).elems[0].innerHTML = html.join("");
                tag = element.find("#"+tag);
                // 编译文本
                fastDev.Core.ControlBus.compile(null, element.elems);
                // 超过800px宽度时，作文本强制断行处理
                if ((element = element.children("span:first")).width() > (width || 800)) {
                    tag.css({
                        "word-wrap": "break-word",
                        "word-break": "break-all"
                    });
                    element.children("table:first").css("width", width || 800);
                }
                elementWidth = element.width();
                elementHeight = element.height();
                (html = fastDev(doc.createElement("span")).css({
                    "max-width": "800px",
                    "display": "none"
                }).appendTo(body)).append(element.children("table:first").find("td:first").children());
                rect.width = width || (Math.min(html.width(), elementWidth) + bounding.width);
                rect.height = height || (Math.max(html.height(), elementHeight) + bounding.height);
                element.parent().remove();
            } else {
                (html = fastDev(doc.createElement("div")).appendTo(body).hide()).elems[0].innerHTML = text + content;
                global.needCompile = true;
            }
            global.content.append(html.children());
            rect.maxWidth = fastDev.isFunction(options.maxWidth) ? options.maxWidth.call(this, cWidth) : isFinite(parseInt(options.maxWidth, 10)) ? options.maxWidth : resize.width === "auto" ? cWidth - 10 : Infinity;
            rect.maxHeight = fastDev.isFunction(options.maxHeight) ? options.maxHeight.call(this, cHeight) : isFinite(parseInt(options.maxHeight, 10)) ? options.maxHeight : resize.height === "auto" ? cHeight - 10 : Infinity;
            html.remove();
            this.resize(rect, animation);
        } else {
            this.append(content).resize(resize, animation);
        }
        return this;
    },
    /**
     * 父类回调实现，用于延迟加载Iframe前的准备工作
     * @param {DomObject} iframe
     * @private
     */
    "readyForLoading": function (iframe) {
        var that = this,
            global = this._global,
            now = new Date().getTime(),
            grandparent = this._options.parent;
        if (!global.initialized) {
            return false;
        }
        if (fastDev.isWindow(grandparent)) {
            iframe.unbind("load", global.loadParentHandle || fastDev.noop).bind("load", global.loadParentHandle = function () {
                try {
                    if (global.maskClickHandle && (new Date().getTime() - now > 5000)) {
                        global.maskClickHandle.call(that);
                    }
                    // 未加载fastDev.Ui.Window将引发异常
                    iframe.elems[0].contentWindow.fastDev.Ui.Window.parent = grandparent;
                } catch (e) {} finally {
                    now = Infinity;
                }
            });
        }
    },
    /**
     * 窗口跨级
     * @param {Object} options 参数配置对象
     * @param {Object} global 控件私有变量域
     * @return {fastDev.Ui.Window} 跨级窗口对象实例
     * @private
     */
    "cross": function (options, global) {
        var top = fastDev.Ui.Window.top,
            // 顶层窗口类型的序列值
            id = top.fastDev.Ui.Window.id,
            instance;
        global.pageContext = top;
        // 已跨级的弹窗需在其所在窗口域里面构建
        options.inside = true;
        // 清除原容器设置
        options.container = "";
        // 该回调已在原实例构建前调用
        options.onBeforeReady = fastDev.noop;
        // 设置坐标值
        options.left = parseInt(options.left, 10) ? options.left : "50%";
        options.top = parseInt(options.top, 10) ? options.top : "38.2%";
        // 标记为已跨级
        options.crossed = "crossed";
        // 绑定跨级窗口的原父页面窗口对象
        options.parent = window;
        // 创建跨级弹窗实例
        instance = top.fastDev.create(this.alias, options);
        // 跨级弹窗的唯一标识值
        id = instance._global.sequence;
        // 保存原弹窗实例，以便在页面卸载时销毁未被关闭的跨级弹窗
        fastDev.Ui.Window.windows[id] = instance;
        // 保存原弹窗实例的构建上下文
        this.setData("@fastDev" + id, fastDev);
        this._options = instance._options;
        this._global = instance._global;
        this.elems = instance.elems;
        // 绑定页面卸载事件，销毁未被关闭的跨级弹窗
        fastDev(window).unbind("unload", global.windowUnloadHandle = global.windowUnloadHandle || function () {
            fastDev.each(fastDev.Ui.Window.windows, function (name, win) {
                win[win._options.persisted ? "hide" : "close"](true, false);
            });
            fastDev.Ui.Window.setData("@iframes" + fastDev.Ui.Window.id, null);
            fastDev.Ui.Window.parent = null;
        }).bind("unload", global.windowUnloadHandle);
        return instance;
    },
    /**
     * 获取跨级储存的数据
     * <p>默认存在一个parent数据对象,存储当前窗口的父对象
     * @param {String} name 与数据绑定的键名
     * @return {Object} 数据对象
     */
    "getData": function (name) {
        if (name === "parent") {
            return fastDev.Ui.Window.parent;
        }
        return fastDev.Ui.Window.top.fastDev.Ui.Window.cache[name];
    },
    /**
     * 存储跨级数据
     * <p>会覆盖之前保存的同名数据（共享存储区）
     * <p>也可使用一个普通对象一次性保存多项数据（属性名为数据的绑定键名，属性值即为相应的数据值）
     * @param {String|Object} name 与数据绑定的键名或者一个键值映射的数据集对象（一次性存储多项数据）
     * @param {Object} value 与键名对应的数据值
     */
    "setData": function (name, value) {
        var fast = fastDev.Ui.Window.top.fastDev;
        if (fastDev.isPlainObject(name)) {
            fast.apply(fast.Ui.Window.cache, name);
        } else {
            fast.Ui.Window.cache[name] = value;
        }
        return this;
    },
    /**
     * @cfg {Window}
     * 当前iframe页所归属的顶层window对象
     * <p>若inside配置属性为false时，弹窗将从原页面跨级至此页面创建并展现。
     */
    "top": fastDev.Util.PositionUtil.top,
    /**
     * @cfg {String}
     * 当前页面弹窗类型的唯一标识序列
     * @private
     */
    "id": fastDev.getID().toString(),
    /**
     * @cfg {Object}
     * 跨级数据存储对象
     * @private
     */
    "cache": {},
    /**
     * @cfg {Object}
     * 当前页面已跨级展现的弹窗实例存储对象
     * @private
     */
    "windows": {},
    /**
     * @cfg {Number}
     * 当前页面的未关闭弹窗数
     * @private
     */
    "count": 0,
    /**
     * @cfg {Window}
     * 当前页面的原父页面窗口对象
     */
    "parent": window.parent
});
﻿/**
 * @class fastDev.Ui.Tabs
 * @extends fastDev.Ui.Component
 * @author 姜玲
 * <p>选项卡控件,可ajax,iframe,div等三种模式展示选项卡内容。</p>
 * <p>继承自component,导航类控件。</p>
 * <p>作者：姜玲</p>
 *      
 *		<div itype="Accordion" >
 *			<div id="accordion1" text="文本">
 *                我们的名字...
 *			</div>
 *			<div id="accordion2" text="列表">
 *				<ul><li>第1条数据</li><li>第2条数据</li><li>第3条数据</li><li>第4条数据</li></ul>
 *			</div>
 *			<div id="accordion4" text="树">
 *			 <div itype="Tree"  initSource="data1.txt" showIco="true" topParentid="0" openFloor=2 ></div>
 *			</div>
 *		</div>
 */
fastDev.define("fastDev.Ui.Tabs", {
	"extend" : "fastDev.Ui.Component",
	"alias" : "Tabs",
	"_options" : {
		/**
		 * @cfg {Json}
		 * 合法的json数据源
		 * title:"",--必须项
		 * url:"",id:"",selected:false,type:"iframe",allowCache:false,content:"",
		 * showCloseBtn:false,iconCls:"",iconStyle:"",iframeWidth,iframeHeight,width:88px
		 */
		"items" : "",
		/**
		 * @cfg {String}
		 * 控件初始化合法的json数据源url
		 */
		"initSource" : "",
		/**
		 * @cfg {String}
		 * 控件id
		 */
		"id" : "tab",
		/**
		 * @cfg {String}
		 * 宽
		 */
		"width" : "100%",
		/**
		 * @cfg {String}
		 * 高
		 */
		"height" : "100%",
		/**
		 * @cfg {Array}
		 * 右键菜单(暂未实现)
		 */
		"tabMenu" : null,
		/**
		 * @cfg {Array}
		 * 右侧工具栏
		 */
		"tools" : null,
		/**
		 * @cfg {String}
		 * tab标题文本的对齐方式
		 * left/center/right/fit
		 */
		"tabAlign" : "left",
		/**
		 * @cfg {String}
		 * tab头部标题栏的定位方式
		 * left/right/top/bottom
		 */
		"tabPosition" : "top",
		/**
		 * @cfg {Boolean}
		 * 是否允许双击关闭
		 */
		"allowDblClickToClose" : false,
		/**
		 * @cfg {Boolean}
		 * 是否允许拖动时改变tab项的位置
		 */
		"allowDND" : false,
		/**
		 * @cfg {String}
		 * 选项卡的总宽度超长后的处理模式，有滚动和列表两种scroll/list模式 （暂未实现）
		 */
		"overWidthMode" : "scroll",
		/**
		 * @cfg {Number}
		 * 默认打开第几个链接
		 */
		"activeIndex" : 0,
		/**
		 * @cfg {String}
		 * 默认选中节点title
		 */
		"currentTitle" : "",
		/**
		 * @cfg {String}[type="iframe"]
		 * 控件内容展示方式
		 * iframe,ajax,div
		 */
		"type" : "iframe",
		/**
		 * @cfg {Boolean}
		 * 允许缓存
		 */
		"allowCache" : false,
		/**
		 * @cfg {String}
		 * 是否显示tab头，只保留body部分。
		 */
		"showHeader" : true,
		/**
		 * @cfg {Boolean}
		 * true显示关闭按钮，允许tab关闭
		 */
		"showCloseBtn" : false,
		/**
		 * @cfg {String}
		 * 标题图标样式类
		 */
		"iconCls" : "",
		/**
		 * @cfg {String}
		 * 控件在ie6下的显示模式控制 。
		 * iframe:页面在同一个iframe中打开，没有tab的标签头
		 * tabs:有标签头。在ie6下，tabs控件只有一个iframe
		 */
		"ie6Mode" : "iframe",
		/**
		 * @cfg {String}
		 * 标题图标样式
		 */
		"iconStyle" : "",
		"defineMode" : "js",
		"autoRenderer" : true,
		/**
		 * @event onTabClick
		 * 自定义点击事件
		 * @param {Object} 所点击的数据对象
		 */
		"onTabClick" : fastDev.noop,
		/**
		 * @event onBeforeClose
		 * 关闭前事件，可以通过return false阻止操作
		 * @param {Object} 所点击的数据对象
		 */
		"onBeforeClose" : fastDev.noop,
		/**
		 * @event onClose
		 * 关闭后事件
		 * @param {Object} 所点击的数据对象
		 */
		"onClose" : fastDev.noop,
		/**
		 * @event onTabMenu
		 * 右键弹出事件 暂未实现
		 * @param {Object} 所点击的数据对象
		 */
		"onTabMenu" : fastDev.noop,
		/**
		 * @event onTabLoad
		 * Tabs的initSource数据源请求加载完成后
		 */
		"onTabLoad" : fastDev.noop,
		/**
		 * @event onAdd
		 * 添加后
		 * @param {Object} 所添加的数据对象
		 */
		"onAdd" : fastDev.noop,
		/**
		 * @event onUpdate
		 * 更新后
		 * @param {Object} 所更新的数据对象
		 */
		"onUpdate" : fastDev.noop,
		/**
		 * @event onBeforeSelect
		 * 面板切换前发生，可以通过return false阻止操作
		 * @param {Object} 所点击的数据对象
		 */
		"onBeforeSelect" : fastDev.noop,
		/**
		 * @event onAfterSelect
		 * 面板切换完发生
		 * @param {Object} 所点击的数据对象
		 */
		"onAfterSelect" : fastDev.noop
	},
	"_global" : {
		// 控件子项面板
		"panel" : null,
		//背景样式
		"bgclass": "",
		//li对象组
		"liobj" : null,
		//是否ie6
		"ie6Iframe" : false,
		//默认移动宽度
		"defaultMoveWidth":50
	},
	 "template": [
	 '<div class="ui-tab-div-content">',
	 '<tpl dynamic>',
		'<table id="#{id}" border="0" cellpadding="0" cellspacing="0" class="ui-tab-table ui-tab-position-#{tabPosition}  ui-tab-align-#{tabAlign} #{bgclass}" style="width:#{width}; height:#{height}">',
		'<tpl if(#{tabPosition}=="left" || #{tabPosition}=="right")>',	
			'<tr><td colspan="2" class="ui-tab-align"></td></tr>',
		'</tpl>',	
			'<tr>',
		'<tpl if(#{tabPosition}=="bottom" || #{tabPosition}=="right")>',	
			'<td class="ui-tab-align ui-tab-other">',
			'<div class="ui-tab-content">',			 
			  '<tpl each>', 
				'<div id="{id}" class="ui-tab-panel" title="{title}" url="{url}" type="{type}" allowCache="{allowCache}" style="width: {iframeWidth}; height:{iframeHeight};',
				 '<tpl if({selected}!="true")>',	
				'display:none',
				'</tpl>',
				  '">',
				  '<tpl if({type}=="iframe")>',
					'<iframe frameborder="0"></iframe>',
					'</tpl>',
				'</div>',		 
				'</tpl>',				
			 '</div>',			
			'</td>', 
		'</tpl>',		
		'<tpl if(#{tabPosition}=="bottom")>',
			'</tr><tr>',
		'</tpl>',	
			'<td class="ui-tab-align">',
				'<div class="ui-tab-wrap" style="margin-left: 0px; margin-right: 0px;', 
				'<tpl if(!#{showHeader})>',	
				'display:none;',
				'</tpl>',					
		  '"><div class="ui-tab-scroller-left" style="display:none"></div>',
		  '<div class="ui-tab-scroller-right" style="display:none"></div>',
		  '<ul class="ui-tab ui-tab-bg">',	
		  '<tpl each>',
			'<li name="{id}" order="{row_id}" url="{url}" type="{type}" txt="{title}"',
			 '<tpl if({selected}=="true")>',
				' class="ui-tab-selected"',
			  '</tpl>',
			'>',
			  '<a class="ui-tab-inner">',
			   '<tpl if({iconCls} || {iconStyle})>',
			     '<span class="ui-tab-icon {iconCls}" style="{iconStyle}"></span>',
			   '</tpl>',   
			  '<span class="ui-tab-text">{title}</span>',	  
			  '<tpl if({showCloseBtn}==true)>',
				 '<span class="ui-tab-close"></span>',
			  '</tpl>',
			  '</a>',			 
			  '<div class="ui-tab-left"></div>',
			  '<div class="ui-tab-right"></div>',
			'</li>',			
			'</tpl>',			
		  '</ul>',
		  '<div class="ui-tab-tool" id="ui-tab-tool_#{id}" style="display:none"></div>',
		'</div>',
			'</td>', 
		'<tpl if(#{tabPosition}=="top")>',	
			'</tr><tr>',
		'</tpl>',		
		'<tpl if(#{tabPosition}=="top" || #{tabPosition}=="left")>',	
			'<td class="ui-tab-align ui-tab-other">',
			'<div class="ui-tab-content">',
			  '<tpl each>',
				'<div id="{id}" class="ui-tab-panel" title="{title}" url="{url}" type="{type}" allowCache="{allowCache}" style="width: {iframeWidth}; height:{iframeHeight};',
				 '<tpl if({selected}!="true")>',	
				'display:none',
				'</tpl>',
				  '">',				  
				  '<tpl if({type}=="iframe")>', 
					'<iframe frameborder="0"></iframe>',
					'</tpl>',
				'</div>',		 
				'</tpl>',
			 '</div>',		
			'</td>', 
		'</tpl>',			
		'</tr></table>',	
		'</tpl>',
		'</div>'
    ],
	"tplParam" : ["width", "height", "id", "tabPosition", "tabAlign", "showHeader", "type", "bgclass"],
	"fields" : ["title", {
		"name" : "url",
		"defaultValue" : ""
	}, {
		"name" : "type"
	}, {
		"name" : "allowCache"
	}, {
		"name" : "showCloseBtn"
	}, {
		"name" : "iconCls"
	}, {
		"name" : "iconStyle"
	}, {
		"name" : "id",
		"defaultValue" : ""
	}, {
		"name" : "selected",
		"defaultValue" : false
	}, {
		"name" : "iframeWidth",
		"defaultValue" : "100%"
	}, {
		"name" : "iframeHeight",
		"defaultValue" : "100%"
	}, {
		"name" : "width",
		"defaultValue" : "88px"
	}, "content"],	
	/**
	 * 面板参数准备
	 * @protected
	 */
	"ready" : function(options, global) {
		for(var i = 2; i < 6; i++) {
			this.fields[i].defaultValue = options[this.fields[i].name];
		}
		if(options.tabAlign === "left" && options.tabPosition === "top") {
			global.bgclass = "ui-tab-headerbg";
		}
		if(options.defineMode === "html") {
			options.autoRenderer = false;
		}
	},
	// 使用父类文档说明
	"construct" : function(options, global){
		global.panel = fastDev(this.elems[0]);
	},
	// 使用父类文档说明
	"init" : function(options, global) {		
		var liobj = this.find("li");	
		global.panel.bind("mouseover", fastDev.setFnInScope(this, this.buttonCloseMouseoverHandle));
		global.panel.bind("mouseout", fastDev.setFnInScope(this, this.buttonCloseMouseoutHandle));
				
		global.panel.unbind("mousedown");
		global.panel.bind("mousedown", fastDev.setFnInScope(this, this.tabClickHandle));
		if(options.allowDblClickToClose) {
			global.panel.bind("dblclick", fastDev.setFnInScope(this, this.tabDblClickHandle));
		}
	},
	/**
	 * 初始化控件列表
	 * @param {Array} items数据项
	 * @protected
	 */
	"constructItems" : function(options, global) {
		var  data = this.dataset.select(function(i, item) {
			return item.type === "iframe";
		});
		if(fastDev.Browser.isIE6 && options.ie6Mode === "iframe" && data.length > 0) {
			//ie6的iframe模式只创建一个iframe
			this.createIframe();
		} else {
			this.renderDynamicHtml(global.panel);
			options.onTabLoad.call(this);
			this.setContent();
			this.setConstruct();
		}
	},
	/**
	 * 创建Iframe
	 * @private
	 */
	"createIframe" : function() {
		var data = this.dataset.select(function(i, item) {
			return item.type === "iframe";
		});
		if(data.length === 0) {
			data = this.dataset.select(function(i, item) {
				return item.url !== "";
			});
		}
		var url = data[0].url, options = this._options, container = options.container;
		var height = options.height || container.height() + "px", width =options.width || container.width() + "px";
		var htmlStr = "<div id=\"" + options.id + "\"><iframe id=\"iframe" + options.id + "\" name=\"iframe" + options.id + "\" frameborder=\"0\" src=\"" + url + "\" style=\"width:" + width + "; height:" + height + ";\"></iframe></div>";
		var iframe = fastDev.createByHTML(htmlStr);
		container.children().remove();
		container.append(iframe);
		this._global.ie6Iframe = true;
	},
	/**
	 * 根据名称得到链接地址
	 * @param {string} url
	 * @return {string}
	 * @private
	 */
	"getNameByUrl" : function(url){
		var urls = url.split('/'),len=urls.length,
		urlname=urls[len-1].split('.')[0],lastml="";
		if(len>=2){
			lastml=urls[len-2];
		}
		return lastml+urlname;
	},
	/**
	 * 设置控件内容
	 * @private
	 */
	"setContent" : function() {
		var items = this.dataset.select(function(i, item) {
			return item.type === "div";
		}), len = items.length;
		for(var i = 0; i < len; i++) {
			this.find("[class='ui-tab-panel'][title='" + items[i].title + "']").append(items[i].content);
		}
	},
	/**
	 * 设置控件属性
	 * @private
	 */
	"setConstruct" : function() {
		var options = this._options;
		//设置选中项
		this.setSelected(options);
		//设置工具栏
		this.createTools(options);
		//设置控件的宽和高
		this.setHeightWidth(options);
		//设置类型ajax的页面加载
		this.setType();	
		var liobj = this.find("li");
		this.dargliEvent(options, liobj);
		this.scrollerliEvent(options, liobj);
	},
	/**
	 * 设置类型ajax的页面加载
	 * @private
	 */
	"setType" : function() {
		var divs = this.find("div.ui-tab-panel[type='ajax']").elems,
		len = divs.length, div, url, allowCache, 
		completefc = function(rsp) {
			div.append(fastDev("<div>" + rsp.text + "</div>"));
		};
		for(var i = 0; i < len; i++) {
			div = fastDev(divs[i]);
			url = div.attr("url");
			allowCache = div.attr("allowCache");
			if(allowCache === "true" || div.children().elems.length < 1) {
				fastDev.Core.Ajax.ajax(url, {
					complete : completefc
				});
			}
		}
	},
	/**
	 * 得到标题栏的总宽度
	 * @private
	 */
	"getAllTitleWidth" : function() {
		var data = this.dataset.select(), len = data.length, width = 2;
		for(var i = 0; i < len; i++) {
			width += parseFloat(data[i].width) + 2;
		}
		return width;
	},
	/**
	 * 设置宽高
	 * @private
	 */
	"setHeightWidth" : function(options) {
		var fn = fastDev.Util.StringUtil.stripUnits, parent = fastDev(options.container), paWidth = parent.width(),
		//pWidth =options.width,
		pHeight = parent.height(),
		//pHeight=options.height,
		wwidth = fastDev(window).width(), pWidth = Math.min(paWidth, wwidth), width = fn(options.width, pWidth),
		//html模式，先执行了创建操作，而非先将控件创建到页面上。。。所以无法得到titleHeight titleWidth
		titleHeight = (this.find("li:first").height() || 23) + 2, titleWidth = parseFloat(this.find("div.ui-tab-wrap").width()) || this.getAllTitleWidth(), height = fn(options.height, pHeight), divwidth = width, divheight = height;
		//		if(width===wwidth && fastDev.Browser.isIE6 ){
		//			width=width-10;
		//		}
		this.find("table.ui-tab-table").css({
			"width" : width + "px",
			"height" : height + "px"
		});

		if(options.tabPosition === "top" || options.tabPosition === "bottom") {
			divheight = height - parseFloat(titleHeight);
			this.find("div.ui-tab-wrap").css("width", width + 2 + "px");
			this.find("ul.ui-tab").css("height", "25px");
			this.find("ul.ui-tab").css("width", width + "px");
			//titleHeight
		} else {
			if(width > titleWidth) {
				divwidth = width - titleWidth;
				this.find("div.ui-tab-wrap .ui-tab-inner").css("width", titleWidth - 1 + "px");
			} else {
				divwidth = width - 68;
				this.find("div.ui-tab-wrap .ui-tab-inner").css("width", "68px");
			}
		}

		//this.find("ul.ui-tab").css("height","24px");
		if(options.tabAlign === "left" && options.tabPosition === "top") {
			var ulWidth = titleWidth;
			//this.getUlWidth();
			if(ulWidth > width) {
				this.find("ul.ui-tab").css("width", "5000px");
				this.find("div[class^='ui-tab-scroller-']").attr("show-scroller", "1");
			}
		}
		if(divheight > 0) {
			this.find("div.ui-tab-panel").css({
				"width" : divwidth + "px",
				"height" : divheight + "px"
			});
			this.find("iframe").css({
				"width" : divwidth + "px",
				"height" : divheight + "px"
			});
		}
	},
	/**
	 * 得到ui总宽度
	 * @private
	 */
	"getUlWidth" : function() {
		var liobj = this.find("li"), items = this.getliItemsAndSetLiLeft(liobj), width = 0, len = items.length;
		for(var i = 0; i < len; i++) {
			width = width + items[i].width + 4;
		}
		return width;
	},
	/**
	 * 得到tab的右边距，宽度，并设置li的右边局
	 * @private
	 */
	"getliItemsAndSetLiLeft" : function(liobj) {
		var li, A = liobj.elems, n = A.length, items = [];
		for(var k = 0; k < n; k += 1) {
			li = fastDev(A[k]);
			var item = {};
			item.order = li.attr("order");
			item.left = li.offset().left;
			li.css("left", item.left + "px");
			item.width = li.width();
			items = items.slice(0).concat(item);
		}
		liobj.css("position", "absolute");
		return items;
	},
	/**
	 * 创建工具栏
	 * @private
	 */
	"createTools" : function(options) {
		if(options.tools) {
			//var div = this.find("#ui-tab-tool_" + options.id);
			var div = this.find("div[id='ui-tab-tool_" + options.id + "']");
			for(var i = 0; i < options.tools.length; i++) {
				fastDev.create("Button", {
					container : div,
					text : options.tools[i].text,
					iconCls : options.tools[i].iconCls,
					onclick : options.tools[i].onclick
				});
			}
			this.find("div.ui-tab-tool").show();
		}
	},
	/**
	 * 设置选中项。数据里的 selected优先，currentTitle 次之，activeIndex最低。
	 * @private
	 */
	"setSelected" : function(options) {
		var selectedli = this.find("li.ui-tab-selected");
		if(selectedli.elems.length === 0) {
			if(options.currentTitle) {
				var currnode = this.find("li[txt='" + options.currentTitle + "']");
				if(currnode) {
					currnode.addClass("ui-tab-selected");
					this.find("div.ui-tab-panel[title='" + options.currentTitle + "']").css("display", "block");
				} else if(options.activeIndex > -1) {
					this.find("li:eq(" + options.activeIndex + ")").addClass("ui-tab-selected");
					this.find("div.ui-tab-panel:eq(" + options.activeIndex + ")").css("display", "block");
				}
			} else if(options.activeIndex > -1) {
				this.find("li:eq(" + options.activeIndex + ")").addClass("ui-tab-selected");
				this.find("div.ui-tab-panel:eq(" + options.activeIndex + ")").css("display", "block");
			}
		} else if(selectedli.elems.length > 1) {
			this.find("li.ui-tab-selected:gt(0)").removeClass("ui-tab-selected");
			this.find("div.ui-tab-panel:visible:gt(0)").css("display", "none");
		}
		//还要做点击后的url赋值操作
		var sedtxt = this.find("li.ui-tab-selected").attr("txt");
		this.setSrcByTxt(sedtxt);
	},
	/**
	 * 设置iframe的src
	 * @private
	 */
	"setIframeSrc" : function(iframe, iframesrc) {
		if(iframe.elems.length > 0 && !!iframesrc) {
			var src = iframe.attr("src");
			this.find("div.ui-tab-panel:visible").css("display", "none");
			iframe.parent("div").css("display", "block");
			if(src !== iframesrc) {
				iframe.prop("src", iframesrc);
				if(!iframe.attr("id")){
					var nameurl=this.getNameByUrl(iframesrc);
					iframe.attr("name",nameurl);				
					iframe.attr("id",nameurl);
				}
				//this.find(".ui-tab-panel").hide();
				//iframe.parent("div").show();
			}
		}
	},
	/**
	 * 根据title设置iframe的url
	 * @param {String} title
	 * @param {String} url
	 */
	"setUrlByTitle" : function(title, url) {
		if(this._global.ie6Iframe) {
			var iframe = fastDev("[id='" + this._options.id+"']").find("iframe");
			var src = iframe.attr("src");
			if(src !== url) {
				iframe.prop("src", url);
			}
		} else {
			var panel = this.find("li[type='iframe'][txt='" + title + "']");
			if(panel.elems.length > 0) {
				panel.attr("url", url);
				this.setSrcByTxt(title);
			}
		}
	},
	/**
	 * 根据txt设置iframe的url
	 * @private
	 */
	"setSrcByTxt" : function(txt) {
		var panel = this.find("li[type='iframe'][txt='" + txt + "']"), iframe, iframesrc = panel.attr("url");
		if(panel.elems.length === 1) {
			if(fastDev.Browser.isIE6) {
				iframe = this.find("iframe:first");
				this.setIframeSrc(iframe, iframesrc);
			} else if(fastDev.Browser.isIE7) {
				var iframeNum = this.find("iframe").elems.length;
				if(iframeNum > 3) {
					iframe = this.find("iframe:first");
					this.setIframeSrc(iframe, iframesrc);
				} else {
					iframe = this.find("div.ui-tab-panel[type='iframe'][title='" + txt + "']").children("iframe");
					this.setIframeSrc(iframe, iframesrc);
				}
			} else {
				iframe = this.find("div.ui-tab-panel[type='iframe'][title='" + txt + "']").children("iframe");
				this.setIframeSrc(iframe, iframesrc);
			}
		}
	},
	/**
	 * 鼠标悬停关闭按钮响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"buttonCloseMouseoverHandle": function(event){
		var evobj = fastDev(event.target);
			if(evobj.hasClass("ui-tab-close")) {
				evobj.addClass("ui-tab-close-over");
			}
	},
	/**
	 * 鼠标划出关闭按钮响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"buttonCloseMouseoutHandle": function(event){
		var evobj = fastDev(event.target);
			if(evobj.hasClass("ui-tab-close")) {
				evobj.removeClass("ui-tab-close-over");
			}
	},
	/**
	 * tab单击响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"tabClickHandle": function(event){
		var evobj = fastDev(event.target),
			li = evobj.parents("li[txt]:first") || evobj,			
			txt = li.attr("txt");
			if(!txt){
				return;
			}
			if(evobj.hasClass("ui-tab-close")) {
				this.removeTab(txt);
			} else {
				this.find("li.ui-tab-selected").removeClass("ui-tab-selected");
				li.addClass("ui-tab-selected");
				this.find("div.ui-tab-panel:visible").css("display", "none");
				this.find("div.ui-tab-panel[title='" + txt + "']").css("display", "block");
				this.setSrcByTxt(txt);
				this._options.onTabClick.call(this, event, txt);
			}
	},
	/**
	 * tab双击响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"tabDblClickHandle": function(event){
		var evobj = fastDev(event.target), li = evobj.parents("li:first") || evobj, 
		txt = li.attr("txt");
		if(!txt){
				return;
			}
		this.removeTab(txt);
	},	
	/**
	 * 得到li最大的 right
	 * @private
	 */
	"getMaxRight" : function() {
		var con = this.find("li:last");
		//.elems;
		//var maxRight=0,len=liobj.length,con,firstLeft=0;
		//for(var i=0;i<len;i++){
		//con=fastDev(liobj[i]);
		var maxRight = con.position().left + con.width();
		//}
		return maxRight;
	},
	/**
	 * 左右两本的《》的事件
	 * @private
	 */
	"scrollerliEvent" : function(options, liobj) {
		// < >按钮鼠标滑入滑出样式改变事件
		var me = this, uileft, maxliright, move, scroller = me.find("div[show-scroller='1']"), scr1 = fastDev(scroller.elems[0]), scr2 = fastDev(scroller.elems[1]), tabsWidth = me.find("div.ui-tab-wrap").width();
		if(scroller.elems.length > 0) {
			var disabledScroller = function() {
				uileft = me.find("ul.ui-tab").position().left;
				maxliright = me.getMaxRight();
				//如果ul的left是负数，那么左边的可以点，否则不可以点
				if(uileft < 0) {
					scr1.removeClass("ui-tab-scroller-left-disabled");
				} else {
					scr1.addClass("ui-tab-scroller-left-disabled");
				}
				//如果最后一个的right大于整个的left，那么右边的可以点，否则不可以点
				if(maxliright + uileft > tabsWidth) {
					scr2.removeClass("ui-tab-scroller-right-disabled");
				} else {
					scr2.addClass("ui-tab-scroller-right-disabled");
				}
			};
			var scrollerMouseOver = function() {
				disabledScroller();
				me.find("li").removeCss("z-index");
				var src1disabled = scr1.hasClass("ui-tab-scroller-left-disabled");
				var scr2disabled = scr2.hasClass("ui-tab-scroller-right-disabled");
				if(!src1disabled || !scr2disabled) {
					scroller.css("display", "block");
					//if (options.allowDND === false) {
					//    options.allowDND = true;
					//    me.dargliEvent(options, me.find("li"));
					//}
				}
			};
			var scrollerMouseOut = function() {
				scroller.hide();
			};
			this.find("div.ui-tab-wrap").bind("mouseover", scrollerMouseOver).bind("mouseout", scrollerMouseOut);
			var li = me.find("ul.ui-tab>li").elems, lilen = li.length, moveWidth = 4;
			var move1 = function() {
				//<<每次移动值为 left大于ui-tab-wrap宽度-2的第一个li的left+width+4
				moveWidth = 92;
				//me.getMoveWidth(false);
				uileft = me.find("ul.ui-tab").position().left;
				if(moveWidth > 0 && uileft < 0) {
					scr2.removeClass("ui-tab-scroller-right-disabled");
					move = (uileft + moveWidth) > 0 ? 0 : (uileft + moveWidth);
					// me.find(".ui-tab").css("left",move+"px");
					me.find("ul.ui-tab").animate({
						left : move
					}, 200, "quad-easeInOut");
				} else {
					scr1.addClass("ui-tab-scroller-left-disabled");
					scrollerStop1();
				}
			};
			var move2 = function() {
				//>>每次移动值为 left大于0的第一个li的left+width+4
				moveWidth = 92;
				//me.getMoveWidth(true);
				uileft = me.find("ul.ui-tab").position().left;
				maxliright = me.getMaxRight();
				if(moveWidth > 0 && maxliright + uileft > tabsWidth) {
					scr1.removeClass("ui-tab-scroller-left-disabled");
					move = (uileft - moveWidth) > (tabsWidth - maxliright - 4) ? (uileft - moveWidth) : (tabsWidth - maxliright - 4);
					//  me.find(".ui-tab").css("left",move+"px");
					me.find("ul.ui-tab").animate({
						left : move
					}, 200, "quad-easeInOut");
				} else {
					scr2.addClass("ui-tab-scroller-right-disabled");
					scrollerStop2();
				}
			};
			var sMove1, sMove2;
			var scrollerMove1 = function() {
				move1();
				sMove1 = setInterval(move1, 500);
			};
			var scrollerMove2 = function() {
				move2();
				sMove2 = setInterval(move2, 500);
			};
			var scrollerStop1 = function() {
				clearInterval(sMove1);
			};
			var scrollerStop2 = function() {
				clearInterval(sMove2);
			};
			scr1.bind("mousedown", scrollerMove1).bind("mouseup", scrollerStop1);
			scr2.bind("mousedown", scrollerMove2).bind("mouseup", scrollerStop2);
		}
	},
	/**
	 * 得到移动区域的总宽度
	 * @private
	 */
	"getMoveWidth" : function(isLast) {
		//每次移动值为 left大于0或总宽度值的第一个li的left+width+4
		var liitems = this.getliItems(this.find("li")), li,defaultMoveWidth=this._global.defaultMoveWidth;
		var lileft, moveWidth = 4, tempWidth = 0;
		if(isLast) {
			tempWidth = this.find("div.ui-tab-wrap").width() - 2;
		}
		for(var i = 0; i < liitems.length; i++) {
			lileft = liitems[i].left;
			if((lileft + liitems[i].width) >= tempWidth) {
				li = liitems[i];
				break;
			}
		}
		if(li) {
			if(isLast) {
				moveWidth = lileft + li.width + 4 - tempWidth - 1;
			} else {
				moveWidth = Math.abs(lileft) + 4;
			}
			return moveWidth > defaultMoveWidth ? moveWidth : defaultMoveWidth;
		} else {
			return defaultMoveWidth;
		}
	},
	/**
	 * 得到某个li的left值
	 * @private
	 */
	"getLeft" : function(obj) {
		var left=parseInt(obj.css("left"),10);
		if(left===0){
			left=fastDev(obj).offset().left;
		}
		return left ;
	},
	/**
	 * 拖拽事件
	 * @private
	 */
	"dargliEvent" : function(options, liobj) {
		if(options.allowDND && (options.tabPosition === "top" || options.tabPosition === "bottom")) {
			liobj = this.find("li");
			fastDev.create("Draggable", {
				element : liobj,
				axis : "x",
				inside : true,
				ghost : false,
				oncreate : function() {
					for(var i = 0, elem, position; elem = liobj.elems[i++]; ) {
						( elem = fastDev(elem)).css({
							left : ( position = elem.position()).left,
							top : position.top
						});
					}
					liobj.css("position", "absolute");
				},
				onstart : function(event) {
					var firstTab = this.parent().find("li:first");
					this.elems[0]._tabWidth = this.outerWidth(true);
					this.elems[0]._minTabPosition = firstTab.elems[0]._tabPosition || firstTab.position();
					//this.elems[0]._tabWrapWidth = this.parent().parent().width();
					this.parent().parent().find("div[show-scroller='1']").hide();
				},
				ondrag : function(event, offsetX, offsetY) {
					var position = this.position(), nextTab = this.next("li"), prevTab = this.prev("li"), width = this.elems[0]._tabWidth, prevOffset = prevTab.position(), nextOffset = nextTab.position(), prevWidth = prevTab.outerWidth(true), nextWidth = nextTab.outerWidth(true), nextPosition = nextTab.hasElem() ? nextTab.elems[0]._tabPosition || nextOffset : {
						left : prevOffset.left + prevWidth
					}, prevPosition = prevTab.hasElem() ? prevTab.elems[0]._tabPosition || prevOffset : {
						left : this.elems[0]._minTabPosition.left
					};
					if(position.left < prevPosition.left + prevWidth / 2) {
						(prevTab.insertAfter(this).animate({
						left: position.left = nextPosition.left - (nextTab.hasElem() ? prevWidth : 0)
						}, 200, "quad-easeInOut").elems[0] || "")._tabPosition = position;
					} else if(position.left + width > nextPosition.left + nextWidth / 2) {
						(nextTab.insertBefore(this).animate({
						left: position.left = prevPosition.left + prevWidth
						}, 200, "quad-easeInOut").elems[0] || "")._tabPosition = position;
					}
				},
				onstop : function() {
					var nextTab = this.next("li"), prevTab = nextTab.hasElem() ? null : this.prev("li"), position = {};
					this.animate({
					left: position.left = Math.max(nextTab.hasElem() ? (nextTab.elems[0]._tabPosition || nextTab.position()).left - this.elems[0]._tabWidth : (prevTab.elems[0]._tabPosition || prevTab.position()).left + prevTab.outerWidth(true), this.elems[0]._minTabPosition.left)
					}, 200, "quad-easeInOut").elems[0]._tabPosition = position;
					return false;
				}
			});
		}
	},
	/**
	 * 得到li的left,width和order
	 * @private
	 */
	"getliItems" : function(liobj) {
		var li, A = liobj.elems, n = A.length, items = [];
		for(var k = 0; k < n; k += 1) {
			li = fastDev(A[k]);
			var item = {};
			item.order = li.attr("order");
			item.left = this.getLeft(li);
			item.width = li.width();
			items = items.slice(0).concat(item);
		}
		return items;
	},
	/**
	 * 重新加载
	 */
	"reLoad" : function(config, data) {
		this.initRefresh(config, data);
		this.setConstruct();
	},
	/**
	 * 得到当前title
	 * @return  {String} title
	 */
	"getCurrentTitle" : function() {
		var sed = this.find("li.ui-tab-selected"), title = "";
		if(sed.elems.length > 0) {
			title = sed.attr("txt");
		}
		return title;
	},
	/**
	 * 设置当前活动的title
	 * @param {String} title
	 */
	"setActiveTabByTitle" : function(title) {
		this.find("li.ui-tab-selected").removeClass("ui-tab-selected");
		this.find("div.ui-tab-panel").css("display", "none");
		var currnode = this.find("li[txt='" + title + "']");
		if(currnode) {
			currnode.addClass("ui-tab-selected");
			//if(fastDev.Browser.isIE6 || fastDev.Browser.isIE7) {
				this.find("div.ui-tab-panel[title='" + title + "']").css("display", "block");
				this.setSrcByTxt(title);
			//} else {
				//this.find("div.ui-tab-panel[title='" + title + "']").css("display", "block");
			//}

		}
	},
	/**
	 * 添加选项卡
	 * @param {json} item
	 */
	"addTab" : function(item) {		
		var me = this, options = this._options,global=this._global;
		var tempds = this.dataset.select(function(i, data) {
			return data.title === item.title;
		});
		if(tempds.length > 0) {
			throw "“" + item.title + "”已经存在，不能重复添加。";
		}
		if(global.ie6Iframe || (fastDev.Browser.isIE6 && options.ie6Mode === "iframe")) {
			if(item.type !== "ajax" && item.type !== "div") {
				item.type = "iframe";
				this.dataset.remove(function(i, data) {
					return data.type === "iframe";
				});
				this.dataset.insert(item);
				var datalen = this.dataset.select().length;
				if(datalen === 1) {
					this.createIframe();
				}
				return;
			}
		}
		var currentTitle=item.title;
		options.currentTitle = currentTitle;
		this.dataset.insert(item);
		
		var dataSet= this.dataset.select(function(i,item){
			return item.title===currentTitle;
		});
		var titleul = this.find("ul.ui-tab");		
		this._renderDynamicHtml(titleul,"addDynamicTemplateTitle",dataSet,false,window,false);
		var contentdiv=this.find("div.ui-tab-content");
		this._renderDynamicHtml(contentdiv,"addDynamicTemplateContent",dataSet,false,window,false);		
		this.setConstruct();		
		//this.constructItems(options,global);		
		var addleft=this.find("[txt='"+currentTitle+"']").position().left;
		var tabwidth= parseFloat(this.find("div.ui-tab-wrap").width());
		
		if(addleft>tabwidth){
			var liwidth=this.find("[txt='"+currentTitle+"']").width();
			var move=tabwidth-(addleft+liwidth+4);
		this.find("ul.ui-tab").animate({
						left : move
					}, 200, "quad-easeInOut");
		}
		this.setActiveTabByTitle(currentTitle);
		this._options.onAdd.call(me, currentTitle);
	},
	/**
	 * 添加动态模板标题部分
	 * @param {} params
	 * @param {} data
	 * @return {}
	 * @private
	 */
	"addDynamicTemplateTitle":function(params,data){
		var html = [],i=this.dataset.select().length-1,item=data[0];
		html.push('<li name="'+item.id+'" order="'+i+'" url="'+item.url+'" type="'+item.type+'" txt="'+item.title+'" class="ui-tab-selected">');
		html.push('<a class="ui-tab-inner">');
		if(!!item.iconCls || !!item.iconStyle){
		    html.push('<span class="ui-tab-icon '+item.iconCls+'" style="'+item.iconStyle+'"></span>');
		}
		html.push('<span class="ui-tab-text">'+item.title+'</span>');
		if(item.showCloseBtn===true){
			html.push('<span class="ui-tab-close"></span>');
		}
		html.push('</a>');
		html.push('<div class="ui-tab-left"></div>');
		html.push('<div class="ui-tab-right"></div>');
		html.push('</li>');
		return html.join('');
	},
	/**
	 * 添加动态模板内容部分
	 * @param {} params
	 * @param {} data
	 * @return {}
	 * @private
	 */
	"addDynamicTemplateContent":function(params,data){
		var html = [],item=data[0];
		html.push('<div id="'+item.id+'" class="ui-tab-panel" title="'+item.title+'" url="'+item.url+'" type="'+item.type+'" allowCache="'+item.allowCache+'" style="width: '+item.iframeWidth+'; height:'+item.iframeHeight+';">');
		if(item.type==="iframe"){
			html.push('<iframe frameborder="0"></iframe>');
		}
		html.push('</div>');
		return html.join('');
	},
	/**
	 * 获取指定选项卡数据
	 * @param {String} id
	 * @return  {Json} item
	 */
	"getTabById" : function(id) {
		var items = this.dataset.select(function(i,item){
			return item.id===id;
		});
		return items;
	},
	/**
	 * 获取指定选项卡数据
	 * @param {String} title
	 * @return  {Json} item
	 */
	"getTabByTitle" : function(title) {
		var items = this.dataset.select(function(i,item){
			return item.title===title;
		});
		if(items && items.length>0){
		return items[0];
		}
	},
	/**
	 * 更新指定选项卡
	 * @param {String} title
	 * @param {json} item
	 */
	"updateTab" : function(title, item) {
		var me = this;
		this.removeTab(title);
		this.addTab(item);
		this._options.onUpdate.call(me, item.title);
	},
	/**
	 * 清空指定选项卡的内容
	 * @param {String} title
	 */
	"cleanContentByTitle" : function(title) {
		var iframediv = this.find("div.ui-tab-panel[title='" + title + "']");
		if(iframediv.elems.length > 0) {
			var children = iframediv.children();
			children.remove();
		}
	},
	/**
	 * 得到指定选项卡（iframe类型）的iframe的id
	 * @param {String} title
	 */
	"getIframeIDByTitle" : function(title){
		var iframe=fastDev(".ui-tab-panel[title='"+title+"']").children("iframe");
		if(iframe.elems.length>0){
		return iframe.attr("id");
		}else{
		return "";
		}
	},
	/**
	 * 刷新指定选项卡（iframe类型）的页面内容
	 * @param {String} title
	 */
	"refreshTabByTitle":function(title){
		var iframe=fastDev(".ui-tab-panel[title='"+title+"']").children("iframe");
		if(iframe.elems.length>0){
		  var src=iframe.attr("src"),url,id=fastDev.getID();
		  if(src.indexOf("?")>-1){
				url = src + "&sj_" + id + "=1";
			}else{
			  url = src+ "?sj_" + id + "=1";
			}			
			var panel = this.find("li[type='iframe'][txt='" + title + "']"); 
			panel.attr("url",url);
			iframe.attr("src",url);
		}
	},
	/**
	 * 添加指定选项卡的内容
	 * @param {String} title
	 * @param {String} content
	 */
	"addContentByTitle" : function(title, content) {
		var iframediv = this.find("div.ui-tab-panel[title='" + title + "']");
		if(iframediv.elems.length > 0) {
			var dom = fastDev.createByHTML(content);
			iframediv.append(dom);
		}
	},
	/**
	 * 设置指定选项卡的内容
	 * @param {String} title
	 * @param {String} content
	 */
	"setContentByTitle" : function(title, content) {
		var iframediv = this.find("div.ui-tab-panel[title='" + title + "']");
		if(iframediv.elems.length > 0) {
			var children = iframediv.children();
			children.remove();
			var dom = fastDev.createByHTML(content);
			iframediv.append(dom);
		}
	},
	/**
	 * 关闭指定选项卡项
	 * @param {String} title
	 */
	"removeTab" : function(title) {
		var options = this._options;
		if(fastDev.Browser.isIE6 && options.ie6Mode === "iframe"){
			if(options.onBeforeClose.call(this, title) !== false) {
				this.dataset.remove(function(i, data) {
					return data.title === title;
				});				
				try{
				document.getElementById("iframe"+options.id).src="about:blank";
				}catch(e){}
				try{
				document.getElementById("iframe"+options.id).location.href="about:blank";
				}catch(e){}
				options.onClose.call(this, title);
				return;
			}
		}
		if(this.find("li[txt='" + title + "']>a>.ui-tab-close").elems.length === 0) {
			return false;
		}
		if(options.onBeforeClose.call(this, title) !== false) {
			var prevTitle = this.find("li[txt='" + title + "']").prev("li").attr("txt");
			if(prevTitle === "") {
				prevTitle = this.find("li[txt='" + title + "']").next("li").attr("txt");
			}
			this.find("li[txt='" + title + "']").remove();
			this.dataset.remove(function(i, data) {
					return data.title === title;
				});				
			this.find("div.ui-tab-panel[title='" + title + "']>iframe").attr("src", "");
			this.find("div.ui-tab-panel[title='" + title + "']").remove();
			if(!!prevTitle){
			this.setActiveTabByTitle(prevTitle);
			}
			var liobj = this.find("li");
			liobj.removeAttr("style");
			this.dargliEvent(options, liobj);
			options.onClose.call(this, title);
		}
	},
	/**
	 * 关闭全部选项卡
	 */
	"removeAll" : function() {
		this.find("li").remove();
		this.find("div.ui-tab-panel").remove();
	},
	/**
	 * 关闭所有选项卡除当前
	 * @param {String} title
	 */
	"removeAllBut" : function(title) {
		if(!title) {
			title = this.getCurrentTitle();
		}
		if(title) {
			this.find("li[txt!='" + title + "']").remove();
			this.find("div.ui-tab-panel[title!='" + title + "']").remove();
			this.find("div.ui-tab-panel[title='" + title + "']").show();
		}
	},
	/**
	 * 设置容器大小
	 * @param {String} width
	 * @param {String} height
	 */
	"resize" : function(width, height) {
		var options = this._options;
		if(width) {
			options.width = width;
		}
		if(height) {
			options.height = height;
		}
		this.setHeightWidth(options);
	},
	/**
	 * 获得选项卡总数
	 * @return {Number}
	 */
	"getTabsCount" : function() {
		return this.find("ul.ui-tab-bg").elems[0].childElementCount;
	},
	/**
	 * 是否存在指定选项卡项
	 * @param {String} title
	 * @return  {Boolean}
	 */
	"exists" : function(title) {
		return this.find("li[txt='" + title + "']").elems.length > 0;
	}
}); 
/**
 * @class fastDev.Ui.DataGrid
 * @extends fastDev.Ui.Component
 * 表格控件，提供后台数据通过表格的方式进行展现，方便用户浏览数据，支持拖动列宽、排序、分页等常用操作<p>
 * 作者：袁刚
 *
 *		<div itype="DataGrid" initSource="../../data/griddata.json" pagePosition="none" showSeqColumn=true>
 *			<div width="10%" name="empno" text="员工工号"></div>
 *			<div width="12%" name="department" text="所属部门"></div>
 *			<div width="8%" name="isuse" text="是否可用"></div>
 *			<div width="15%" name="position" text="职位"></div>
 *			<div width="10%" name="pay" text="薪资"></div>
 *			<div width="10%" name="datesemployed" text="入职时间"></div>
 *			<div width="15%" name="birthday" text="生日" defaultValue="1985-01-01"></div>
 *		</div>
 */

fastDev.define("fastDev.Ui.DataGrid", {
	"extend" : "fastDev.Ui.Component",
	"alias" : "DataGrid",
	"_options" : {
		/**
		 * @cfg {JsonObject} columns
		 * 表格列配置信息
		 */
		"columns" : null,
		/**
		 * @cfg {Boolean} [allowResizeColumn=false]
		 * 是否允许调整列宽
		 */
		"allowResizeColumn" : false,
		/**
		 * @cfg {Boolean} [showCheckColumn=false]
		 * 是否显示CheckBox列
		 */
		"showCheckColumn" : false,
		/**
		 * @cfg {Boolean} [showRadioColumn=false]
		 * 是否显示RadioBox列
		 */
		"showRadioColumn" : false,
		/**
		 * @cfg {Boolean} [showSeqColumn=false]
		 * 是否显示序号列
		 */
		'showSeqColumn' : false,
		/**
		 * @cfg {Array[String]|Array[JsonObject]} toolBar
		 * 工具栏配置信息，参见{@link fastDev.Ui.ToolBar}Api
		 */
		"toolBar" : null,
		/**
		 * @cfg {String} [pagePosition="bottom"]
		 * 分页栏位置设置 
		 * top : 顶部放置分页栏
		 * bottom : 底部放置分页栏
		 * all : 顶部和底部都放置分页栏
		 * none :不带分页栏
		 */
		"pagePosition" : "bottom",
		/**
		 * @cfg {Array[JsonObject]} [pageSizeList]
		 * 分页栏中的下拉选项设置
		 */
		'pageSizeList' : null,
		/**
		 * @cfg {Number} [pageSize=10]
		 * 每页显示条数设置
		 */
		"pageSize" : 10,
		/**
		 * @cfg {Number} [pageCurrent=1]
		 * 当前页码设置
		 */
		"pageCurrent" : 1,
		/**
		 * @cfg {Array[JsonObject]} [pageItems]
		 * 分页工具栏的附加子项，常用于在分页对象上添加自定义功能按钮
		 */
		"pageItems" : null,
		/**
		 * @cfg {Array[String]|Array[JsonObject]} [pageBarItems]
		 * 分页工具栏自定义配置 
		 */
		"pageBarItems" : null,
		/**
		 * @cfg {Boolean} [allowAutoFillRow=true]
		 * 当数据行数不够默认的行数时，是否自动填充行
		 */
		"allowAutoFillRow" : true,
		/**
		 * @cfg {Boolean} [allowMoveColumn=false]
		 * 是否允许鼠标拖动列重新排列
		 */
		"allowMoveColumn" : false,
		/**
		 * @cfg {Boolean} [allowCellMerge=false]
		 * 是否允许值相同单元格合并
		 */
		"allowCellMerge" : false,
		/**
		 * @cfg {String} [sort="none"]
		 * 设定控件排序
		 * none : 不进行排序
		 * client : 开启客户端排序(单页排序)
		 * server : 开启服务端排序
		 */
		"sort" : "none",
		/**
		 * @cfg {String} [sortby="asc"]
		 * 设定控件排序规则 
		 * asc : 升序
		 * desc : 降序
		 */
		"sortby" : "asc",
		/**
		 * @cfg {String} [sortField]
		 * 排序依赖字段
		 */
		"sortField" : "",
		/**
		 * @cfg {String} [limitSortField]
		 * 限制使用排序字段,多个字段用逗号(,)分割
		 */
		"limitSortField" : "",
		/**
		 * @cfg {String} [rowDetail]
		 * 行内信息配置
		 */
		"rowDetail" : "",
		/**
		 * @cfg {Boolean} [allowRollback=false]
		 * 记录修改信息，用户取消用户对当前DataGrid数据的修改，值为false时，rollbackModify方法无效
		 */
		"allowRollback" : false,
		/**
		 * @cfg {String} [summaryTpl]
		 * 统计显示模板定义
		 */
		"summaryTpl" : null,
		/**
		 * @cfg {String} [action]
		 * 数据修改后的保存地址
		 */
		"action" : "",
		/**
		 * @cfg {String} [keyword]
		 * 主键列名
		 */
		"keyword" : "",
		/**
		 * @cfg {Boolean} [allowDelayLoad=false]
		 * 是否延时加载数据(大数据量不分页，或每页展示行数过大时使用)
		 */
		"allowDelayLoad" : false,
		/**
		 * @private
		 */
		"backup" : true,
		// 使用父类文档说明
		"enableDataProxy" : false,
		/**
		 * @event editCellLimit
		 * 行内编辑限定函数，返回true则当前单元格不能编辑
		 * @param {Number} rowIndex 行索引
		 * @param {Number} cellIndex 列索引
		 * @param {String} value 单元格的真实值
		 */
		"editCellLimit" : fastDev.noop,
		/**
		 * @event onAfterSave
		 * 保存数据后回调事件
		 */
		"onAfterSave" : fastDev.noop,
		/**
		 * @event onRowClick
		 * 单击行事件
		 * @param {Event} event 事件对象
		 * @param {Number} rowindex 行索引
		 * @param [JsonObject] data 包含当前行所有列数据的对象
		 */
		"onRowClick" : fastDev.noop,
		/**
		 * @event onRowDblClick
		 * 双击行事件
		 * @param {Event} event 事件对象
		 * @param {Number} rowindex 行索引
		 * @param [JsonObject] data 包含当前行所有列数据的对象
		 */
		"onRowDblClick" : fastDev.noop,
		/**
		 * @event onCellClick
		 * 单击列事件
		 * @param {Event} event 事件对象
		 * @param {Number} cellindex 列索引
		 * @param {String} content 当前列内容
		 */
		"onCellClick" : fastDev.noop,
		/**
		 * @event onCellDblClick
		 * 双击列事件
		 * @param {Event} event 事件对象
		 * @param {Number} cellindex 列索引
		 * @param {String} content 当前列内容
		 */
		"onCellDblClick" : fastDev.noop,
		/**
		 * @event onBeforeInitPageBar
		 * 分页栏初始化之前回调事件
		 * @param {JsonObject} info 分页信息对象
		 * @param {Number} info.page 当前页数
		 * @param {Number} info.total 总页数
		 * @param {Number} info.pageSize 每页显示行数
		 * @param {Number} info.records 总行数
		 */
		"onBeforeInitPageBar" : fastDev.noop,
		/**
		 * @event onAfterInitPageBar
		 * 分页栏初始化完成回调事件
		 * @param {fastDev.Ui.Toolbar} pageBar 分页栏对象
		 * @param {JsonObject} info 分页信息对象
		 * @param {Number} info.page 当前页数
		 * @param {Number} info.total 总页数
		 * @param {Number} info.pageSize 每页显示行数
		 * @param {Number} info.records 总行数
		 */
		"onAfterInitPageBar" : fastDev.noop,
		/**
		 * @event onBeforeRefresh
		 * 数据刷新前回调事件
		 */
		"onBeforeRefresh" : fastDev.noop,
		/**
		 * @event onSort
		 * 点击列头触发排序事件
		 * @param {Number} cellIndex 当前排序列索引
		 * @param {String} fieldName 当前排序列名称
		 */
		"onSort" : fastDev.noop
	},
	"_global" : {
		"rowspan" : 1,
		"summaryInfo" : null,
		"innerPage" : 1,
		"bodyScroll" : false
	},
	/**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
	"tplParam" : ["bodyWidth", "colWidthTpl", "colTitleTpl", "colSplitTpl", "colContentTpl", "moveCell", "width", "buildRowDetail", "colspan", "id"],
	// 使用父类文档说明
	"ready" : function(options, global) {
		// 初始化数据字段配置
		this.fields = [];
		// 内置用于保存修改信息字段，新增以及修改DataGrid数据时用
		this.fields.push({
			name : "gird_modify",
			type : "String"
		});

		if(options.showCheckColumn === true || options.showRadioColumn === true) {
			this.fields.push({
				name : "gird_checked",
				type : "Boolean",
				defaultValue : false
			});
			// 选择框互斥处理
			if(options.showCheckColumn === options.showRadioColumn) {
				options.showRadioColumn = false;
			}
		}
		
		global.displayJobs = [];
		global.logs = [];
		// 判断是否需要生成行内信息结构
		global.buildRowDetail = !!options.rowDetail;
		// 系统生成列占用宽度值
		global.systemWidth = this.parseQuickConfig(options, global);
		// 容器宽度
		// global.containerWidth = options.container.width();
		// global.containerHeight = options.container.height();
		// 获取DataGrid宽度配置，没有则取容器宽度
		// 初始化静态模板
		this.initTemplate(options.columns, this.calculateWidth(global.width, true));
		this.setTemplate(global);
	},
	// 使用父类文档说明
	"construct" : function(options, global) {
		var position, config,
			reqParams = {}, 
			pageSize = options.pageSize, 
			pagePosition = options.pagePosition;
			
		global.headerContainer = this.find("#header_" + options.id);
		global.dataContainer = this.find("#body_" + options.id);
		global.topToolbar = this.find("#top_toolbar_" + options.id);
		global.bottomToolbar = this.find("#bottom_toolbar_" + options.id);
			
		// 设定数据根节点
		this.dataset.setRoot("data");
		// 设置DataGrid的数据提交地址
		this.initProxy.setAction(options.action);

		// 初始化头部工具栏
		if(fastDev.isValid(options.toolBar)) {
			options.toolBar.container = global.topToolbar;
			global.toolBar = fastDev.create("Toolbar", options.toolBar);
		}

		// 初始化分页栏设置
		if(pagePosition !== "none") {
			config = this.buildPageBarConfig(options);
			if(pagePosition !== "all") {
				position = pagePosition;
			} else {
				position = "bottom";
				config.container = global.topToolbar;
				global.clonePageBar = fastDev.create("Toolbar", config);
			}

			config.container = position === "bottom" ? global.bottomToolbar : global.topToolbar;
			global.pageBar = fastDev.create("Toolbar", config);
			// 给代理添加一个任务解析分页信息

			this.initProxy.bindAfterLoad(fastDev.setFnInScope(this, this.initPageBar));

		} else {
			pageSize = options.pageSize = 999999;
		}
		reqParams.page = 1;
		reqParams.pageSize = pageSize;
		
		// 检测初次加载时是否需要传递排序信息
		if(options.sortField){
			reqParams.sortField = options.sortField;
			reqParams.sortBy = options.sortby;
		}
		

		if(!fastDev.isEmptyObject(this._global.summaryInfo)) {
			this.buildSummaryCol(options, global);
		}

		this.initProxy.setParam(reqParams);

	},
	// 使用父类文档说明
	"init" : function(options, global) {
		this.listeningScroll();
		this.initEditInline();
		this.initEvent(options, global);

	},
	// 使用父类文档说明
	"constructItems" : function() {
		var data, 
			reset = false,
			options = this._options, 
			global = this._global;
			
		// 开启了数据动态渲染功能时，会自动计算当前的显示数据块
		if(options.allowDelayLoad) {
			data = this.dataset.selectByPage(global.innerPage,50);
		}

		// 当数据小于每页显示行数设置时，开启自动填充空白数据会临时补充空白行至数据集中，界面渲染完成时删除临时数据
		if(options.allowAutoFillRow) {
			reset = this.addBlankRow(this._options.pageSize);
		}
		
		this.renderDynamicHtml(global.headerContainer.first(), "header");
		
		// 初始化排序
		if(options.sort !== "none") {
			this.initSortColumn(options);
		}
				
		global.bodyScroll = false;
		this.renderDynamicHtml(global.dataContainer,"body", data);
		
		if(reset) {
			this.removeBlankData();
		}
		
		global.lockRefresh = false;
		
		if(this.dataset.getSize() !== 0){
			// 调用渲染器渲染整体表格
			this.processingGrid();
		}
		
		// 计算内容部分高度并使表头适应当前高度(滚动条问题)
		this.caculateHeight(options.height);

		// 调整列宽功能
		if(this._options.allowResizeColumn === true) {
			this.initResizeColumn(global);
		}

		// 复选框全选功能
		if(this._options.showCheckColumn === true) {
			this.initSelectAll();
		}
	},
	/**
	 * 初始化组件静态Dom事件
	 * @private
	 */
	"initEvent" : function(options, global) {
		var trMouseover, entryComplete, dataGridBodyClick, dataGridBodyDblClick;

		if(!fastDev.isNoop(options.onCellClick) || !fastDev.isNoop(options.onRowClick) || global.buildRowDetail) {
			dataGridBodyClick = fastDev.setFnInScope(this, this.dataGridBodyClick);
			global.dataContainer.bind("click", dataGridBodyClick);

		}

		if(!fastDev.isNoop(options.onCellDblClick) || !fastDev.isNoop(options.onRowDblClick)) {
			dataGridBodyDblClick = fastDev.setFnInScope(this, this.dataGridBodyDblClick);
			global.dataContainer.bind("dblclick", dataGridBodyDblClick);
		}

		// 鼠标滑过行高亮事件
		trMouseover = fastDev.setFnInScope(this, this.trMouseoverHandle);
		// 行内编辑输入结束事件
		entryComplete = fastDev.setFnInScope(this, this.entryCompleteHandle);
		global.dataContainer.bind("mouseover", trMouseover).bind("keyup", entryComplete);
	},
	/**
	 * 回车结束行内编辑
	 * @private
	 */
	"entryCompleteHandle" : function(event) {
		if(event.keyCode === 13) {
			this.writeBackCell(true);
		}
	},
	/**
	 * 鼠标滑过行高亮
	 * @private
	 */
	"trMouseoverHandle" : function(event) {
		var trDom = fastDev(event.target).parents("tr:eq(0)");
		
		if(trDom.hasClass("ui-datagrid-row")) {
			this._global.dataContainer.find("tr.ui-datagrid-row-selected").removeClass("ui-datagrid-row-selected");
			trDom.addClass("ui-datagrid-row-selected");
		}
	},
	/**
	 * 增加空白行
	 * @private
	 */
	"addBlankRow" : function(pagesize) {
		
		var field, i = 0 ,
			data = { "inner_invalid" : true },
			length = this.dataset.getSize();
		
		if(length === pagesize || pagesize === 999999) {
			return false;
		}
		
		
		for( ; field = this.fields[i] ; i++){
			data[ field.name ] = "";
		}

		for( i = length ; i < pagesize; i++) {
			this.dataset.insert(data, false, false);
		}
		return true;
	},
	/**
	 * 删除补充空白行产生的临时数据
	 * @private 
	 */
	"removeBlankData" : function(){
		this.dataset.rollback();	
	},
	/**
	 * 初始化组件模板
	 * @param {Array[Jsonobject]} columns 列配置信息数组
	 * @param {Number} effectiveWidth 各列可用总宽度
	 * @private
	 */
	"initTemplate" : function(columns, effectiveWidth) {
		var len, column, hidden,
			i = 0,
			cls = "",
			options = this._options, 
			global = this._global,
			// 调整列宽配置
			allowResizeColumn = options.allowResizeColumn,
			// 第一列的样式有所不同
			firstTdCls = " ui-datagrid-cell-special ui-datagrid-cell-first",
			// 宽度限制列模板
			colWidthTplList = [],
			// 内容列模板
			colContentTplList = [],
			// 列宽调整的感应区域模板
			colSplitTplList = [],
			// 最后一个显示列索引
			index = 0,
			// 列数，IE6下隐藏列不占列索引
			colNum = 0;
			// 剩余宽度
			global.surplus = effectiveWidth;
			
		// 如果配置了多表头，则从配置列中寻找真实的列配置
		if(this.buildTitleTpl(columns.slice(0)) === true) {
			this.correctColumns(columns);
		}
		// 寻找最后一个显示列索引值，在所有列宽加起来小于总宽的情况下，做宽度补足
		index = this.getRepairColIndex(columns);
		// 生成数据行展现模板
		for(; column = columns[i]; i++) {
			// 如果配置为隐藏列则设置对应样式
			hidden = column.hidden === true ? "display:none" : "";
			// 处理IE6、7下隐藏列不占索引位置问题
			
			colNum++;
			
			if(hidden && !(fastDev.Browser.isIE8 || fastDev.Browser.isIE9 || fastDev.Browser.isIE10)){
				colNum--;
			}
			// 计算宽度限制列的宽度
			// 计算最后一个显示列宽度时会将剩余宽度传入与当前宽度进行比较
			colWidthTplList.push(this.buildColWidthTpl(column, effectiveWidth, i === index ? global.surplus : 0));
			// 设置第一个显示列的样式
			if(firstTdCls && !hidden) {
				cls = firstTdCls;
				firstTdCls = "";
			}
			colContentTplList.push(this.parseColumn(column, cls, hidden));
			// 如果开启了列宽调整功能，则生成该功能感应区域
			// 感应区域个数为显示列个数-1
			if(allowResizeColumn === true && i !== 0 && column.hidden !== true) {
				colSplitTplList.push('<div class="ui-datagrid-splitter" id="' + i + '"style="height:23px;"></div>');
			}
		}
		// 配置了行内信息时，记录行内信息所需要合并的列数
		if(global.buildRowDetail) {
			global.colspan = colNum || len;
		}

		// 保存各部分模板
		fastDev.apply(global, {
			colWidthTpl : colWidthTplList.join(""),
			colSplitTpl : colSplitTplList.join(""),
			colContentTpl : colContentTplList.join("")
		});
	},
	/**
	 * Grid显示处理
	 * @private
	 */
	"processingGrid" : function(execCellMerge) {
		var handle, 
			i = 0, 
			displayJobs = this._global.displayJobs;
			
		for(; handle = displayJobs[i++];) {
			handle.call(this);
		}
		
		// 表格融合功能
		if(execCellMerge !== false && this._options.allowCellMerge === true) {
			this.mergeCell();
		}
		
		fastDev.Core.ControlBus.compile(null, this.elems);
	},
	/**
	 * 刷新数据
	 * @param {JsonObject} config 刷新参数
	 * @private
	 */
	"initRefresh" : function(config) {
		var 
			options = this._options, 
			global = this._global;
			
		if( global.lockRefresh ){
			return;
		}else{
			global.lockRefresh = true;
		}
			
		
		// 处理服务端排序
		if(options.sort === "server" && options.sortField) {
			this.initProxy.addParam({
				sortField : options.sortField,
				sortBy : options.sortby
			});
		}
		
		// 保证 initRefresh 方法被外部调用时分页参数不会丢失
		if(config && config.urlParam){
			config.urlParam.page = config.urlParam.page || 1;
			config.urlParam.pageSize = config.urlParam.pageSize || options.pageSize;
		}
		
		if(fastDev.isFunction(options.onBeforeRefresh)){
			options.onBeforeRefresh.call(this);
		}

		fastDev.Ui.DataGrid.superClass.initRefresh.call(this, config);

		if(options.sort === "server" && global.sortHandle) {
			global.queue.add(global.sortHandle);
		}
	},
	/**
	 * 列/行单击事件句柄
	 * @param {Event} event
	 * @private
	 */
	"dataGridBodyClick" : function(event) {
		var 
			dom = fastDev(event.target), 
			options = this._options, 
			type = event.type;
		
		this.fireBodyEvent(dom, options, event, type, type === "click" ? "Click" : "DblClick");
	},
	/**
	 * 列/行双击事件句柄
	 * @param {Event} event
	 * @private
	 */
	"dataGridBodyDblClick" : function(event) {
		this.dataGridBodyClick(event);
	},
	/**
	 * 执行单击/双击事件
	 * @private
	 */
	"fireBodyEvent" : function(dom, options, event, type, method) {
		if(!fastDev.isNoop(options["onCell" + method])) {
			this.execCellEvent(dom, options, event, type);
		}

		if(!fastDev.isNoop(options["onRow" + method])) {
			this.execRowEvent(dom, options, event, type);
		}

		if(this._global.buildRowDetail && method === "Click" && /ui-datagrid-node-(?:open|close)/.test(event.target.className)) {
			this.execRowDetailEvent(dom, options);
			fastDev.Event.stopBubble(event);
		}
	},
	/**
	 * 执行列的单击/双击事件
	 * @private
	 */
	"execCellEvent" : function(dom, options, event, type) {
		var value, cellIndex, 
			td = dom.parents("td:eq(0)");
		
		if(!td.isEmpty()) {
			// 获取当前列数据
			value = dom.attr("newValue") || dom.attr("value");
			// 获取当前列的索引值
			cellIndex = td.prop("cellIndex");
			// 触发用户绑定事件
			options["onCell" + (type === "click" ? "Click" : "DblClick")].call(this, event, cellIndex, value);
		}
	},
	/**
	 * 执行行的单击/双击事件
	 * @private
	 */
	"execRowEvent" : function(dom, options, event, type) {
		var data, rowIndex,
			tr = dom.parents("tr:eq(0)");
		
		if(!tr.isEmpty()) {
			// 获取当前行数据
			data = this.getValueImpl(tr);
			// 获取当前行索引值
			rowIndex = tr.prop("rowIndex");
			// 触发用户绑定事件
			options["onRow" + (type === "click" ? "Click" : "DblClick")].call(this, event, rowIndex, data);
		}
	},
	"execRowDetailEvent" : function(dom, options) {
		var data, className,
			tr = dom.parents("tr:eq(0)");
		
		if(!tr.isEmpty()) {
			// 获取当前时间目标样式
			className = dom.getClass();
			// 获取当前行数据
			data = this.getValueImpl(tr);
			// 行内信息的展开与收缩处理
			if(/ui-datagrid-node/.test(className)) {
				this.processRowDetail(className, dom, tr, options, data);
			}
		}
	},
	/**
	 * 获取行对象
	 * @private
	 */
	"getTr" : function(elem) {
		if(fastDev.isElement(elem)) {
			elem = elem.tagName === "TR" ? fastDev(elem) : fastDev(elem).parents("tr:eq(0)");
		} else if(fastDev.isDomObject(elem) || fastDev.isComponent(elem)) {
			return this.getTr(elem.elems[0]);
		} else {
			elem = [];
			this._global.dataContainer.find("input[name='dg_choose']:checked").each(function(idx, input){
				elem.push(fastDev(input).parents("tr:eq(0)").elems[0]);
			});
		}
		return fastDev(elem);
	},
	/**
	 * 不传参是获取选中数据，传入事件源的话，如果事件源Element是在表格行内则可获得那一行的数据
	 * @param {Element} [elem] 事件发生所在元素
	 */
	"getValue" : function(elem) {
		var 
			i = 0,
			values = [], 
			elems = this.getTr(elem).elems;
			
		for(; elem = elems[i]; i++) {
			values.push(this.getValueImpl(fastDev(elem)));
		}
		
		return values;
	},
	/**
	 * 根据指定行索引获取行数据
	 * @param {Number} index 索引值，从1开始
	 */
	"getValueByIndex" : function(index) {
		return this.getValueImpl(this._global.dataContainer.find("tr:eq(" + index + ")"));
	},
	/**
	 * 根据指定文本查找行数据
	 * @param {String} text 文本
	 * @param {String} [fieldname] 数据列名
	 * @return {Array[JsonObject]}
	 */
	"getValueByText" : function(text, fieldname) {
		return this.dataset.fuzzySelect(text, fieldname);
	},
	/**
	 * 获得指定行对象的数据
	 * @private
	 */
	"getValueImpl" : function(dom) {
		var td, div, value, column, realCellIndex, targetTr, targetTds, endLoop,
			i = 0, 
			data = {},
			tds = dom.children("td").elems,
			columns = this._options.columns;
		
		for(; column = columns[i]; i++) {
			
			if(!column.name) {
				continue;
			}
			
			targetTr = dom;
			td = fastDev(tds[i]);
			
			if( this._options.allowCellMerge && (realCellIndex= td.attr("realCellIndex")) && (+realCellIndex !== i) ){
				while(targetTr = targetTr.prev()){
					endLoop = false;
					targetTds = targetTr.find("td").elems;
					for(var j = 0, len = targetTds.length ; j < len; j++ ){
						td = fastDev(targetTds[j]);
						if(+td.attr("realCellIndex") === i){
							endLoop = true;
							break;
						}
					}
					
					if(endLoop){
						break;
					}
				}
				tds.splice( 0, 0, undefined);
			}
			
			div = td.find("div");
			switch(column.itype){
				case "checkbox" :
				case "radio":
					value = td.find("[name='dg_choose']").prop("checked");
					break;
				case "seq" :
					value = div.getText();
					break;
				case "control":
					var id = div.prop("id");
					value = fastDev.getInstance(id).getValue();
					break;
				default:
					value = div.attr("newValue");
					value = !fastDev.isValid(value) ? div.attr("value") : value;
			}
		
			data[column.name] = value;
		}
		return data;
	},
	/**
	 * 获取当前页所有数据
	 * @return {Array[Jsonobject]}
	 */
	"getAllValue" : function() {
		var i = 0, values = [], len = this.dataset.getSize(),
			trList = this._global.dataContainer.find("tr:gt(0)").elems;
			
		for(; i < len; i++) {
			values.push(this.getValueImpl(fastDev(trList[i])));
		}
		return values;
	},
	/**
	 * 新增一行数据(必须配置keyword属性才可使用)
	 * @param {JsonObject} data 行数据
	 * @param {Boolean} [modify=true] 是否添加修改样式
	 * @param {Number} index 数据行目标位置索引
	 * @param {Boolean} renderer 是否立即更新界面显示
	 */
	"addRow" : function(data, modify, index, renderer) {
		if(!this.writeBackCell()){
			fastDev.alert("当前行内编辑还未结束", "信息", "tip");
			return;
		}
		
		data = data || {};
		data[this._options.keyword] = data[this._options.keyword] || "grid_keyword_" + fastDev.getID();
		data.gird_modify = modify !== false ? "all" : "";

		this.dataset.insert(data);
		this.dataset.changeIndex("last", fastDev.isNumber(index) ? index : "last");
		
		if(renderer !== false) {
			this.renderDynamicHtml(this._global.dataContainer,"body");
			this.processingGrid();
		}
	},
	/**
	 * 新增多行行数据(必须配置keyword属性才可使用)
	 * @param {Array[JsonObject]} data 行数据
	 * @param {Boolean} [modify=true] 是否添加修改样式
	 * @param {Number} index 数据行目标位置索引
	 */
	"addRows" : function(data, modify, index) {
		if(!fastDev.isArray(data)) {
			data = [data];
		}
		var i = 0, renderer = false, len = data.length;

		for(; i < len; i++) {
			if(i === len - 1) {
				renderer = true;
			}
			this.addRow(data[i], modify, index++, renderer);
		}
		return this;
	},
	/**
	 * 增加一行数据至表格首行(必须配置keyword属性才可使用)
	 * @param {JsonObject} data 行数据
	 * @param {Boolean} [modify=true] 是否添加修改样式
	 */
	"addFirstRow" : function(data, modify) {
		this.addRow(data, modify, 0);
	},
	/**
	 * 增加一行数据至表格末行(必须配置keyword属性才可使用)
	 * @param {JsonObject} data 行数据
	 * @param {Boolean} [modify=true] 是否添加修改样式
	 */
	"addLastRow" : function(data, modify) {
		this.addRow(data, modify);
	},
	/**
	 * 修改一行数据((必须配置keyword属性才可使用))
	 * @param {JsonObject} data 行数据
	 * @param {Boolean} [modify=true] 是否添加修改样式
	 * @param {Boolean} renderer 是否立即显示修改内容
	 */
	"updateRow" : function(newdata, modify, renderer) {
		// 为防止当前正处于行内编辑状态导致数据丢失，先调用数据回写
		if(!this.writeBackCell()){
			fastDev.alert("当前行内编辑还未结束", "信息", "tip");
			return;
		}
		
		var key, olddata, gird_modify,
			// 得到当前主键列名
			keywordName = this._options.keyword, 
			// 得到当前数据主键值
			keyword = newdata[keywordName];
		
		modify = modify === true;
		// 删除数据主键，因为数据集中的主键列只读
		delete newdata[keywordName];
		
		// 如果数据主键无效则当次数据更新无效
		if(!fastDev.isValid(keyword)) {
			return;
		}
		
		// 根据当前数据主键查询数据集中地记录
		olddata = this.dataset.select(function(index, data){
			return data[keywordName] + "" === keyword + "";
		})[0];
		
		gird_modify = (olddata && olddata.gird_modify) || "";
		
		// 如果数据集中不存在当前主键值得数据则当前数据更新无效
		if(!olddata){
			return;
		}
		
		// 比对数据修改前与修改后的状态值，生成新的状态值
		if(modify){
			for(key in newdata){
				if(!RegExp("all|" + key).test(gird_modify)) {
					gird_modify += gird_modify ? key + "," : "," + key + ",";
				}
			}
		}
		// 保存数据状态值
		newdata.gird_modify = gird_modify;
		
		// 更新数据集
		this.dataset.update(function(index,data){
			if(data[keywordName] + "" === keyword + ""){
				return newdata;
			}
		});
		// 如果更新数据后补需要立即显示到界面，则放弃重新生成
		if(renderer === false){
			return;
		}
		// 重新生成数据界面
		this.renderDynamicHtml(this._global.dataContainer,"body");
		// 重新处理数据界面
		this.processingGrid();
		return this;
	},
	/**
	 * 修改多行数据((必须配置keyword属性才可使用))
	 * @param {Array[JsonObject]} data 行数据数组
	 * @param {Boolean} [modify=true] 是否添加修改样式
	 */
	"updateRows" : function(data, modify) {
		if(!fastDev.isArray(data)) {
			data = [data];
		}
		var i = 0, renderer = false, len = data.length;

		for(; i < len; i++) {
			if(i === len - 1) {
				renderer = true;
			}
			this.updateRow(data[i], modify, renderer);
		}
		
		return this;
	},
	/**
	 * 删除一行数据(必须配置keyword属性才可使用)
	 * @param {String} keyword 主键值
	 */
	"delRow" : function(keyword, renderer) {
		if(!this.writeBackCell()){
			fastDev.alert("当前行内编辑还未结束", "信息", "tip");
			return;
		}
		
		var keywordName = this._options.keyword;
		
		if(fastDev.isValid(keyword)) {
			if(keywordName) {
				this.dataset.remove(function(index,data){
					return data[keywordName] === keyword;
				});
				this.addLog("delete", keywordName, keyword);
			}
		}
		
		if(renderer !== false) {
			this.renderDynamicHtml(this._global.dataContainer,"body");
			this.processingGrid();
		}
		
		return this;
	},
	"delRows" : function(keyword) {
		var keys = (keyword || "").split(","), renderer = false;
		for(var i = 0, len = keys.length; i < len; i++) {
			if(i === len - 1) {
				renderer = true;
			}
			this.delRow(keys[i], renderer);
		}
		return this;
	},
	/**
	 * 删除当前所有数据(必须配置keyword属性才可使用)
	 */
	"clean" : function() {
		var record, i = 0, 
			records = this.dataset.select(),
			keywordName = this._options.keyword;
			
		if(fastDev.isValid(keywordName)) {
			for(; record = records[i]; i++) {
				this.addLog("delete", keywordName, record[keywordName]);
			}
			this.dataset.clean();
		}
		this.renderDynamicHtml(this._global.dataContainer,"body");
		this.processingGrid();
	},
	/**
	 * 删除选中行数据
	 */
	"delSelectedRow" : function() {
		if(!this.writeBackCell()){
			fastDev.alert("当前行内编辑还未结束", "信息", "tip");
			return;
		}
		var row, elem, keyword, keywordName, 
			elems = this._global.dataContainer.find("[name='dg_choose']:checked").elems;
		
		while( elem = elems.shift()) {
			keywordName = this._options.keyword;
			row = fastDev(elem).parents("tr:eq(0)");
			keyword = this.getValueImpl(row)[keywordName];
			
			this.dataset.remove(this.removeData,keywordName,keyword);
			
			if(/grid_keyword_/.test(keyword)) {
				continue;
			}
			this.addLog("delete", keywordName, keyword);
		}
		this.renderDynamicHtml(this._global.dataContainer,"body");
		this.processingGrid();
		return this;
	},
	"removeData" : function(index, data, keywordname, keyword){
		return data[keywordname] === keyword;
	},
	/**
	 * 回滚当前未保存值至上一次加载状态(需配置allowRollback属性为true)
	 */
	"rollbackModify" : function() {
		var reset;
		
		if(!this.writeBackCell()){
			fastDev.alert("当前行内编辑还未结束", "信息", "tip");
			return;
		}
		
		this.dataset.rollback();
		
		if(this._options.allowAutoFillRow) {
			reset = this.addBlankRow(this._options.pageSize);
		}
		
		this.renderDynamicHtml(this._global.dataContainer,"body");
		
		if(reset) {
			this.removeBlankData();
		}
		
		this.processingGrid();
		this._global.logs = [];
	},
	/**
	 * 增加一条数据操作日志
	 * @private
	 */
	"addLog" : function(oper, keywordName, keyword, data) {
		var log = {};
		
		log.oper = oper;
		fastDev.each(data, function(key, value) {
			log[key] = value;
		});
		
		log[keywordName] = keyword;
		this._global.logs.push(log);
	},
	/**
	 * 保存当前修改数据至服务器(需配置action属性)
	 */
	"saveToServer" : function() {
		if(!this.writeBackCell()){
			fastDev.alert("当前行内编辑还未结束", "信息", "tip");
			return;
		}
		
		var data = this.getAllModifyInfo();
		
		this.initProxy.save(data, this._options.onAfterSave, true, true);
		this._global.logs = [];
		this.refreshData();
	},
	/**
	 * 获取当前修改值
	 * @param {Element} elem 数据容器
	 * @param {JsonObject} rowdata 行数据对象
	 * @param {Array{JsonObject}} columns 列配置
	 * @private
	 */
	"getModify" : function(idx, elem, rowdata, columns) {
		var 
			cell = fastDev(elem), 
			name = columns[cell.parents("td:eq(0)").prop("cellIndex")].name, 
			value = cell.attr("newValue");
			
		value = !fastDev.isValid(value) ? cell.attr("value") : value;
		rowdata[name] = value;
	},
	/**
	 * 获取当前数据修改信息(自行提交DataGrid修改信息时使用)
	 */
	"getAllModifyInfo" : function(reset) {
		var log, row, rows, rowdata, columns, keyword,  changeCells, keywordName, 
			i = 0, 
			logs = this._global.logs,
			len = logs.length;
		
		if(reset === true) {
			for(; log = logs[i]; i++) {
				if(/insert|update/.test(log.oper)) {
					logs.splice(i--, 1);
				}
			}
		}

		rows = this._global.dataContainer.find("tr").elems;
		
		for( i = 0; row = rows[i]; i++) {
			keywordName = this._options.keyword;
			rowdata = this.getValueImpl(fastDev(row));
			keyword = rowdata[keywordName];
			
			if(/grid_keyword_/.test(keyword)) {
				this.addLog("insert", keywordName, keyword, rowdata);
				continue;
			}
			
			changeCells = fastDev(row).find(".ui-datagrid-change-cell");
			columns = this._options.columns;
			
			if(changeCells.hasElem()) {
				rowdata = {};
				fastDev(row).find(".ui-datagrid-change-cell").each(this.getModify, rowdata, columns);
				this.addLog("update", keywordName, keyword, rowdata);
			}
		}
		return this._global.logs;
	},
	/**
	 * 根据值取消选中行，若值为空，清除所有选中行
	 * @param {String} [values] 某列数据,可多个格式为(value1,value2)
	 */
	"cleanSelected" : function(values) {
		if(!fastDev.isValid(values)) {
			this._global.dataContainer.find("[name='dg_choose']:checked").prop("checked", false);
		} else {
			this.findChooseBox(values).prop("checked", false);
		}
	},
	/**
	 * 根据值设置选中行(如果值不是唯一，选中可能会有误)
	 * @param {String} values 某列数据,可多个格式为(value1,value2)
	 */
	"setSelected" : function(values) {
		this.findChooseBox(values).prop("checked", true);
	},
	/**
	 * 根据值禁用选择框
	 * @param {String} values 某列数据,可多个格式为(value1,value2)
	 */
	"disableChooseBox" : function(values) {
		this.findChooseBox(values).prop("disabled", true);
	},
	/**
	 * 根据值启用选择框
	 * @param {String} values 某列数据,可多个格式为(value1,value2)
	 */
	"enableChooseBox" : function(values) {
		this.findChooseBox(values).removeProp("disabled");
	},
	/**
	 * 根据指定值查找当前行选择框
	 * @param {String} values 某列数据,可多个格式为(value1,value2)
	 * @private
	 */
	"findChooseBox" : function(values) {
		var selector = "div ", conds = [];
		
		values = values.split(",");
		
		while(values[0]) {
			conds.push("[value='" + values.shift() + "']");
		}
		
		selector += conds.join(",");
		return this._global.dataContainer.find(selector).parents("tr:eq(0)").find("[name='dg_choose']");
	},
	/**
	 * @param {Element} elem
	 * @param {String} type
	 * @param {String} method
	 * @private
	 */
	"move" : function(elem, type, method) {
		var target, domList = this.getTr(elem).elems;
		
		if(type === "next") {
			domList.reverse();
		}
		
		fastDev.each(domList, function(i, dom) {
			dom = fastDev(dom);
			target = dom[type]();
			if(type === "prev" && target.prop("rowIndex") === 0) {
				return;
			}
			dom[method](target);
			if(fastDev.Browser.isIE6) {
				dom.find("[name='dg_choose']").prop("checked", true);
			}
		});
	},
	/**
	 * 将选中行向上移动
	 * @param {Object} elem
	 */
	"moveUp" : function(elem) {
		this.move(elem, "prev", "insertBefore");
	},
	/**
	 * 将选中行向下移动
	 * @param {Object} elem
	 */
	"moveDown" : function(elem) {
		this.move(elem, "next", "insertAfter");
	},
	/**
	 * 计算DataGrid各部分宽度值
	 * @param {Number} width
	 * @private
	 */
	"calculateWidth" : function(width, inner) {
		var ret, elem, elems, limit, index, column, columns, effectiveWidth,
			i = 0,
			columnWidths = [], 
			colWidthTplList = [], 
			options = this._options, 
			global = this._global;
			
		// DataGrid总宽度
		options.width = fastDev.Util.StringUtil.stripUnits(width, global.width);
		// 第二层容器的边框宽度2
		global.bodyWidth = effectiveWidth = options.width - 2;
		// 配置列可用宽度为总宽度-内置功能列宽度-纵向滚动条预留宽度
		// effectiveWidth = global.bodyWidth - global.systemWidth;

		if(inner === true) {
			return effectiveWidth;
		}
		// 重新计算列宽
		columns = options.columns;
		limit = columns.length;
		index = this.getRepairColIndex(columns);
			
		global.surplus = effectiveWidth;
		
		for(; column = columns[i]; i++) {
			ret = this.buildColWidthTpl(column, effectiveWidth, i === index ? global.surplus : 0, true);
			columnWidths.push(ret[0]);
			colWidthTplList.push(ret[1]);
		}
		
		global.colWidthTpl = colWidthTplList.join("");
		// 重设宽度限制列宽
		elems = this.find("tr[name='colwidthlimit'] > td").find("td").elems;
		
		for( i = 0; elem = elems[i]; i++) {
			// 表头和表内容的宽度限制列都需要更改
			index = i >= limit ? i - limit : i;
			fastDev(elem).width(columnWidths[index]);
		}
	},
	/**
	 * 计算DataGrid内容部分高度值
	 * @param {Number} height
	 * @private
	 */
	"caculateHeight" : function(height) {
		var bodyHeight,
			options = this._options, 
			global = this._global; 
			//bodyHeight = options.height = fastDev.Util.StringUtil.stripUnits(height, global.height);
			
		// DataGrid内容部分高度 = 总高度 - 标题行高度 - 头部工具栏高度 - 底部工具栏高度
		bodyHeight = parseInt(options.height, 10) - (global.headerContainer.height() + global.topToolbar.height() + global.bottomToolbar.height());
		// 重设DataGrid内容部分高度
		global.dataContainer.css("height", bodyHeight);
		// 修改标题行宽度以适应DataGrid内容显示不全时出现的滚动条占位问题
		this.adaptWidth(global, bodyHeight);
		global.bodyHeight = bodyHeight;
	},
	/**
	 * 重设DataGrid宽度
	 * @param {Number} width 目标宽度值
	 */
	"setWidth" : function(width) {
		var 
			options = this._options,
			global = this._global;
		
		width = options.width = fastDev.Util.StringUtil.stripUnits(width, global.width);
		// 重设DataGrid总宽度
		fastDev(this.elems).width(width);
		// 重设DataGrid二层容器宽度
		fastDev(this.elems).first().width(width - 2).children().width(width - 2);
		// 重设DataGrid限制列宽度
		this.calculateWidth(width);
		// 重设DataGrid标题表格总宽度
		global.headerContainer.find("table").width(width - 2);
		
		if(fastDev.Browser.isIE6 || fastDev.Browser.isIE7) {
			// 重设DataGrid内容表格总宽度
			global.dataContainer.find("table").width(width - 2);
		}
		
		return this;
	},
	/**
	 * 重设DataGrid高度
	 * @param {Number} height 目标高度值
	 */
	"setHeight" : function(height) {
		this.caculateHeight(height);
		return this;
	},
	/**
	 * 重设DataGrid宽高
	 * @param {Number} width 目标宽度值
	 * @param {Number} height 目标高度值
	 */
	"resize" : function(width, height) {
		return this.setWidth(width).setHeight(height);
	},
	/**
	 * 静态查询当前页显示数据
	 * @param {String} text 文本
	 * @param {String} [fieldname] 数据列名
	 */
	"filterData" : function(text, fieldname) {
		var data = this.dataset.fuzzySelect(text, fieldname, true);
		this.renderDynamicHtml(this._global.dataContainer,"body", data);
	},
	/**
	 * 获取当前有效记录数(填充空行数不计算在内)
	 */
	"getSize" : function(){
		return this.dataset.getSize();
	}
});
fastDev.apply(fastDev.Ui.DataGrid, {
	"setTemplate" : function(global) {
		this.template = [
			'<div class="ui-datagrid" style="width: #{width}px;">', 
				'<div class="ui-datagrid-panel ui-datagrid-box" style="width:#{bodyWidth}px;">', 
					'<div name="ui-top-toolbar" class="ui-pagebar-top" id="top_toolbar_#{id}"></div><div style="display:none"></div>', 
					'<div class="ui-datagrid-header" style="width: #{bodyWidth}px;" id="header_#{id}">', 
						'<div name="header">', 
							'<tpl dynamic name=header>', 
								'<table class="ui-datagrid-table" cellspacing="0" cellpadding="0">', 
									'<tbody>', 
										'<tr name="colwidthlimit">',
											'#{colWidthTpl}',
										'</tr>', 
										'#{colTitleTpl}', 
									'</tbody>', 
								'</table>', 
							'</tpl>', 
						'</div>', 
						'<div class="ui-datagrid-splitters" id="splitters_#{id}">',
							global.colSplitTpl, 
						'</div>', 
					'</div>', 
					'<div class="ui-datagrid-body" style="width: #{bodyWidth}px;height:100%;" id="body_#{id}">', 
						'<tpl dynamic name=body>', 
							'<table class="ui-datagrid-table" cellspacing="0" cellpadding="0">', 
								'<tbody>', 
									'<tr name="colwidthlimit">',
										'#{colWidthTpl}',
									'</tr>', 
									'<tpl each>', 
										'<tr class="ui-datagrid-row', 
											'<tpl if( rowid & 1)>', 
												' ui-datagrid-row-alt', 
											'</tpl>', 
											'">',
											global.colContentTpl, 
										'</tr>', 
										'<tpl if(#{buildRowDetail})>', 
											'<tr style="display:none"><td class="ui-datagrid-cell" colSpan="#{colspan}"><div class="ui-datagrid-cell-content"></div></td></tr>', 
										'</tpl>', 
									'</tpl>', 
								'</tbody>', 
							'</table>', 
						'</tpl>', 
					'</div>', 
					'<div class="ui-datagrid-count" style="width: #{bodyWidth}px; display:none;" id="count_#{id}"></div>', 
					'<div name="ui-bottom-toolbar" class="ui-pagebar-bottom" id="bottom_toolbar_#{id}"></div>', 
				'</div>', 
			'</div>'
		];
	}
});
/**
 * @class fastDev.Ui.DataGrid.Column
 * DataGrid子类，用于定义列信息以功能，如:标题、列宽、列渲染器、列类型、列模板等<p>
 * 作者：袁刚
 */

/**
 * @cfg {String} text 
 * 该属性用于设定列标题，描述当前列内容
 */

/**
 * @cfg {String} name 列名
 * 该属性用于映射数据，所以需要与数据键保持一致
 */

/**
 * @cfg {String} [width]
 * 该属性用于设定列宽度
 */

/**
 * @cfg {Function} [renderer]
 * 该属性用于对当前列进行个性化设置
 */

/**
 * @cfg {String} [defaultValue]
 * 该属性用于设置在没有数据时的显示值
 */

/**
 * @cfg {String} [itype=normal] 列渲染器
 * 该属性用于设置当前列类型，可用值(normal、template、control、boolean、number、date)
 */

/**
 * @cfg {String} [tpl]
 * 当列类型为template时，该设置起效
 */

/**
 * @cfg {String} [trueText]
 * 当列类型为boolean时，该设置起效，用于设置值为true时的显示值
 */

/**
 * @cfg {String} [falseText]
 * 当列类型为boolean时，该设置起效，用于设置值为false时的显示值
 */

/**
 * @cfg {String} [controlType]
 * 当列类型为control时，该设置起效，用于设置用来显示值的控件类型
 */

/**
 * @cfg {String} [format]
 * 当列类型为number/date时，该设置起效，用于设置格式化描述
 */

/**
 * @cfg {String} [editby]
 * 用于定义行内编辑时当前列的编辑控件
 */

/**
 * @cfg {String} [idColumn]
 * 当行内编辑控件为Select或SelectTree时，需要同时提供显示值和隐藏值才能正确编辑列值，当前属性就是用来指定当前值所对应的ID值存储列用的
 */

/**
 * @cfg {Boolean} [hidden]
 * 设定当前列初始状态为是否隐藏
 */

/**
 * @cfg {String} [summaryType]
 * 设定当前列的统计类型 可用值(count、sum、avg、max、min)
 */

/**
 * @cfg {String} [summaryText]
 * 设定当前列的统计值之前的描述文字
 */

/**
 * @cfg {Function} summaryRenderer
 * 用于个性化显示统计信息
 */

/**
 * @cfg {String} titleCls
 * 用于设定标题列的className
 */

/**
 * @cfg {String} titleStyle
 * 用于设定标题列的style 值参照标签的style属性书写
 */

/**
 * @cfg {String} [align=left]
 *  用于设定单元格文本的对齐方式
 */

/**
 * @cfg {Function} [convert]
 *  用于直接转换数据，不同于渲染器的是，渲染器不改变数据只改变数据展现形态，此配置会改变数据
 */

fastDev.apply(fastDev.Ui.DataGrid, {
	/**
	 * 解析DataGrid配置生成内置功能列
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"parseQuickConfig" : function(options, global) {
		var 
			dataColStart = 0,
			columns = options.columns, 
			length = columns.length;

		// 如果配置了行内信息，则生成展开/收缩图标列配置
		if(global.buildRowDetail) {
			columns.splice(0, 0, {
				"itype" : "template",
				"width" : "30px",
				"tpl" : '<tpl if(!item["inner_invalid"])><div class="ui-datagrid-node-close"></div></tpl>'
			});
		}

		// 如果配置了复选框列，则生成复选框列配置
		// 同时配置复选框列与单选框列时，只显示复选框列
		if(options.showCheckColumn) {
			// 增加内置列-复选框列
			columns.splice(0, 0, {
				"name" : "dg_checked",
				"itype" : "checkbox",
				"width" : "30px"
			});
		} else if(options.showRadioColumn) {
			// 如果配置了单选框列，则生成单选框列配置
			columns.splice(0, 0, {
				"name" : "dg_checked",
				"itype" : "radio",
				"width" : "30px"
			});
		}
		// 如果配置了行号列，则生成行号列配置
		if(options.showSeqColumn) {
			// 增加内置列-序号列
			columns.splice(0, 0, {
				"name" : "dg_seq",
				"itype" : "seq",
				"width" : "30px",
				"tpl" : "'+rowid+'"
			});
		}
		// 保存DataGrid数据列其实索引，在操作数据列时，不对内置列做处理
		global.dataColStart = columns.length - length;
		// 返回内置列所占宽度，在计算数据列宽度时预留
		return global.dataColStart * 30;
	},
	/**
	 * 解析列配置信息
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"parseColumn" : function(column, cls, hidden) {
		
		var modifyCond, cellTplList,
			// 列类型
			type = column.itype,
			// 列名
			name = column.name,
			// 数据字段配置
			field = {},
			// 文本对齐方式
			textAlign = column.align,
			// 渲染器标识
			rendererIdent = "";
			textAlign = textAlign === "center" || textAlign === "right" ? "ui-content-horizontal-" + textAlign : "";

		// 字段模型配置（数据集使用）
		if(name) {
			field = {
				name : name,
				defaultValue : column.defaultValue,
				convert : column.convert
			};
		}

		// 检测修改信息语句，如果当前数据被修改则会被增加修改标识
		modifyCond = '<tpl if({gird_modify} === "all" || /' + (name || "nosetting") + 
			'/.test({gird_modify}))>ui-datagrid-change-cell</tpl>'+(textAlign ? " "+textAlign : "");

		if(column.renderer) {
			// 生成渲染器并绑定标识至当前列
			rendererIdent = this.buildRendererCol(column.renderer);
		}

		if(column.summaryType) {
			// 解析并收集当前列统计依赖信息
			this.parseSummaryInfo(column);
		}

		if(type === "seq") {
			// 为内置行号列加上行号样式
			cls += " ui-datagrid-cell-seq";
			type = "template";
		}
		// 单元格模板
		cellTplList = ['<td class="ui-datagrid-cell' + cls + '" style="' + hidden + '">'];

		switch(type) {
			case "checkbox":
				this.buildChooseBoxCol(cellTplList, "checkbox");
				break;
			case "radio":
				this.buildChooseBoxCol(cellTplList, "radio");
				break;
			case "date" :
				this.buildDateCol(cellTplList, name, column.format, rendererIdent, modifyCond);
				break;
			case "number" :
				this.buildNumberCol(cellTplList, name, column.format, rendererIdent, modifyCond);
				break;
			case "boolean" :
				// 更改布尔列的数据值类型
				field.type = "Boolean";
				this.buildBooleanCol(cellTplList, name, column.trueText, column.falseText, rendererIdent, modifyCond);
				break;
			case "template" :
				this.buildTemplateCol(cellTplList, name, column.tpl, rendererIdent, modifyCond);
				break;
			case "control" :
				this.buildControlCol(cellTplList, name, column.controlType, column.controlCfg, rendererIdent);
				break;
			default :
				this.buildNormalCol(cellTplList, name, rendererIdent, modifyCond);
		}
		// 将数据字段配置增加至数据模型配置中
		if(fastDev.isValid(name)) {
			this.fields.push(field);
		}

		cellTplList.push('</td>');

		return cellTplList.join("");
	},
	/**
	 * 宽度限制列生成
	 * @param {JsonObject} 列配置信息
	 * @param {String} width 外部配置宽度
	 * @param {String} totalWidth 总宽度
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildColWidthTpl" : function(column, totalWidth, surplus, inner) {
		// 计算限制列宽度，将当前列宽度设置换算成具体数值
		var cellHtml,
			display = "",
			width = parseInt(fastDev.Util.StringUtil.stripUnits(column.width || 0, totalWidth), 10);
			
		// 最后一个显示列时，如果剩余宽度大于当前配置宽度则用剩余宽度，否则用当前配置宽度
		width = surplus && width !== surplus ? surplus : width;
		
		if(column.hidden === true){
			display = "display:none";
			width = 0;
		}
		// 获取新的剩余宽度
		this._global.surplus -= width;
		cellHtml = '<td style="width:' + width + 'px;' + display + '"></td>';
		if(inner === true) {
			return [width,cellHtml];
		}
		return cellHtml;
	},
	/**
	 * 检查列内容是否有效
	 * @param {String} content 列内容
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildCheckDataTpl" : function(content) {
		return '<tpl if(!item["inner_invalid"])>' + content + '</tpl>';
	},
	/**
	 * 生成单元格模板
	 * @param {Array} cellTplList 单元格模板
	 * @param {String} name 当前列数据名
	 * @param {String} rendererIdent 渲染器标识
	 * @param {String} cls 数据容器样式名
	 * @param {String} content 数据模板
	 * @param {String} prop 数据容器其他属性
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildColTpl" : function(cellTplList, name, rendererIdent, cls, content, prop, notitle) {
		var title = "", value = name ? 'value="{' + name + '}"' : '';
		
		content = content ? content : ( value ? '{' + name + '}' : '');
		rendererIdent = rendererIdent || "";
		cls = cls || "";
		prop = prop || "";
		title = notitle ? "" : 'title="' + content + '"';

		cellTplList.push('<div class="ui-datagrid-inner ' + cls + '" ' + title + ' ' + value + ' ' + rendererIdent + ' ' + prop + '>' + content + '</div>');
	},
	/**
	 * 生成普通数据单元格模板
	 * @param {Array} cellTplList 单元格模板
	 * @param {String} name 当前列数据名
	 * @param {String} rendererIdent 渲染器标识
	 * @param {String} modifyCond 检测修改信息语句
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildNormalCol" : function(cellTplList, name, rendererIdent, modifyCond) {
		this.buildColTpl(cellTplList, name, rendererIdent, modifyCond);
	},
	/**
	 * 生成选择单元格模板
	 * @param {Array} cellTplList 单元格模板
	 * @param {String} type 选择框类型
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildChooseBoxCol" : function(cellTplList, type) {
		this.buildColTpl(cellTplList, null, null, null, this.buildCheckDataTpl('<input name="dg_choose" type="' + type + '" <tpl if({gird_checked} === true)>checked</tpl>>'), null, true);
	},
	/**
	 * 生成日期数据单元格模板
	 * @param {Array} cellTplList 单元格模板
	 * @param {String} name 当前列数据名
	 * @param {format} format 数据格式定义
	 * @param {String} rendererIdent 渲染器标识
	 * @param {String} modifyCond 检测修改信息语句
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildDateCol" : function(cellTplList, name, format, rendererIdent, modifyCond) {
		var 
			that = this, 
			processid = fastDev.getID();
			
		this._global.displayJobs.push(function() {
			that._global.dataContainer.find('div [dg_format="' + processid + '"]').each(this.dateFormat, format);
		});

		this.buildColTpl(cellTplList, name, null, modifyCond, null, this.buildCheckDataTpl('dg_format="' + processid + '" ' + rendererIdent));
	},
	/**
	 * 生成数字数据单元格模板
	 * @param {Array} cellTplList 单元格模板
	 * @param {String} name 当前列数据名
	 * @param {format} format 数据格式定义
	 * @param {String} rendererIdent 渲染器标识
	 * @param {String} modifyCond 检测修改信息语句
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildNumberCol" : function(cellTplList, name, format, rendererIdent, modifyCond) {
		var 
			that = this, 
			processid = fastDev.getID();
			
		this._global.displayJobs.push(function() {
			that._global.dataContainer.find('[dg_format="' + processid + '"]').each(this.numberFormat, format);
		});

		this.buildColTpl(cellTplList, name, null, modifyCond, null, this.buildCheckDataTpl('dg_format="' + processid + '" ' + rendererIdent));
	},
	/**
	 * 生成布尔数据单元格模板
	 * @param {Array} cellTplList 单元格模板
	 * @param {String} name 当前列数据名
	 * @param {String} trueText 数据为真时显示文本
	 * @param {String} falseText 数据为假时显示文本
	 * @param {String} rendererIdent 渲染器标识
	 * @param {String} modifyCond 检测修改信息语句
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildBooleanCol" : function(cellTplList, name, trueText, falseText, rendererIdent, modifyCond) {
		this.buildColTpl(cellTplList, name, rendererIdent, modifyCond, this.buildCheckDataTpl('<tpl if({' + name + '} === true)>' + trueText + '<tpl else>' + falseText + '</tpl>'));
	},
	/**
	 * 生成模板单元格模板
	 * @param {Array} cellTplList 单元格模板
	 * @param {String} name 当前列数据名
	 * @param {String} tpl 模板定义
	 * @param {String} rendererIdent 渲染器标识
	 * @param {String} modifyCond 检测修改信息语句
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildTemplateCol" : function(cellTplList, name, tpl, rendererTpl, modifyCond) {
		cellTplList.push('<div class="ui-datagrid-inner ' + modifyCond + '"  ' + rendererTpl + '>' +  this.buildCheckDataTpl(tpl) + '</div>');
	},
	/**
	 * 生成控件单元格模板
	 * @param {Array} cellTplList 单元格模板
	 * @param {String} name 当前列数据名
	 * @param {String} type 控件类型
	 * @param {JsonObject} config 控件配置
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildControlCol" : function(cellTplList, name, type, config) {
		var 
			that = this, 
			processid = fastDev.getID();
			
		this._global.displayJobs.push(function() {
			that._global.dataContainer.find('div[dg_control="' + processid + '"]').each(this.controlFormat, config, type);
		});
		cellTplList.push('<div class="ui-datagrid-inner" value="{' + name + '}" ' + this.buildCheckDataTpl('dg_control="' + processid + '"') + '>{' + name + '}</div>');
	},
	/**
	 * 生成渲染器并返回标识
	 * @param {Function} handle 渲染器句柄
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildRendererCol" : function(handle) {
		var 
			that = this, 
			processid = fastDev.getID();

		this._global.displayJobs.push(function() {
			that._global.dataContainer.find('div[dg_renderer="' + processid + '"]').each(this.dataRenderer, handle);
		});
		return this.buildCheckDataTpl('dg_renderer="' + processid + '"');
	},
	/**
	 * 将值转换为相应数字格式
	 * @param {Element} elem 数据所在元素
	 * @param {String} format 数据格式定义
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"numberFormat" : function(idx, elem, format) {
		elem.innerHTML = fastDev.Util.NumberUtil.format(elem.innerHTML.replace(",", ""), format);
	},
	/**
	 * 将值转换为相应日期格式
	 * @param {Element} elem 数据所在元素
	 * @param {String} format 数据格式定义
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"dateFormat" : function(idx, elem, format) {
		elem.innerHTML = fastDev.Util.DateUtil.format(elem.innerHTML, format);
	},
	/**
	 * 将值转换为控件显示
	 * @param {Element} elem 数据所在元素
	 * @param {JsonObject} config 控件配置
	 * @param {String} type 控件类型
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"controlFormat" : function(idx, elem, config, type) {
		var 
			id = fastDev.getID(), 
			container = fastDev(elem).prop("id", id).empty();
			
		config = config || {};
		fastDev.apply(config, {
			id : id + "",
			saveInstance : true,
			container : container,
			value : container.attr("value"),
			width : container.width() + "px"
		});
		fastDev.create(type, config);
	},
	/**
	 * 数据渲染器
	 * @param {Element} elem 数据所在元素
	 * @param {Function} handle 渲染器句柄
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"dataRenderer" : function(idx, elem, handle) {
		var content = handle.call(elem, fastDev(elem).attr("newValue") || fastDev(elem).attr("value"));
		
		if(fastDev.isValid(content)) {
			elem.innerHTML = content;
		}
	},
	/**
	 * 获取宽度不足时补足列索引
	 * @param {Array{JsonObject}} columns DataGrid列配置
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"getRepairColIndex" : function(columns) {
		// 以最后一列为起点逆推，找到第一个显示列索引
		var column, 
			index = columns.length - 1;
			
		for(; column = columns[index]; index--) {
			if(column.hidden !== true) {
				break;
			}
		}
		return index;
	},
	/**
	 * 监听数据区域横向滚动条，保证表格内容和标题同步滚动事件
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"listeningScroll" : function() {
		var 
			that = this,
			options = this._options,
			global = this._global;

		this._global.dataContainer.bind("scroll", function() {
			var scrollTop, 
				scrollLeft = global.dataContainer.scrollLeft();
				
			global.headerContainer.find("table").css({
				"left" : scrollLeft * -1,
				"position" : "relative"
			});
			if(options.allowDelayLoad) {
				scrollTop = global.dataContainer.scrollTop();
				if(scrollTop + global.dataContainer.height() >= global.dataContainer.elems[0].scrollHeight) {
					global.params.rowid = global.innerPage * 50;
					that.appendDynamicHtml(global.dataContainer,"body", that.dataset.selectByPage(global.innerPage++, 50));
					global.dataContainer.scrollTop(scrollTop);
					if(fastDev.Browser.isIE6 || fastDev.Browser.isIE7) {
						global.dataContainer.find("table:last-child").width("-17");
					}
				}
			}
		});
	},
	/**
	 * 初始化行内编辑
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"initEditInline" : function() {
		var 
			that = this, 
			global = this._global;

		fastDev("html").bind("click", function(event) {
			var elem = event.target;
			
			if(global.activeControl && (fastDev(global.activeControl.elems).contains(elem) || (global.activeControl.alias==="SelectTree") && fastDev(global.activeControl.elems[2]).contains(elem))){
				return;
			}
			
			if(!global.dataContainer.contains(elem)) {
				if(global.activeControl){
					that.writeBackCell();
				}
				return;
			}
			
			
			if(that.writeBackCell() === true && elem.tagName === "DIV" && /ui-datagrid-inner/.test(elem.className) && !fastDev.isValid(global.activeControl)){
				// 激活下次的编辑
				that.editCell(elem);
			}
		});

	},
	/**
	 * 行内编辑触发时设置焦点目标
	 * @param {Event} event
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"setFocus" : function(event) {
		var obj = event.target;
		
		if(obj.createTextRange) {
			try {
				var txt = obj.createTextRange();
				txt.moveStart('character', obj.value.length);
				txt.collapse(true);
				txt.select();
			} catch (e) {}

		} else if( typeof obj.selectionStart === 'number' && typeof obj.selectionEnd === 'number') {
			obj.selectionStart = obj.selectionEnd = obj.value.length;
		}
	},
	/**
	 * 单元格编辑
	 * @param {Element} elem
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"editCell" : function(elem) {
		var column, idColumn, i = 0,
			options = this._options, 
			global = this._global,
			// 封装DomObject
			container = fastDev(elem),
			// 获取DataGrid列配置
			columns = options.columns,
			// 获取操作列索引
			cellIndex = +(options.allowCellMerge?container.parents("td:eq(0)").attr("realCellIndex") : container.parents("td:eq(0)").prop("cellIndex")),
			// 获取操作行索引
			rowIndex = +(container.parents("tr:eq(0)").prop("rowIndex")),
			// 根据索引获取列配置
			columnCfg = this._global.activeColumn = (fastDev.Browser.isIE6 || fastDev.Browser.isIE7)?this.getColumnInfo(columns,cellIndex):columns[cellIndex],
			// 获取控件类型
			controlType = columnCfg.editby,
			// 行内编辑限制函数
			editCellLimit = fastDev.isFunction(options.editCellLimit)?options.editCellLimit : fastDev.noop,
			// 获取当前列真实值
			value = container.attr("newValue") || container.attr("value"),
			// 在列配置中获取控件配置
			controlCfg = columnCfg.controlCfg || {};
			
		// 如果当前列不是数据列，则取消编辑
		if(cellIndex < global.dataColStart || rowIndex > this.dataset.getSize() || !controlType || editCellLimit(rowIndex, cellIndex, value)) {
			return;
		}

		// 如果编辑控件需要根据ID定位值(如:Select、SelectTree),则寻找对应的ID列容器
		if(columnCfg.idColumn) {
			for(; column = columns[i]; i++) {
				if(column.name === columnCfg.idColumn) {
					break;
				}
			}
			idColumn = this._global.activeIdDom = container.parents("tr:eq(0)").find("td:eq(" + i + ") [class~='ui-datagrid-inner']");
			value = idColumn.attr("newValue") || idColumn.attr("value");
		}
		// 将当前值写入配置中
		controlCfg.value = value;
		// 将当前容器写入配置中
		controlCfg.container = container;
		controlCfg.width = "100%";
		// 清空显示容器
		container.empty();
		// 创建控件
		this._global.activeControl = fastDev.create(controlType, controlCfg).bind("focus", this.setFocus).fire("focus");
	},
	/**
	 * 将当前已激活的行内编辑控件数据回写
	 * @member fastDev.Ui.DataGrid
	 */
	"writeBackCell" : function(validate) {
		// 获取当前活动控件
		var activeControl = this._global.activeControl;

		// 如果当前没有已被激活的控件则不继续执行回写
		if(!fastDev.isValid(activeControl)) {
			return true;
		}
		
		if(validate ? activeControl.validate() : activeControl.hasError()){
			return false;
		}
		
		
		var 
			// 获取当前活动列配置
			activeColumn = this._global.activeColumn, 
			columnName = activeColumn.name,
			// 关联ID列DomObject
			activeIdDom = this._global.activeIdDom,
			// 获取控件容器
			container = activeControl._options.container,
			// 主键列名
			keyword = this._options.keyword,
			// 获取控件类型
			controlType = activeControl.alias,
			// 获取当前行索引
			rowIndex = activeControl._options.container.parents("tr:eq(0)").prop("rowIndex"),
			// 获取当前列索引
			cellIndex = activeControl._options.container.parents("td:eq(0)").prop("cellIndex"),
			// 调用对应的回写器回写数据
			rs = this.controlType[controlType].call(this, activeControl, activeColumn);
			
		// 销毁活动控件
		activeControl.destroy();
		// 获取修改前数据
		var m, newValue, oldValue = container.attr("value"),
			
		// 获取数据集中当前行数据
		olddata = this.dataset.get(rowIndex - 1),
		newdata = {},
		// 获取当前行修改信息
		gird_modify = olddata.gird_modify;

		// 重设单元格显示值和真实值
		if(fastDev.isValid(activeIdDom)) {
			newValue = rs[1];
			// 回写当前单元格显示值与隐藏值
			container.attr("newValue", newValue).setText(newValue);
			// 回写关联ID单元格显示值与隐藏值
			activeIdDom.attr("newValue", rs[0]).setText(rs[0]);
			// 回写关联ID值至数据集
			newdata[activeColumn.idColumn] = rs[0];
		} else {
			newValue = rs[0];
			// 回写当前单元格显示值与隐藏值
			container.attr("newValue", newValue).setText(rs[1]);
		}
		// 回写当前值至数据集
		newdata[columnName] = newValue;

		// 如果当前值不等于原始值，添加修改列标识，增加修改列样式
		// 如果当前值等于原始值并且当前行不是新增行则删除修改列标识，删除修改列样式
		if(oldValue !== newValue) {
			if(gird_modify !== "all") {
				newdata.gird_modify = gird_modify ? columnName + "," : "," + columnName + ",";
			}
			container.addClass("ui-datagrid-change-cell");
			if(activeIdDom) {
				activeIdDom.addClass("ui-datagrid-change-cell");
			}
			
			this.dataset.update(function(index, data){
				if(data[keyword] === olddata[keyword]){
					return newdata;
				}
			});
		} else {
			if(!/all/.test(gird_modify)) {
				newdata.gird_modify = gird_modify.replace("," + columnName + ",", ",");
				container.removeClass("ui-datagrid-change-cell");
				if(activeIdDom) {
					activeIdDom.removeClass("ui-datagrid-change-cell");
				}
			}
		}
		
		// 重置活动项
		this._global.activeControl = this._global.activeColumn = this._global.activeIdDom = null;

		// 处理界面显示
		this.processingGrid(false);

		return true;
	},
	/**
	 * 不同类型控件行内编辑时的特殊处理
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"controlType" : {
		"TextBox" : function(activeControl) {
			var value = activeControl.getValue();
			
			return [value, value];
		},
		"CheckBoxGroup" : function(activeControl, columCfg) {
			// 复选框控件只能对应boolean列进行操作
			var text, value = activeControl.getValue();
				
			// 临时判断
			value = value === true ? "true" : "false";
			text = value === "true" ? columCfg.trueText : columCfg.falseText;
			
			return [value, text];
		},
		"Select" : function(activeControl) {
			var 
				value = activeControl.getValue(), 
				text = activeControl.getText();
			
			return [value, text];
		},
		"DatePicker" : function(activeControl) {
			var value = activeControl.getValue();
			
			return [value, value];
		},
		"SelectTree" : function(activeControl) {
			var 
				value = activeControl.getValue(), 
				text = activeControl.getText();
				
			return [value, text];
		}
	},
	/**
	 * 多表头时，修正列配置
	 * @param {Array{JsonObject}} columns DataGrid列配置
	 * @param {Array{JsonObject}} childCols 伪列子列配置
	 * @param {Boolean} parseChildCol 当前方法是否在解析子列
	 * @param {Number} index 伪列中真实列时的修正索引值
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"correctColumns" : function(columns, childCols, parseChildCol, index) {
		childCols = childCols || columns;
		for(var i = 0, column; column = childCols[i]; i++) {
			// 如果当前列为伪列,则删除伪列，并获取下一个修正索引值
			if(column.columns) {
				if(parseChildCol !== true) {
					columns.splice(i, 1);
				}
				// 修正索引值以DataGrid列配置的第一个伪列索引值为初始值
				index = this.correctColumns(columns, column.columns, true, index || i);

			} else if(parseChildCol) {
				// 如果当前列是伪列中的真实列，则将此列增加至DataGrid列配置中
				columns.splice(index++, 0, column);
			}
		}
		return index;
	},
	/**
	 * 合并数据相同的单元格
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"mergeCell" : function() {
		var cells, statement, statementList,
			i = 0,
			cellList = [], 
			rows = this._global.dataContainer.find("tr");
			
		// 找出当前表格所有单元格对象形成一个二维数组
		rows.each(function(idx, elem) {
			cells = fastDev(elem).find("td").elems;
			cellList.push(cells);
			fastDev.each(cells, function(cellIndex, elem){
				fastDev(elem).attr("realCellIndex", cellIndex);
			});
		});
		// 计算获得合并指令列表
		statementList = this.getStatementList(0, this._global.dataColStart, this.dataset.getSize() - 1, cellList[0].length, cellList);
		// 执行合并指令 指令格式为 列:起始合并行-终止合并行
		for(; statement = statementList[i++];) {
			while(statement[0]) {
				// 解析指令
				var 
					s = statement.pop(), 
					statementInfo = s.split(":"), 
					mergeInfo = statementInfo[1].split("-"), 
					rowindex = parseInt(mergeInfo[0], 10), 
					maxmergerow = parseInt(mergeInfo[1], 10) + 1, 
					colindex = parseInt(statementInfo[0], 10);
				// 改变列的跨行数
				fastDev(cellList[rowindex][colindex]).prop("rowspan", maxmergerow - rowindex);
				// 删除多余列
				for(; rowindex + 1 < maxmergerow; rowindex++) {
					fastDev(cellList[rowindex+1][colindex]).remove();
				}
			}
		}
	},
	/**
	 * 获取合并指令列表
	 * @param {Number} rowStart 合并起始行
	 * @param {Number} cellStart 合并起始列
	 * @param {Number} rowEnd 合并终止行
	 * @param {Number} cellEnd 合并终止列
	 * @param {Array{Array{Element}}} cellList 二维单元格数组
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"getStatementList" : function(rowStart, cellStart, rowEnd, cellEnd, cellList) {
		var s, rowstart, statement, mergeInfo, rowlen, param,
			i = 0,
			colIndex = 0,
			totalStatement = [], 
			statementList = this.getStatement(cellStart, rowStart, cellEnd, rowEnd, cellList).slice(0);

		while(statementList[0]) {
			statement = [statementList.shift()];
			for(; i < statement.length && colIndex < cellEnd; i++) {
				s = statement[i];
				mergeInfo = s.split(":");
				colIndex = mergeInfo[0];
				rowstart = mergeInfo[1].split("-")[0];
				rowlen = mergeInfo[1].split("-")[1];
				param = this.getStatement(+colIndex + 1, parseInt(rowstart, 10), cellEnd, parseInt(rowlen, 10), cellList).slice(0);
				statement = statement.concat(param);
			}
			totalStatement.push(statement);
		}
		return totalStatement;
	},
	/**
	 * 获取合并指令
	 * @param {Number} cellStart 当前合并列索引
	 * @param {Number} rowstart 当前合并起始行索引
	 * @param {Number} rowlen 当前合并终止行索引
	 * @param {Array{Array{Element}}} cellList 二维单元格数组
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	'getStatement' : function(cellStart, rowstart, cellEnd, rowEnd, cellList) {
		var 
			count = 0,
			startRow = 0, 
			statement = [], 
			exec = false, 
			globaltext = "";
			
		for(; rowstart <= rowEnd && cellStart < cellEnd; rowstart++) {
			var currtext = fastDev(cellList[rowstart][cellStart]).find(".ui-datagrid-inner").attr("value");
			if(currtext !== globaltext) {
				globaltext = currtext;
				if( exec = !!count) {
					this.pushStatement(rowstart - (count + 1), count, cellStart, statement);
					exec = false;
					count = 0;
					startRow = rowstart;
				}

			} else {
				count++;
			}
			
			if(rowstart === rowEnd) {
				exec = !!count;
			}
			
			if(exec) {
				this.pushStatement(rowstart - count, count, cellStart, statement);
				count = 0;
			}
		}
		return statement;
	},
	/**
	 * 保存合并指令
	 * @param {Number} rowStart 合并起始行
	 * @param {Number} mergeCount 合并行数
	 * @param {Number} colIndex 列索引
	 * @param {Array{String}} statement 指令列表
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"pushStatement" : function(rowStart, mergeCount, colIndex, statement) {
		if(mergeCount) {
			statement.push(colIndex + ":" + rowStart + "-" + (rowStart + mergeCount));
		}
		return statement;
	},
	/**
	 * 更改显示状态
	 * @param {String} fieldName 列名
	 * @param {String} oper 操作码
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"changeDisplayState" : function(fieldName, oper) {
		var tr, column, body, header, 
			index = 0,
			rowIndex = 0,
			cellIndex = 0,
			global = this._global, 
			columns = this._options.columns;
			
		// 查找目标列的索引值
		for(; column = columns[index]; index++) {
			if(column.name === fieldName) {
				column.hidden = oper === "hide";
				break;
			}
		}
		body = global.dataContainer.find("tr").elems;
		// 普通情况下显示/隐藏标题列
		if(!fastDev.isValid(global.cloneColumns)) {
			header = global.headerContainer.find("tr").elems;
			// 隐藏/显示标题宽度限制列
			fastDev(header[0]).find("td:eq(" + index + ")")[oper]();
			// 隐藏标题
			fastDev(header[1]).find("td:eq(" + index + ")")[oper]();
		} else {
			// 多表头情况下显示/隐藏标题列
			this.buildTitleTpl(global.cloneColumns.slice(0));
			global.params.colTitleTpl = global.colTitleTpl;
			this.renderDynamicHtml(global.headerContainer.find("[name='header']"),"header");
			header = global.headerContainer.find("tr").elems;
			for(; column = columns[cellIndex]; cellIndex++) {
				if(column.hidden === true) {
					// 隐藏/显示标题宽度限制列
					fastDev(header[0]).find("td:eq(" + cellIndex + ")").hide();
				} else {
					fastDev(header[0]).find("td:eq(" + cellIndex + ")").show();
				}
			}
		}

		// 显示/隐藏数据列
		for(; tr = body[rowIndex++]; ) {
			fastDev(tr).find("td:eq(" + index + ")")[oper]();
		}
		this.calculateWidth(this._options.width);
	},
	/**
	 * 隐藏列
	 * @param {String} fieldName 列名
	 * @member fastDev.Ui.DataGrid
	 */
	"hideColumn" : function(fieldName) {
		this.changeDisplayState(fieldName, "hide");
	},
	/**
	 * 显示列
	 * @param {String} fieldName 列名
	 * @member fastDev.Ui.DataGrid
	 */
	"showColumn" : function(fieldName) {
		this.changeDisplayState(fieldName, "show");
	},
	/**
	 * 根据列索引获取配置列信息,在IE6、IE7下会把隐藏列计入
	 * @param {Array[JsonObject]} columns 配置列数组
	 * @param {Number} index 指定列索引
	 * @return {JsonObject}
	 * @member fastDev.Ui.DataGrid
	 */
	"getColumnInfo" : function(columns,index){
		for(var i=0, repair=0, column; column=columns[i]; i++){
			
			if( column.hidden === true ){
				repair++;
			}
			
			if( i- repair === index ){
				return column;
			}
		}
	},
	/**
	 * 将被激活行内编辑的单元格重置
	 * @private
	 * @member fastDev.Ui.DataGrid 
	 */
	"resetActiveColumn" : function(){
		this._global.activeControl = this._global.activeColumn = this._global.activeIdDom = null;
	},
	/**
	 * 新增一列 
	 * @param {JsonObject} column 列配置信息
	 * @param {Number} index 列索引位置
	 * @member fastDev.Ui.DataGrid
	 */
	"addColumn" : function(settings, index){
		var column,
			i = 0,
			isvalid = true, 
			options = this._options;
			
		// 更新列配置信息
		for(; column = options.columns[i++];){
			if(column.name === settings.name){
				isvalid = false;
				break;
			}
		}
		
		if(isvalid){
			index = (index > options.columns.length?options.columns.length:index-1);
			options.columns.splice(index,0,settings);
			this.reConstruct(true, options,this._global);
		}
	},
	/**
	 * 删除一列 
	 * @param {String} name 列名
	 * @member fastDev.Ui.DataGrid
	 */
	"removeColumn" : function(name){
		var column, 
			i = 0,
			options = this._options;
		
		for(; column = options.columns[i]; i++){
			if(column.name === name){
				break;
			}
		}
		
		options.columns.splice(i,1);
		this.reConstruct(true, options,this._global);
	},
	/**
	 * @param {Object} refresh
	 * @param {Object} options
	 * @param {Object} global
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"reConstruct" : function(refresh, options, global){
		options = options || this._options;
		global = global || this._global;
		
		// 清空老字段信息
		this.fields = [];
		// 重新创建模板
		this.initTemplate(options.columns, this.calculateWidth(options.width || global.width, true));
		this.setTemplate(global);
		this.template = this.constructor.prototype.template = fastDev.create("Template", {
			content : this.template,
			name : this.alias
		});
		global.params.colWidthTpl = global.colWidthTpl;
		global.params.colTitleTpl = global.colTitleTpl;
		// 重新创建数据集
		this.dataset.model = this.model = fastDev.create("Model", {
			fields : this.fields,
			mapper : options.mapper
		});
		
		if(refresh!==false){
			// 刷新数据
			this.refreshData();
		}
	}
});
fastDev.apply(fastDev.Ui.DataGrid, {
	/**
	 * 生成分页栏配置信息
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildPageBarConfig" : function(options) {
		
		var 
			// 跳转至首页按钮事件
			pageFirst = fastDev.setFnInScope(this, this.pageFirst),
			// 跳转至上一页按钮事件
			pagePrev = fastDev.setFnInScope(this, this.pagePrev),
			// 跳转至下一页按钮事件
			pageNext = fastDev.setFnInScope(this, this.pageNext),
			// 跳转至最后一个按钮事件
			pageLast = fastDev.setFnInScope(this, this.pageLast),
			// 改变每页显示行数事件
			onChange = fastDev.setFnInScope(this, this.changePageSize),
			onKeyUp = fastDev.setFnInScope(this, this.changePage),
			// 刷新数据按钮事件
			refreshData = fastDev.setFnInScope(this, this.refreshData),
			// 每页显示行数选择框默认值
			pageSizeList = options.pageSizeList || [{
					"value" : "5",
					"text" : "5条"
				}, {
					"value" : "10",
					"text" : "10条"
				}, {
					"value" : "20",
					"text" : "20条"
				}, {
					"value" : "50",
					"text" : "50条"
				}],
			// 分页工具栏配置
			pageBarItems = options.pageBarItems || [{
					"cls" : "ui-button-page",
					"iconCls" : "icon-pagefirst",
					"id" : "pagefirst",
					"onclick" : pageFirst
				}, {
					"cls" : "ui-button-page",
					"iconCls" : "icon-pageprev",
					"id" : "pageprev",
					"onclick" : pagePrev
				}, "|", "第", {
					"itype" : "textbox",
					"width" : "20px",
					"id" : "page",
					"rule":"IsNumber",
					"validateMode" : "blur",
					"onkeyup" : onKeyUp
				}, {
					"text" : "页,共1页",
					"itype" : "text",
					"id" : "total"
				}, '|', {
					"cls" : "ui-button-page",
					"iconCls" : "icon-pagenext",
					"id" : "pagenext",
					"onclick" : pageNext
				}, {
					"cls" : "ui-button-page",
					"iconCls" : "icon-pagelast",
					"id" : "pagelast",
					"onclick" : pageLast
				}, "|", {
					"cls" : "ui-button-page",
					"iconCls" : "icon-refresh",
					"id" : "refresh",
					"onclick" : refreshData
				}, ">", {
					"itype" : "select",
					"width" : "50px",
					"id" : "pageSize",
					"onchange" : onChange,
					"items" : pageSizeList,
					"enableInitProxy" : false,
					"enableDataProxy" : false,
					"value" : this._options.pageSize
				}, "|", {
					"text" : "共1条",
					"itype" : "text",
					"id" : 'records'
				}],
			// 如果用户在分页工具栏上配置了自定义按钮，则读取用户配置追加至分页工具栏配置
			pageItems = options.pageItems;
			
		if(fastDev.isArray(pageItems)) {
			pageItems.splice(0, 0, "|");
			for(var i = 0, len = pageItems.length; i < len; i++) {
				pageBarItems.splice(11 + i, 0, pageItems[i]);
			}
		}
		// 返回分页栏配置信息
		return {
			cls : "ui-pagebar ui-pagebar-bg",
			items : pageBarItems
		};
	},
	/**
	 * 初始化分页栏数据
	 * @param {JsonObject} info 分页信息
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"initPageBar" : function(data) {
		var info = fastDev.Data.Reader.readDataSegment(data, "info") || {};
		// 设置分页栏信息前回调事件
		this._options.onBeforeInitPageBar(info);
		var firstBtn, prevBtn, nextBtn, lastBtn, pageBar,
			page = (info.page = (info.page || 1)),
			total =  (info.total = (info.total || 1)),
			pageSize = (info.pageSize = (info.pageSize || this._options.pageSize)),
			records = (info.records = info.records || 0);
			
		this._options.pageSize = pageSize;
		this._options.pageCurrent = page;
		fastDev.each("pageBar clonePageBar".split(" "), function(index, item) {
			
			pageBar = this._global[item];
			if(!fastDev.isValid(pageBar)) {
				return false;
			}
			
			// 获取4个跳转按钮，在页数改变时同时改变它们的状态
			firstBtn = pageBar.getItem("pagefirst");
			prevBtn = pageBar.getItem("pageprev"); 
			nextBtn = pageBar.getItem("pagenext"); 
			lastBtn = pageBar.getItem("pagelast");

			if(page === 1) {
				firstBtn.disable();
				prevBtn.disable();
			} else {
				firstBtn.enable();
				prevBtn.enable();
			}

			if(page === total) {
				nextBtn.disable();
				lastBtn.disable();
			} else {
				nextBtn.enable();
				lastBtn.enable();
			}

			pageBar.getItem("page").setValue(page);
			pageBar.getItem("total").setText("页,共" + total + "页");
			pageBar.getItem("pageSize").setValue(pageSize);
			pageBar.getItem("records").setText("共" + records + "条");
			
			// 设置分页栏信息后回调事件
			this._options.onAfterInitPageBar(pageBar, info);
			
		}, this);
	},
	/**
	 * 跳转至首页
	 * @member fastDev.Ui.DataGrid
	 */
	"pageFirst" : function() {
		this.jumpPage("first");
	},
	/**
	 * 跳转至上一页
	 * @member fastDev.Ui.DataGrid
	 */
	"pagePrev" : function() {
		this.jumpPage("prev");
	},
	/**
	 * 跳转至下一页
	 * @member fastDev.Ui.DataGrid
	 */
	"pageNext" : function() {
		this.jumpPage("next");
	},
	/**
	 * 跳转至最后一个
	 * @member fastDev.Ui.DataGrid
	 */
	"pageLast" : function() {
		this.jumpPage();
	},
	/**
	 * 跳转至指定页
	 * @param {Number} 目标页
	 * @member fastDev.Ui.DataGrid
	 */
	"jumpPage" : function(target) {
		
		if(!this.writeBackCell(true)){
			return;
		}
		
		var 
			pageBar = this._global.pageBar,
			// 当前页
			page = this._options.pageCurrent,
			// 每页显示行数
			pageSize = this._options.pageSize,
			// 数据总页数
			total = this.getPageBarInfo("total");
			
		// 根据跳转目标计算目标页数
		switch(target) {
			case "first":
				page = 1;
				break;
			case "prev":
				page -= 1;
				break;
			case "next":
				page += 1;
				break;
			case "refresh":
				break;
			default :
				page = target || total;
		}

		// 跳转页数无效时返回
		if(page < 0 || page > total) {
			return;
		}
		
		// 设置后台分页依赖参数至代理中
		this.initProxy.addParam({
			page : page,
			pageSize : pageSize
		});

		// 调用刷新方法
		this.initRefresh();
	},
	/**
	 * 更改每页显示数据条数
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"changePageSize" : function(pageSize) {
		this._options.pageSize = pageSize;
		this.jumpPage(1);
	},
	/**
	 * 页数跳转输入框中页数输入
	 * @param {Event} event 事件对象
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"changePage" : function(event){
		var 
			pageBar = this._global.pageBar,
			clonePageBar = this._global.clonePageBar,
			inputPage = event.target.value;
		
		if(pageBar && pageBar.getItem("page").validate() || clonePageBar && clonePageBar.getItem("page").validate()){
			return ;
		}
		
		inputPage = +inputPage;
		
		if(event.keyCode === 13){
			this.jumpPage(inputPage);
		}else if(this._options.pagePosition === "all"){
			pageBar.getItem("page").setValue(inputPage);
			clonePageBar.getItem("page").setValue(inputPage);
		}
	},
	/**
	 * 刷新数据方法
	 * 参数为布尔类型时定义当前显示是否回到第一页
	 * 参数为Json对象类型时，设置当前刷新操作请求参数并强制回到第一页显示
	 * @param {Boolean/Jsonobject} reset 刷新参数
	 * @member fastDev.Ui.DataGrid
	 */
	"refreshData" : function(reset) {
		var target = "refresh", setParam;

		if(reset === true || ( setParam = fastDev.isPlainObject(reset))) {
			target = 1;
			if(setParam === true) {
				this.initProxy.setParam(reset);
			}
		}
		this.jumpPage(target);
	},
	/**
	 * 获取分页栏信息 
	 * @param {String} name 
	 * 分页信息名称 
	 * page : 当前页
	 * total : 总页数
	 * pageSize :每页显示条目数
	 * records : 总记录数
	 * @member fastDev.Ui.DataGrid
	 */
	"getPageBarInfo" : function(name){
		var info, match, pageBar = this._global.pageBar;
		
		switch(name){
			case "page" :
				info = (pageBar && pageBar.getItem("page").getValue()) || 1;
				break;
			case "total" :
				if(pageBar){
					info = pageBar.getItem("total").getText();
					match = /共(.+)页/.exec(info);
					info = match[1];
				}else{
					info = 1;
				}
				break;
			case "pageSize" : 
				info = (pageBar && pageBar.getItem("pageSize").getValue()) || this._options.pageSize;
				break;
			case "records" :
				if(pageBar){
					info = pageBar.getItem("records").getText();
					match = /共(.+)条/.exec(info);
					info = match[1];
				}else{
					info = this.dataset.getSize();
				}
				break; 
		}
		return +info;
	}
});
fastDev.apply(fastDev.Ui.DataGrid, {
	/**
	 * 解析统计配置
	 * @param {JsonObject} column 列配置对象
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"parseSummaryInfo" : function(column) {
		// 解析用户定义的统计信息
		var summaryInfo = this._global.summaryInfo || {};
		
		summaryInfo[column.name] = {
			"type" : column.summaryType,
			"renderer" : column.summaryRenderer,
			"text" : column.summaryText,
			"hidden" : column.hidden
		};
		
		this._global.summaryInfo = summaryInfo;
	},
	/**
	 *  生成统计显示区域
	 * @param {Object} options
	 * @param {Object} global
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildSummaryCol" : function(options, global) {
		
		var html, column, processid, summaryValue, summaryColumn,
			i = 0,
			renderer = "",
			rendererList = [], 
			// 列配置信息
			columns = options.columns,
			// 统计信息
			summaryInfo = global.summaryInfo;
			
		// 如果用户没有定义统计模板则生成默认模板统计模板否则使用用户所定义的模板做展现
		if(!options.summaryTpl) {
			html = [];
			global.displayJobs.push(function() {
				// 应用列宽限制模板
				html.push("<table><tr>" + global.colWidthTpl + "</tr><tr>");
				for(; column = columns[i]; i++) {
					summaryColumn = summaryInfo[column.name];
					html.push('<td' + (column.hidden === true?' style="display:none"' : ''));
					if(summaryColumn) {
						summaryValue = summaryColumn.text + this.dataset[summaryColumn.type](column.name);
						if(summaryColumn.renderer) {
							processid = fastDev.getID();
							renderer = " dg_renderer='" + processid + "'";
							rendererList.push({
								id : processid,
								handle : summaryColumn.renderer,
								value : summaryValue
							});
							html.push(renderer);
						}
						html.push(">" + summaryValue);
					} else {
						html.push(">");
					}
					html.push("</td>");
				}
				html.push("</tr>");
				this.find("#count_" + options.id).show().empty().append(fastDev(html.join("")));
				this.buildSummaryRenderer(rendererList);
			});
		} else {
			global.displayJobs.push(function() {
				html = options.summaryTpl;
				for(var p in summaryInfo) {
					summaryColumn = summaryInfo[p];
					summaryValue = summaryColumn.text + this.dataset[summaryColumn.type](p);
					html = html.replace(RegExp("{" + p + "}", "g"), summaryValue);
				}
				this.find("#count_" + options.id).show().empty().append(fastDev(html));
			});
		}
	},
	/**
	 * 构建默认统计列的渲染器
	 * @param {Object} rendererList
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildSummaryRenderer" : function(rendererList) {
		this._global.displayJobs.push(function() {
			fastDev.each(rendererList, function(index, rendererInfo) {
				var elem = this.find("#count_" + this._options.id).find("td[dg_renderer='"+rendererInfo.id+"']").elems[0];
				rendererInfo.handle.call(elem, rendererInfo.value);
			}, this);
		});
	}
});
fastDev.apply(fastDev.Ui.DataGrid, {
	/**
	 * 标题列生成
	 * @param {Array{JsonObject}} columns 列配置数组
	 * @param [Array[String]] colTitleTplList 标题列行模板数组
	 * @return {Boolean} 是否多表头
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildTitleTpl" : function(columns, colTitleTplList) {
		colTitleTplList = colTitleTplList || [];
		
		var column, maxRowSpan, 
			colSpan = 1, 
			rowSpan = 1, 
			splitter = 'name="splitter-cell"',
			cols = [], 
			mergeTitle = false,
			global = this._global, 
			index = colTitleTplList.length,
			// 当前行元素数组
			list = ["<tr>"];
			
		// 获取配置中的最大合并行数
		maxRowSpan = this.getMaxRowSpan(columns, true);
		
		if(maxRowSpan > 1 && !fastDev.isValid(global.cloneColumns)) {
			global.cloneColumns = columns.slice(0);
		}
		
		// 生成当前行表头
		while( column = columns.shift() ) {
			// 如果需要合并表头则获取当前列的跨行跨列数
			if(maxRowSpan > 1) {
				colSpan = this.getColSpan(column);
				column.hidden = colSpan === 0;
				rowSpan = this.getRowSpan(column);
				if(rowSpan === 0) {
					rowSpan = maxRowSpan - this.getRowSpan(column);
				} else {
					rowSpan = 1;
					splitter = "";
				}
			}

			list.push(this.buildColTitleTpl(column, column.hidden !== true, rowSpan || 1, colSpan, splitter));
			// 如果当前为多表头模式则将下一行表头加入待处理数组
			if(column.columns) {
				cols = cols.concat(column.columns);
			}

		}
		list.push("</tr>");
		colTitleTplList[index] = list.join("");
		// 如果检测到还有表头未生成则继续生成
		if(cols.length > 0) {
			this.buildTitleTpl(cols, colTitleTplList);
			mergeTitle = true;
		}
		// 将表头所有行连接为字符串等待填入模板
		global.colTitleTpl = colTitleTplList.join("");
		return mergeTitle;
	},
	/**
	 * 多表头时使用，获取最大合并行数
	 * @param {Array{JsonObject}} columns 列配置数组
	 * @param {Boolean} flag 外部调用标识
	 * @return {Number} 最大合并行数
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"getMaxRowSpan" : function(columns, flag) {
		var column, i = 0, rowSpan = 1;
		for(; column = columns[i]; i++) {
			if(column.columns) {
				// 外部调用比较，内部调用数字累加
				rowSpan = flag === true ? Math.max(rowSpan, this.getMaxRowSpan(column.columns) + 1) : 
					rowSpan += this.getMaxRowSpan(column.columns);
			}
		}
		return rowSpan;
	},
	/**
	 * 多表头时使用，获取当前合并列数
	 * @param {JsonObject} 列配置信息
	 * @return {Number} 当前跨列数
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"getColSpan" : function(column) {
		var colSpan = 1, i = 0, columns;
		if( columns = column.columns) {
			colSpan = 0;
			for(; column = columns[i++];) {
				colSpan += this.getColSpan(column);
			}
		}
		return (column && column.hidden) === true ? 0 : colSpan;
	},
	/**
	 * 多表头时使用，获取当前合并行数
	 * @param {JsonObject} 列配置信息
	 * @return {Number} 当前跨行数
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"getRowSpan" : function(column, inner) {
		var rowSpan = 0, i = 0, columns;
		if( columns = column.columns) {
			for(; column = columns[i++]; ) {
				rowSpan += this.getRowSpan(column, true);
			}
		}
		return inner ? ( columns ? columns.length : 1) : rowSpan;
	},
	/**
	 * 生成标题列模板
	 * @param {JsonObject} column 列配置信息
	 * @param {Boolean} display 是否显示
	 * @param {Number} rowSpan 跨行数
	 * @param {Number} colSpan 跨列数
	 * @return {String} 模板字符串
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildColTitleTpl" : function(column, display, rowspan, colSpan, splitter) {
		var content, processid, cls = "", renderer = "";
		
		display = display === false ? 'style="display:none"' : "";
		switch(column.itype) {
			case "checkbox":
				content = '<input name="dg_checkbox_all" type="checkbox"/>';
				break;
			case "radio":
				content = '';
				break;
			default :
				content = (column.text || "") + '<span class="ui-datagrid-sorticon"></span>';
		}

		if(column.titleStyle) {
			processid = fastDev.getID();
			renderer = ' dg_renderer="' + processid + '"';
			
			this._global.displayJobs.push(function() {
				this._global.headerContainer.find("[dg_renderer='" + processid + "']").css(column.titleStyle);
			});
		}

		if(column.titleCls) {
			cls = " " + column.titleCls;
		}

		return '<td class="ui-datagrid-headercell" ' + display + ' rowSpan="' + rowspan + '" colSpan="' + colSpan + '" ' + splitter + '>' + '<div class="ui-datagrid-cell-inner' + cls + '" ' + renderer + '>' + content + '</div>' + '</td>';
	},
	/**
	 * 初始化列宽调整功能
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"initResizeColumn" : function(global) {
		// 调整列宽开始事件
		var columnResizeStart = global.columnResizeStart || fastDev.setFnInScope(this, this.columnResizeStart);
		
		// 调整列宽时移动事件
		global.columnResizeMove = global.columnResizeMove || fastDev.setFnInScope(this, this.columnResizeMove);
		// 调整列宽结束时间
		global.columnResizeEnd = global.columnResizeEnd || fastDev.setFnInScope(this, this.columnResizeEnd);
		// 禁止选中文本
		global.unSelectFn = global.unSelectFn || function() { return false; };
		// 绑定调整列宽开始事件
		this.find("#splitters_" + this._options.id).bind("mousedown", columnResizeStart);
		// 定位调整列宽感应区域
		this.positionSplitter();
	},
	/**
	 * 初始化列数据排序
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"initSortColumn" : function(options) {
		var column, sortHandle, 
			index = 0,
			global = this._global;
		
		if(global.initSortColumn !== true){
			sortHandle = fastDev.setFnInScope(this, this.sortColumn);
			global.headerContainer.bind("click", sortHandle);
			global.initSortColumn = true;
		}
		if(options.sortField){
			
			if(options.sort === "client"){
				this.dataset.sort(options.sortField,options.sortby);
			}
			
			for(;column=options.columns[index++];){
				if(column.name === options.sortField){
					break;
				}
			}
			
			global.headerContainer.find("tr:last td:eq("+(--index)+")").addClass("ui-datagrid-sort-"+options.sortby);
		}
		
	},
	/**
	 * 定位改变列宽的鼠标感应区域
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"positionSplitter" : function() {
		var cell, info, splitter,
			i = 0,
			theads = [], 
			splittersCell = [],
			// 获取感应元素
			splitters = this.find("#splitters_" + this._options.id).children().elems,
			// 获取标题列
			trs = this._global.headerContainer.find("tr");
			
		if(trs.elems.length === 1) {
			splittersCell = trs.find("td").elems;
		} else {
			trs.each(function(idx, elem) {
				theads.push(fastDev(elem).find("td").elems);
			});

			this.loadTheads(0, theads, splittersCell, theads.length, 0, 1);
		}

		//根据标题列位置计算并设置感应区域位置
		for(; (cell = splittersCell[i + 1]) && (splitter = splitters[i]); i++) {
			info = fastDev(cell).position();
				fastDev(splitter).css({
					"left" : info.left - 2,
					"top" : info.top,
					"height" : fastDev(cell).height()
				});
		}
	},
	/**
	 * 当表格为多表头且需要改变列宽功能时，定位改变列宽的感应区域所对应的表头列
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"loadTheads" : function(index, theads, splitters, maxRowSpan, count, colCount) {
		var td, rowSpan, tds = theads[index];

		while( td = tds[0]) {
			rowSpan = td.rowSpan;
			
			if(colCount > 0 && (rowSpan === maxRowSpan || (rowSpan + count) === maxRowSpan)) {
				splitters.push(td);
				colCount--;
			} else {
				if(colCount === 0) {
					break;
				}
				this.loadTheads(index + 1, theads, splitters, maxRowSpan, count + rowSpan, td.colSpan);
			}
			tds.shift();
		}
	},
	/**
	 * 调整列宽功能开始
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"columnResizeStart" : function(event) {
		var top, height, global = this._global;
		
		// 记录起始坐标值
		global.colResizeX = event.pageX || event.x;
		// 禁止页面选中文字干扰拖动
		fastDev("body").bind("selectstart", global.unSelectFn).addClass("unselect");
		// 绑定拖动结束监听事件
		// 绑定拖动过程显示事件
		fastDev(this.elems).bind("mouseup", global.columnResizeEnd)
			.bind("mousemove", global.columnResizeMove);
		global.resizeCellIndex = (event.target.id * 1 - 1);
		// 初始化参照线
		top = global.headerContainer.offset().top;
		height = global.headerContainer.height() + global.dataContainer.height();
		// 参照先存在则定位参照先，不存在则创建参照线
		global.currLine = global.currLine ? global.currLine.css("left", event.pageX).show() : 
			fastDev('<div style="width:1px; height:' + height + 'px; background:#000; position:absolute;top:' + top + 'px; left:' + event.pageX + 'px;"></div>').appendTo(document.body).bind("mouseup", global.columnResizeEnd);
	},
	/**
	 * 调整列宽功能运行
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"columnResizeMove" : function(event) {
		var column, limitTr, limitRight,
			i = 0,
			count = 0,
			options = this._options,
			global = this._global,
			cellIdx = global.resizeCellIndex,
			columns = this._options.columns;
		
		if(!fastDev.isValid(cellIdx)) {
			return;
		}
		
		for(; column = columns[i++]; ){
			if(!column.hidden){
				count ++;
			}
		}
		
		global.limitTr = limitTr = this.find("tr[name='colwidthlimit']:eq(0)");
		
		global.limitLeft = limitTr.find("td:eq(" + cellIdx + ")").offset().left + 30;
		try{
			limitRight = limitTr.find("td:eq(" + (cellIdx + 2) + ")").offset().left;
			if(limitRight <= 0){
				throw new Error();
			}
		}catch(e){
			limitRight = limitTr.offset().left + limitTr.width();
		}finally{
			global.limitRight = limitRight - 30;
		}
		
		// 当前坐标可用则移动提示线
		if(event.pageX >= global.limitLeft && event.pageX <= global.limitRight) {
			global.currLine.css("left", event.pageX);
		}
	},
	/**
	 * 调整列宽功能结束
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"columnResizeEnd" : function(event) {
		var 
			global = this._global, 
			cellIndex = global.resizeCellIndex,
			pageX = global.currLine.offset().left;
			
		if(!fastDev.isValid(cellIndex)) {
			return;
		}
		// 取消监听拖动结束
		// 取消拖动过程显示事件
		fastDev(this.elems).unbind("mouseup", global.columnResizeEnd)
			.unbind("mousemove", global.columnResizeMove);
		// 取消禁止页面选中文字
		fastDev("body").unbind("selectstart", global.unSelectFn).removeClass("unselect");

		// 获取值的对应正负形态，往右调整时，参照列的前一列宽度增加，往左调整时，参照列前一列宽度减少，参照列宽度增加
		var 
			num = (global.colResizeX - Math.max(pageX, global.limitLeft)) * -1,
			positive = num > 0,
			limitTrs = this.find("tr[name='colwidthlimit']");
			
		num = Math.abs(num); 
		
		limitTrs.each(function(idx, elem){
			var currWidth, targetWidth, 
				current = fastDev(elem).find("td:eq(" + (cellIndex) + ")"),
				target = current.next();
			
			while(!target.isShow()){
				target = target.next();
			}
			
			currWidth = current.width();
			targetWidth = target.width();
			
			if(positive){ 
				currWidth += num;
				targetWidth -= num;
			}else {
				currWidth -= num;
				targetWidth += num;
				
			}
			
			current.width(currWidth + "px");
			target.width(targetWidth + "px");
		});
		
		// 重新定位感应区与
		this.positionSplitter();
		// 调整结束时重置参照列
		global.resizeCellIndex = null;
		// 隐藏参照线
		global.currLine.hide();
	},
	/**
	 * 根据列名以及排序规则对表格进行排序显示
	 * @param {Event} event
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"sortColumn" : function(event) {
		var fieldName, sortby,
			options = this._options, 
			global = this._global,
			limitSortField = " " +options.limitSortField.split(",").join(" ")+" ",
			td = event.target.tagName === "TD" ? fastDev(event.target) : fastDev(event.target).parents("td:eq(0)"),
			index = +td.prop("cellIndex");
		
		
		// 获取排序列索引
		if(index < global.dataColStart || !td.hasElem() || !td.hasClass("ui-datagrid-headercell")) {
			return;
		}
		
		fieldName = options.columns[index].name;
		
		if(limitSortField.indexOf(" " + fieldName +" ") !== -1){
			return;
		}
		
		options.onSort.call(this, event, index, fieldName);
		
		// 清除上次排序的图标
		global.headerContainer.find(".ui-datagrid-sort-asc").removeClass("ui-datagrid-sort-asc");
		global.headerContainer.find(".ui-datagrid-sort-desc").removeClass("ui-datagrid-sort-desc");
		// 如果上次是正序排列，当前则为倒序排列
		options.sortby = sortby = options.sortby === "asc" ? "desc" : "asc";
		
		// 判断是客户端排序还是服务端排序
		if(options.sort === "client") {
			this.sortByClient(fieldName, sortby, td);
		} else {
			this.sortByServer(fieldName, sortby, index);
		}

	},
	/**
	 * 客户端排序
	 * @param {String} name 排序字段名
	 * @param {String} sortby 排序规则
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"sortByClient" : function(name, sortby, td) {
		if(this.dataset.sort(name, sortby)) {
			var reset = this.addBlankRow(this._options.pageSize);
			
			this.renderDynamicHtml(this._global.dataContainer,"body");
			
			if(reset) {
				this.removeBlankData();
			}
			
			this.processingGrid();
		}
		td.addClass("ui-datagrid-sort-" + sortby);
	},
	/**
	 * 服务端排序
	 * @param {String} name 排序字段名
	 * @param {String} sortby 排序规则
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"sortByServer" : function(name, sortby, index) {
		var that = this;

		this._options.sortField = name;

		this._global.sortHandle = {
			"type" : "normal",
			"handle" : function() {
				that.find(".ui-datagrid-headercell:eq(" + index + ")").addClass("ui-datagrid-sort-" + sortby);
			}
		};

		this.refreshData();
	},
	/**
	 * 调整表头适应表数据的滚动条
	 * @param {JsonObject} global
	 * @param {Number} bodyHeight
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"adaptWidth" : function(global, bodyHeight) {
		global = global || this._global;
		bodyHeight = bodyHeight || global.bodyHeight;
		var width, td,
			//repairNum = 17;
			repairNum = fastDev.Browser.isIE8 ? 18 : 17;
		
		if(global.dataContainer.find("table").height() > bodyHeight) {
			if(global.bodyScroll === false){
				
				this.find("tr[name='colwidthlimit']").each(function(idx, elem){
					td = fastDev(elem).find("td:visible:last");
					width = width || td.width() - repairNum;
					td.width(width);
				});
				this._global.headerContainer.find("table").width("-=17");
				if(fastDev.Browser.isIE6 || fastDev.Browser.isIE7) {
					this._global.dataContainer.find("table").width("-=17");
				}
			}
			global.bodyScroll = true;
		}else{
			if(global.bodyScroll === true){
				if(fastDev.Browser.isIE6 || fastDev.Browser.isIE7 || fastDev.Browser.isIE8){
					this.find("tr[name='colwidthlimit']").each(function(idx, elem){
						td = fastDev(elem).find("td:visible:last");
						width = width || td.width() + repairNum;
						td.width(width - (idx !== 0 ? 1 : 0));
					});
				}
				
				this._global.headerContainer.find("table").width("+=17");
				if(fastDev.Browser.isIE6 || fastDev.Browser.isIE7) {
					this._global.dataContainer.find("table").width("+=17");
				}
			}
			global.bodyScroll = false;
		}
		
	},
	/**
	 * 全选所有数据
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"initSelectAll" : function() {
		var that = this;
		this._global.headerContainer.bind("click", function(event) {
			if(event.target.name === "dg_checkbox_all") {
				var checked = that.find("[name='dg_checkbox_all']").prop("checked");
				that.find("[name='dg_choose']:enabled").prop("checked", checked);
				that.fireBodyEvent(fastDev(event.target), that._options, event, "click", "Click");
			}
		});
	}
});
fastDev.apply(fastDev.Ui.DataGrid, {
	/**
	 * 处理行内信息展开/收缩
	 * @param {String} className 当前行内信息图标样式
	 * @param {fastDev.Core.DomObject} dom 行内信息图标对象
	 * @param {fastDev.Core.DomObject} parent 行内信息图标所在行对象
	 * @param {JsonObject} options DataGrid配置信息
	 * @param {JsonObject} rowData 当前行数据
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"processRowDetail" : function(className, dom, parent, options, rowData) {
		var 
			rowDetailStr = options.rowDetail, 
			detailRow = parent.next(),
			queue = this._global.queue;
			
		// 如果是展开状态则收缩，否则展开
		if(/ui-datagrid-node-close/.test(className)) {
			this.expandRowDetail(detailRow, rowDetailStr, rowData, parent.width(), queue);
		} else {
			this.collapseRowDetail(detailRow);
		}
		
		if(options.height >0){
			queue.add({
				type : "normal",
				handle : fastDev.setFnInScope(this, this.adaptWidth)
			});
		}
		// 切换图标样式
		dom.toggleClass("ui-datagrid-node-close,ui-datagrid-node-open");
	},
	/**
	 * 展开行内信息
	 * @param {fastDev.Core.DomObject} detailRow 行内信息所在行对象
	 * @param {String} rowDetailInfo 行内信息定义
	 * @param {JsonObject} rowData 当前行数据
	 * @param {Number} width 行内信息所在行宽度
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"expandRowDetail" : function(detailRow, rowDetailInfo, rowData, width, queue) {
		detailRow.show();
		// 判断当前行内信息是否被初始化过，如果初始化过则直接显示，否则初始化行内信息
		if(detailRow.attr("init") !== "true") {
			// 处理数据占位符
			rowDetailInfo = this.processRowDetailInfo(rowDetailInfo, rowData);
			// 左右边距20
			detailRow.find("div").append(fastDev.createByHTML(rowDetailInfo));
			// 设置初始化状态
			detailRow.attr("init", true);
			// 调用HTML模式代码编译，保证用户行内信息定义中的控件HTML代码正常执行
			fastDev.Core.ControlBus.compile(null, detailRow.elems[0], queue);
		}
	},
	/**
	 * 收缩行内信息
	 * @param {fastDev.Core.DomObject} detailRow 行内信息所在行对象
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"collapseRowDetail" : function(rowDetail) {
		// 隐藏行内信息行
		rowDetail.hide();
	},
	/**
	 * 处理行内信息定义中的数据占位符
	 * @param {String} rowDetailInfo 行内信息定义
	 * @param {JsonObject} rowData 当前行数据
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"processRowDetailInfo" : function(rowDetailInfo, rowData) {
		fastDev.each(rowData, function(key, value) {
			rowDetailInfo = rowDetailInfo.replace(RegExp("{" + key + "}"), value);
		});
		return rowDetailInfo;
	}
}); 
fastDev.apply(fastDev.Ui.DataGrid, {
	/**
	 * 导出表格数据
	 * @param {String} url 后台导出服务地址
	 * @param {String} type 导出类型xls、pdf、csv
	 * @param {String} [page=current] 默认为current只生成当前DataGrid所展示的数据，改为all则生成所有数据
	 * @param {String} [mode=stream] 导出模式为文件(file)还是流(stream)
	 * @member fastDev.Ui.DataGrid
	 */
	"exportData" : function(url, type, page, mode, streamurl) {
		var name, params, 
			config = {
				"container" : this.elems[0],
				"allowLock" : true,
				"model" : "progress"
			};

		if(page === "all") {
			// 获取总页数
			config.totalValue = this.getPageBarInfo("total");
			// 收集多页导出参数
			params = [null, url, type, mode, streamurl];
			// 设定多页导出方法
			name = "exportAllData";
			// 多页导出时创建导出进度
			this._global.progress = fastDev.create("ProgressBar", config);
		} else {
			// 收集单页导出参数
			params = [url, type, 1];
			// 设定单页导出方法
			name = "exportCurrentData" + (mode !== "file" ? "ByStream" : "");
		}
		// 开始导出
		this[name].apply(this, params);
	},
	/**
	 * 打印表格数据
	 * @param {String} url 后台打印服务地址
	 * @member fastDev.Ui.DataGrid
	 */
	"printData" : function(url, page) {
		this.exportData(url, "pdf", page, "file");
	},
	/**
	 * 导出当前页数据
	 * @param {String} url 后台导出服务地址
	 * @param {String} type 导出文件类型
	 * @param {Number} end 导出结束标示符
	 * @param {String} sessionid 持续导出时的后台会话ID
	 * @param {Function} callback 当次导出结束后的回调函数
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"exportCurrentData" : function(url, type, end, sessionid, callback) {
		// 收集后台生成文件所需要的数据
		// 没有sessionid时则需要导出表头
		var that = this, 
			data = this.collectingData(!sessionid), 
			dataConfig = {
				"expData" : data,
				"expType" : type,
				"expEnd" : end,
				"expId" : sessionid || "",
				"expMode" : 0
			};

		// 设置导出结束后的回调
		callback = callback || this.openFile;
		// 请求后台服务生成文件
		fastDev.post(url, {
			data : dataConfig,
			success : callback
		});
	},
	/**
	 * 使用流模式导出数据
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"exportCurrentDataByStream" : function(url, type, end, sessionid, callback) {
		if(end === 1) {
			this._global.expForm = this.buildExportForm(url, type, end, sessionid);
			this._global.expForm.elems[0].submit();
		}
	},
	/**
	 * 生成数据表单
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildExportForm" : function(url, type, end, sessionid) {
		var 
			data = fastDev.Util.JsonUtil.parseString(this.collectingData(!sessionid)), 
			exportForm = [
				'<form action="' + url + '" method="post" target="excelIFrame">', 
					'<input type="hidden" name="expEnd" value="' + end + '" />', 
					'<input type="hidden" name="expType" value="' + type + '" />', 
					'<input type="hidden" name="expId" value="' + (sessionid || "") + '" />', 
					'<input type="hidden" name="expMode" value="1" />', 
					'<textarea name="expData" style="display:none">' + data + '</textarea>', 
				'</form>',
				'<iframe id="excelIFrame" name="excelIFrame" style="display:none;"></iframe>'
			];
			
		return fastDev(exportForm.join('')).appendTo(document.body);
	},
	/**
	 * 导出所有数据
	 * @param {String} sessionid 持续导出时的后台会话ID
	 * @param {String} url 后台导出服务地址
	 * @param {String} type 导出文件类型
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"exportAllData" : function(sessionid, url, type, mode, streamurl) {
		// 首次导出时需要跳转至第一个数据
		// 其后每次跳转至下一页
		if(sessionid === null ? this.pageFirst() : this.pageNext());
		
		var that = this;
		
		// 页面跳转完成后调用打印当前页接口
		this._global.queue.add({
			type : "normal",
			handle : function() {
				// 获取当前页
				var callback,
					name = "exportCurrentData",
					page = that.getPageBarInfo("page"),
					// 获取总页
					total = that.getPageBarInfo("total"),
					// 判断当前导出是否是最后一页
					islast = page === total;
					
				// 为导出完成设置回调
				if(islast && mode === "stream"){
					name += mode === "stream" ? "ByStream" : "";
					url = streamurl;
				}
				if(!islast){
					callback = fastDev.setFnInScopeByParam(that, that.exportAllData, url, type, mode, streamurl);
				}
				// 导出当前显示页数据
				that[name](url, type, islast ? 1 : 0, sessionid, callback);
				if(islast) {
					that._global.progress.destroy();
				} else {
					that._global.progress.setValue(page);
				}
			}
		});
	},
	/**
	 * 收集当前页数据
	 * @param {Boolean} needtitle 是否需要收集表头数据
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"collectingData" : function(needtitle) {
		// 初始化导出数据
		var exportdata = {
			"data" : []
		};

		// 首次导出会收集列宽信息和表头信息
		if(needtitle === true) {
			exportdata.colwidth = [];
			this.buildColWidthData(exportdata.colwidth);
			this.buildTitleData(exportdata.data);
			exportdata.titlecount = exportdata.data.length;
		}
		// 收集表数据信息
		this.buildData(exportdata.data);
		// 返回收集完成的数据
		return exportdata;
	},
	/**
	 * 生成列宽数据
	 * @param {Array} array 列宽数据存储对象
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildColWidthData" : function(array) {
		var columns = this._global.headerContainer.find("tr:eq(0) td");
		
		columns.each(function(elem) {
			array.push(fastDev(elem).width());
		});
	},
	/**
	 * 生成表头数据
	 * @param {Array} array 表头数据存储对象
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildTitleData" : function(array) {
		var rows = this._global.headerContainer.find("tr:gt(0)");
		
		rows.each(function(row) {
			var cells = [];
			fastDev(row).find("td").each(function(idx, cell) {
				cell = fastDev(cell);
				cells.push(cell.find(".ui-datagrid-cell-inner").getText() + "@" + (cell.prop("rowspan") || 1) + "-" + (cell.prop("colspan") || 1));
			});
			array.push(cells);
		});
	},
	/**
	 * 生成表数据
	 * @param {Array} array 表数据存储对象
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"buildData" : function(array) {
		var rows = this._global.dataContainer.find("tr:gt(0)");
		
		rows.each(function(row) {
			var cells = [];
			fastDev(row).find("td").each(function(idx, cell) {
				cell = fastDev(cell);
				cells.push(cell.find(".ui-datagrid-inner").getText() + "@" + cell.prop("rowspan") + "-" + cell.prop("colspan"));
			});
			array.push(cells);
		});
	},
	/**
	 * 在新窗口打开文件地址出发浏览器下载
	 * @param {String} filepath 文件地址
	 * @private
	 * @member fastDev.Ui.DataGrid
	 */
	"openFile" : function(filepath) {
		window.open(filepath);
	}
});
/**
 * @class fastDev.Ui.Tree
 * @extends fastDev.Ui.Component
 * 树控件 提供主流树控件的绝大多数功能，形式有普通树，多选树和单选树。继承自Component。导航类控件。<p>
 * 主要事项：数据量超大时，openFloor设置较小性能较好。
 * 作者：姜玲<p>
 *
 *		<div itype="Tree"  initSource="data.txt" showIco="true" topParentid="0" openFloor=2></div>
 */
fastDev.define("fastDev.Ui.Tree",{
	"extend" : "fastDev.Ui.Component",
	"alias" : "Tree",
	"_options" : {
		/**
		 * @cfg {Json}
		 * 合法的json数据源，必须有[val，id，pid]复选树加chk[值为true，part，false]，单选树加radio[值同chk]，异步树加asyn[值为true,false] font:文本样式 ico:图标样式 disabled:复选框或单选框禁用 nocheck:节点无复选框或单选框 readonly:文本只读
		 */
		"items" : "",
		/**
		 * @cfg {String}
		 * 控件初始化合法的json数据源url
		 */
		"initSource" : "",
		/**
		 * @cfg {String}
		 * 异步的数据源
		 */
		"asyncDataSource" : "",
		/**
		 * @cfg {String} [topParentid="0"]
		 * 顶级节点id
		 */
		"topParentid" : "0",
		/**
		 * @cfg {Number} [openFloor=1]
		 * 默认打开层数
		 */
		"openFloor" : 1,
		/**
		 * @cfg {Number} 
		 * 节点文本的默认长度,默认10个汉字或20个英文，超过长度的截取...，文本悬停有提示
		 */
		"textMaxLength":20,
		/**
		 * @cfg {String} [treeType="normal"]
		 * 树类型，必须是normal;multitree;radiotree其一
		 */
		"treeType" : "normal",
		/**
		 * @cfg {Boolean} [showLine=true]
		 * 是否显示树的连接线
		 */
		"showLine" : true,
		/**
		 * @cfg {Boolean}
		 * 是否显示小图标
		 */
		"showIco" : false,
		/**
		 * @cfg {String}
		 * 默认选中的节点id
		 */
		"currentId" : "",		
		/**
		 * @cfg {String}
		 * 根节点的文本值（非数据中的根节点）
		 */
		"rootValue" : null,
		/**
		 * @cfg {String}
		 * 高度
		 */
		"height":"100%",
		/**
		 * @cfg {String}
		 * 宽度
		 */
		"width":"100%",
		/**
		 * @cfg {Boolean} [hide=false]
		 * 是否隐藏
		 */
		"hide" : false,
		/**
		 * @cfg {Boolean} [disabled=false]
		 * 是否禁用
		 */
		"disabled" : false,
		/**
		 * @cfg {Boolean} [nodeEdit=false]
		 * 是否开启节点右键菜单的添删改功能
		 */
		"nodeEdit" : false,
		/**
		 * @cfg {String}
		 * 鼠标右键点击到节点上的菜单内容项
		 */
		"rightMenu" : null,		
		/**
		 * @cfg {Boolean} [mTreeShowCkb=true]
		 * 复选框树显示多选框
		 */
		"mTreeShowCkb" : true,
		/**
		 * @cfg {Boolean} [onlySelectLeaf=true]
		 * 只能选中叶子节点的文本
		 */
		"onlySelectedLeaf" : false,
		/**
		 * @cfg {Boolean} [mTreeShowCkb=true]
		 * 单选框树显示单选框
		 */
		"mTreeShowRadio" : true,
		/**
		 * @cfg {Boolean}
		 * 根据多选树的叶子节点的选中状况勾选或半勾选其父节点
		 */
		"chkedByLeaf" : false,
		/**
		 * @cfg {String} [radioType="level"]
		 * 单选勾选分组范围有,分"同一级内"level，"整棵树内"all两种
		 */
		"radioType" : "level",
		/**
		 * @cfg {Boolean}
		 * 复选框是否要半选状态的值
		 */
		"partchkValue" : true,	
		/**
		 * @cfg {Boolean}
		 * 单选框是否要半选状态的值
		 */
		"partradioValue":true,	
		/**
		 * @cfg {Boolean} [onlyLeafValue=false]
		 * 多选树或单选树是否仅仅要叶节点的值
		 */
		"onlyLeafValue" : false,
		/**
		 * @cfg {string} 多个用逗号分割
		 * 自定义数据配置数据字段名
		 */
		"customFields" : "",
		/**
		 * @cfg {Boolean}
		 * 是否拖拽 
		 */
		"nodeDrag" :false,
		/**
		 * 数据结构类型
		 * @private 
		 */
		"structure" : "Tree",
		/**
		 * 数据映射，格式{"parentid":"pid","text":"val"}
		 * @private 
		 */
		"mapping" : {'parentid':'pid','text':'val'},
		/**
		 * @event onBeforeDrag
		 * 拖拽之前的事件  ,返回为false则取消
		 * @param {String} id
		 * @return {Boolean}
		 */
		"onBeforeDrag" : fastDev.noop,	
		/**
		 * @event onAfterDrag
		 * 拖拽之后的事件
		 * @param {String} id
		 * @param {String} newpid
		 */
		"onAfterDrag" : fastDev.noop,
		/**
		 * @event onBeforeAdd
		 * 节点添加前的自定义事件(如果添加方法没调用此方法则js生成随机的id添加) ,返回为false则取消
		 * @param {String} pid
		 * @return {String} newid 或者false
		 */
		"onBeforeAdd": fastDev.noop,
		/**
		 * @event onBeforeEdit
		 * 节点编辑前的自定义事件,返回为false则取消编辑
		 * @param {String} id
		 * @return {Boolean}
		 */
		"onBeforeEdit" : fastDev.noop,
		/**
		 * @event onBeforeDel
		 * 节点删除前的自定义事件,返回为false则取消删除
		 * @param {String} id
		 * @return {Boolean}
		 */
		"onBeforeDel": fastDev.noop,
		/**
		 * @event onAfterAdd
		 * 节点添加后的自定义事件
		 * @param {json} item
		 */
		"onAfterAdd": fastDev.noop,
		/**
		 * @event onAfterEdit
		 * 节点编辑后的自定义事件
		 * @param {json} item
		 */
		"onAfterEdit": fastDev.noop,
		/**
		 * @event onAfterDel
		 * 节点删除后的自定义事件
		 * @param {String} id
		 */
		"onAfterDel": fastDev.noop,
		/**
		 * @event onNodeClick
		 * 自定义点击事件
		 * @param {String} id
		 */
		"onNodeClick": fastDev.noop,
		/**
		 * @event onNodeClick
		 * 自定义复选框点击事件
		 * @param {String} id
		 */
		"onCheckClick": fastDev.noop,
		/**
		 * @event onNodeClick
		 * 自定义单选框点击事件
		 * @param {String} id
		 */
		"onRadioClick": fastDev.noop,
		/**
		 * @event onNodeDblClick
		 * 自定义双击事件
		 * @param {String} id
		 */
		"onNodeDblClick": fastDev.noop,
		/**
		 * @event onExpand
		 * 自定义展开事件
		 * @param {String} id
		 */
		"onExpand": fastDev.noop,
		/**
		 * @event onCollect
		 * 自定义收缩事件
		 * @param {String} id
		 */
		"onCollect": fastDev.noop,
		/**
		 * @event onAfterLoad
		 * 数据加载之后
		 */
		"onAfterLoad" : fastDev.noop,
		/**
		 * @event onBeforeLoad
		 * 数据加载之前
		 */
		"onBeforeLoad":fastDev.noop
	},
	"_global" : {
		//数据集
		"items" : "",
		//ul的样式
		"ulCls":"ui-tree",
		//子节点个数
		"itemsLen":0,
		//是否顶级节点
		"isnotRoot":false,
		//树对象
		"thistree":null,
		//树样式
		"treeTypeCls":"",
		//查找数据时的临时数据集
		"findItems":[],
		//全部数据集
		"allItems":[],
		//全部枝节点id
		"allBraIds":"",
		//父节点数据集
		"parentItems":[],
		//收缩节点集
		"collectspan":[]
	},
	"tempate" : [
		'<div id="#{id}" class="ui-tree-panel" style="height:#{height};width:#{width};">',
		'<tpl dynamic>', 
		'<tpl each>',
			'<tpl if(rowid==1 && #{itemsLen}!=999999)>',
				'<ul class="',
				'<tpl if(#{isnotRoot})>',
				'"ui-line"',
				'<tpl else>', 
				'#{ulCls}',
				'</tpl>',
				'">',
			'</tpl>',
		'<li id="{id}"',
		'<tpl if("#{asyncDataSource}"!="" && {asyn}=="true")>',
		' asyn="1"',
		'</tpl>',
		'<tpl if(#{level}==#{openFloor})>',
		' yc="1"',
		'</tpl>',
		
		'>',
            '<div class="ui-tree-node">',
                '<span class="ico-node-close"></span>',
				'<tpl if("#{treeTypeCls}"!="")>',	
                '<span class="ico-#{treeTypeCls}',
				'<tpl if({chk}=="true" || {radio}=="true")>',	
				'-checked',
				'<tpl else if({chk}=="part" || {radio}=="part")>',	
				'-half',
				'</tpl>',	
				'<tpl if({disabled}=="true")>',	
				'-disabled',
				'</tpl>',	
				'<tpl if({nocheck}=="true")>',	
				'-nocheck',
				'</tpl>',	
				'"></span>',
				'</tpl>',	
                '<span class="ui-tree-content">',
				'<tpl if(#{showIco})>',	
					'<span class="ico-folder-close"',
					'<tpl if({ico})>',	
					' ico="{ico}"',
					'</tpl>',	
					'></span>',
				'</tpl>',	
                    '<span class="ui-tree-text',
					'<tpl if({readonly}=="true")>',	
					'-readonly',				
					'</tpl>',	
					' {font}">{val}</span>',
                '</span>',
            '</div>',
        '</li>',
			'<tpl if(rowid==#{itemsLen})>',
			'</ul>',
			'</tpl>',
		'</tpl>',
		'</tpl>',
		'</div>'
	],
	"tplParam" : ["id","height","width","ulCls","treeTypeCls","showIco","itemsLen","asyncDataSource","isnotRoot"],
	"fields" : [{name:"id"},{name:"parentid"},{name:"text"},{name : "chk",defaultValue : "false"},{name : "radio",defaultValue : "false"},{name : "asyn",defaultValue : "false"},{name:"font",defaultValue : ""},{name:"ico",defaultValue : ""},{name:"readonly",defaultValue : "false"},{name:"disabled",defaultValue : "false"},{name:"nocheck",defaultValue : "false"}],	
	/**
	 * 面板参数准备
	 * @protected
	 */
	"ready" : function(options, global) {
		if(!options.showLine){
			global.ulCls="ui-tree ui-tree-noline";
		}
		if(options.treeType==="multitree" && options.mTreeShowCkb===true){
			global.treeTypeCls="checkbox";
		}else if(options.treeType==="radiotree" && options.mTreeShowRadio===true){
			global.treeTypeCls="radio";
		}
		if(options.id===""){
			options.id=fastDev.getID();
		}
		if(options.customFields){			
			this.fields =this.fields.slice(0).concat(options.customFields.split(','));
		}
		if(!!options.mapping){
			var mapping=options.mapping;
			if(fastDev.isString(options.mapping)){
				mapping=fastDev.Util.JsonUtil.parseJson(options.mapping);
			}	
			for (var p in mapping){
				for(var i=0,field;(field=this.fields[i]);i++){
					if(field.name===p){
					this.fields[i].mapping=mapping[p];
					this.fields =this.fields.slice(0).concat(mapping[p]);
					break;
					}	
				}
			}
		}
	},
	// 使用父类文档说明
	"construct" : function(options,global){		
		global.thistree = fastDev(this.elems[0]);
	},
	// 使用父类文档说明
	"init" :function(options, global){
		// 树节点单击事件句柄
		global.thistree.bind("click",fastDev.setFnInScope(this, this.treeClickHandle));
		// 鼠标滑入树节点事件句柄
		global.thistree.bind("mouseover",fastDev.setFnInScope(this, this.treeMouseoverHandle));
		// 鼠标滑出树节点事件句柄
		global.thistree.bind("mouseout",fastDev.setFnInScope(this, this.treeMouseoutHandle));
		// 树节点单击事件句柄
		global.thistree.bind("dblclick",fastDev.setFnInScope(this, this.treeDblClickHandle));
	},
	/**
	 * 初始化控件列表
	 * @param {Array} items数据项
	 * @protected
	 */
	"constructItems" : function() {
		var me = this,options=this._options,global=this._global,dataSet,len;
		//全部的父id
		global.allBraIds="";
		options.onBeforeLoad();
		dataSet=this.dataset.structure.getNode(options.topParentid);
		if(!!dataSet){
			dataSet=dataSet.children;
		}else{
		var topitems = {
			parentid : "",
			id : options.topParentid,
			text : ""+options.rootValue
		};
		this.dataset.structure.addNode(topitems);
		this.dataset.structure.initNodes();
		
		if(!!options.rootValue) {
			dataSet=[this.dataset.structure.getRoot()];
		}else{
			dataSet=this.dataset.structure.getRoot().children;
		}
		}
		len=dataSet.length;			
		var div= global.thistree;// =fastDev(this.elems[0]);
		if(len===0){
			return;
		}
		var html="";
		if(div.find(".ui-tree").elems.length>0){
			html=this.dynamicTemplate([this.dataset.structure.getRoot()],1,false,false,options,global);
			div.elems[0].innerHTML="";
		}else{
			html=this.dynamicTemplate(dataSet,1,false,false,options,global);
		}
		div.append(fastDev(html.join('')));
		this.setConstruct(options,global);	
		options.onAfterLoad.call(this);		
	},
	/**
	 * 设置控件属性
	 * @private
	 */
	"setConstruct" : function(options,global) {
		this.setTreeCls();
		if(options.hide){
			 this.hide();
		}
		if(options.currentId) {
			this.setCurrentId(options.currentId);
		}
	},
	/**
	 * 设置树的图标样式
	 * @private
	 */
	"setTreeCls" : function(li){
		var lastuls =this._global.thistree.find("ul>li:last-child>ul");
		lastuls.addClass("ui-line-no");
		if(lastuls.elems.length===0){
			this._global.thistree.find("ul.ui-line-no").removeClass("ui-line-no");
		}
		if(li){
		var lastdivs= li.find("ul>li:last-child>div");
		lastdivs.find("span.ico-node").setClass("ico-node-last");
		lastdivs.find("span.ico-node-close").setClass("ico-node-close-last");
		lastdivs.find("span.ico-node-open").setClass("ico-node-open-last");	
		}
	},
	/**
	 * 单击复选框响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"treeClickHandle" : function(event){		
		var that=this,options=this._options,id,checked, clickTg = fastDev(event.target);
		var ctgclass = clickTg.attr("class");		
		if(	ctgclass === undefined){
			return;
		}
		if(ctgclass.indexOf("ico-checkbox") > -1) {
			//复选框点击事件
			that.chkclick(clickTg);
			if(options.onCheckClick!==fastDev.noop &&  ctgclass.indexOf("-disabled")===-1){
				id=clickTg.parents("li:first").attr("id");
				checked=ctgclass.indexOf("ico-checkbox-checked") > -1?false:true;
				options.onCheckClick.call(that,event,id,checked);
			}
		} else if(ctgclass.indexOf("ico-radio") > -1) {
			//单选框点击事件
			that.radioclick(clickTg);
			if(options.onRadioClick!==fastDev.noop && ctgclass.indexOf("-disabled")===-1){
				id=clickTg.parents("li:first").attr("id");
				checked=ctgclass.indexOf("ico-radio-checked") > -1?false:true;
				options.onRadioClick.call(that,event,id,checked);
			}
		} else if(ctgclass.indexOf("ico-node-open") > -1) {
			that.collect(clickTg);
		} else if(ctgclass.indexOf("ico-node-close") > -1) {
			that.expand(clickTg);
		} else if(ctgclass.indexOf("ui-tree-content") > -1) {
			that.textClick(clickTg,event);
		} else if(/(ui-tree|icon)-(file|text|folder-open|folder-close)/.test(ctgclass)){
			that.textClick(clickTg.parent("span"),event);
		}	
	},
	/**
	 * 单击复选框响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"treeMouseoverHandle" : function(event){
		var span = fastDev(event.target),treeobj=this._global.thistree;
		treeobj.find(".ui-tree-over").removeClass("ui-tree-over");	
		var cls=span.getClass();			
		if(cls.indexOf("-disabled")>0 || cls.indexOf("-readonly")>0){
		}else if(span.hasClass("ui-tree-content")){
			var txt=span.children(".ui-tree-text-readonly").elems;
			if(txt.length===0){
				span.addClass("ui-tree-over");
			}
		}else if(/ico-(checkbox|radio)(-(checked|half))?/.test(cls)){				
			if(cls.indexOf("-over")===-1) {
				span.setClass(cls+"-over");
			}
		}else if(/(ui-tree|icon)-(file|text|folder-open|folder-close)/.test(cls)){
			span.parent("span.ui-tree-content").addClass("ui-tree-over");
		}
	},
	/**
	 * 单击复选框响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"treeMouseoutHandle" : function(event){
		var span = fastDev(event.target),treeobj=this._global.thistree;
		treeobj.find("span.ui-tree-over").removeClass("ui-tree-over");
		var cls=span.getClass();
		span.setClass(cls.replace("-over",""));	
	},
	/**
	 * 单击复选框响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"treeDblClickHandle" : function(event){
		var that=this,options=this._options, clickTg = fastDev(event.target);
		var li=clickTg.parents("li:first");
		var id=li.attr("id");
		var val=that.getValByid(id);				
		if(id){					
			var lidiv=li.children("div");
			var opennode=lidiv.find("[class^='ico-node-open']");
			var closenode=lidiv.find("[class^='ico-node-close']");
			//双击也收缩展开
			if(opennode.elems.length>0){
				that.collect(opennode);
			}else if(closenode.elems.length>0){
				that.expand(closenode);
			}
			if(options.onNodeDblClick!==fastDev.noop){	
				options.onNodeDblClick.call(that,event,id,val);
			}
		}
	},
	/**
	 * 静态模板
	 * @param {Object} params
	 * @return {}
	 */
	"staticTemplate" : function(params) {
	  return '<div id="'+params.id+'" class="ui-tree-panel" style="height:'+params.height+';width:'+params.width+';"></div>';
	},
	/**
	 * 创建节点
	 * @param {Object} children 节点数据
	 * @param {Number} level 现在展开的层次
	 * @param {Boolean} isnotRoot 是否顶级节点
	 * @param {Boolean} isonlyli 是否仅仅创建li
	 * @private
	 */
	"dynamicTemplate" : function(children,level,isnotRoot,isonlyli,options,global){
		var len=children.length,openClose="",text="",emptyObj,html,asyn=false,
		levelSameFloor=(""+level===""+options.openFloor);
		if(isonlyli){
			 html=[];
		}else{
			 html = ['<ul class="'+(isnotRoot ? "ui-line" : global.ulCls)+'">'];
		}
				for(var i=0;i<len && level<=options.openFloor;i++){
					var node=children[i];
					emptyObj=!fastDev.isEmptyObject(node.children);
					html.push('<li id="'+node.id+'"');
					if(options.asyncDataSource!=="" && (node.asyn==="true" || node.asyn==="1" || node.asyn===true || node.asyn===1) && emptyObj===false){
						asyn=true;
						//异步加载标记
						html.push(' asyn="1" ');
					}else{
						asyn=false;
					}
					if(emptyObj && levelSameFloor){
						//延迟加载标记
						html.push(' yc="1" ');
					}	
					//节点+-L|-的图标
					html.push('><div class="ui-tree-node"><span class="ico-node');
					if(emptyObj || asyn){
						if(asyn ||levelSameFloor){
							openClose="-close";
						}else{
							openClose="-open";
						}
						html.push(openClose);
					}else{
						openClose="";
					}
					if(len===1 && isnotRoot===false){
						html.push('-last');//end
					}else if(i===len-1){
						html.push('-last');
					}else if(i===0 && isnotRoot===false && emptyObj){
						html.push('-first');
					}
					html.push('"></span>');
					if(global.treeTypeCls!==""){
						//复选框（单选框）图标
						html.push('<span class="ico-'+global.treeTypeCls);
						if(node.chk==="true" || node.radio==="true"){
							//选中
							html.push('-checked');
						}else if(node.chk==="part" || node.radio==="part"){
							//半选中
							html.push('-half');
						}	
						if(node.disabled==="true"){
							//禁用
							html.push('-disabled');
						}
						if(node.nocheck==="true"){
							//无复选框（单选框）
						html.push('-nocheck');
						}
						html.push('"></span>');
					}					
					html.push('<span class="ui-tree-content">');					
					if(options.showIco){
						//文件夹文件的图标
						html.push('<span class="ico-');
						if(!!openClose){
							html.push('folder'+openClose);
						}else{
							html.push('file');
						}
						if(!!node.ico){
							html.push(' '+node.ico+openClose+'" ico="'+node.ico+'"');
						}else{
							html.push('"');
						}
						html.push('></span>');
					}
					//文本
                    html.push('<span class="ui-tree-text');
					if(node.readonly==="true"){
						html.push('-readonly');			
					}
					html.push(' '+node.font+'"');
					text=node.text;
					//文本超过默认长度出...
					if(text.length*2>options.textMaxLength){
						if(fastDev.Util.StringUtil.getChLength(text)>options.textMaxLength && text.indexOf('<')===-1){
						html.push(' title="'+text+'"');
						text=text.substr(0,(options.textMaxLength-4)/2)+"...";
						}
					}					
					html.push('>'+text+'</span></span></div>');
					if(emptyObj){
						html = html.concat(arguments.callee(node.children,level+1,true,false,options,global));						
					}
					html.push('</li>');
				}
				if(isonlyli===false){
					html.push('</ul>');
				}
				return html;
	},	
	/**
	 *  文本选中事件
	 * @param {Object} span
	 * @private
	 */ 
	"textClick" : function(span,e){
		var options=this._options;
		var txt=span.children("span.ui-tree-text-readonly").elems;
		if(txt.length>0){
			//只读的节点
			return false;
		}
		if(options.onlySelectedLeaf){
			var node=span.prev("span.ico-node").elems;
			var nodelast=span.prev("span.ico-node-last").elems;
			//其实没点到
			if((node.length+nodelast.length)===0){
				return false;
			}
		}
		//变更节点的样式并触发自定义事件
		if(options.treeType==="multitree" && options.mTreeShowCkb===false){
			if(span.hasClass("ui-tree-selected")){
				span.removeClass("ui-tree-selected");
			}else{
				span.addClass("ui-tree-selected");
			}
		}else if(options.treeType==="radiotree" && options.mTreeShowRadio===false && options.radioType==="level"){
			var parentUl=span.parents("ul:first");
			var xdradio=parentUl.children("li").children("div").find("span.ui-tree-content");
			xdradio.removeClass("ui-tree-selected");
			span.addClass("ui-tree-selected");
		}else{		
			this._global.thistree.find("span.ui-tree-selected").removeClass("ui-tree-selected");
			span.addClass("ui-tree-selected");
		}
		if(options.onNodeClick!==fastDev.noop){
			var id=span.parent("div").parent("li").attr("id");
			var val=this.getValByid(id) || span.children("span.ui-tree-text").getText();
			options.onNodeClick.call(this,e,id,val);
		}
	},
	/**
	 * 设置复选框的样式
	 * @private
	 */
	"setChkCls" : function(chklist,cls){
		var len=chklist.length;
		for(var i=0;i<len;i++){
			var chk=fastDev(chklist[i]);
			var oldcls=chk.getClass();
			if(oldcls.indexOf("-disabled")===-1 && oldcls.indexOf("-nocheck")===-1){
				chk.attr("class", cls);
			}
		}
	},
	/**
	 *  复选框选中事件
	 * @param {Object} span
	 * @private
	 */
	"chkclick" : function(clickTg){
		//复选框选中事件	
		var options = this._options;
		var clickclass = clickTg.attr("class");
		if(clickclass.indexOf("disabled")>0){
			return false;
		}		
		var tgclass = clickclass.indexOf("ico-checkbox-checked")>-1 ? "ico-checkbox" : "ico-checkbox-checked";
		//上面选中下面一起选中
		var chkdiv= clickTg.parent("div");
		var li=chkdiv.parent("li");
		var id =li.attr("id");
		var chkdivul=li.children("ul");//chkdiv.next("ul");
		//如果是延迟加载的父节点选中，子节点全部选中
		if(li.attr("yc")==="1" || li.find("[yc]").elems.length>0){
			var span=clickTg.prev("span");
			var cls=span.getClass();
			this.setAllExpandByPid(id,true);
			if(cls.indexOf("ico-node-close")>-1){
				this.collect(span);
			}
			chkdivul=li.children("ul");//chkdiv.next("ul");
		}
		var chkchilds = chkdivul.find("[class^='ico-checkbox']");
		var chkdischilds=chkdivul.find("[class^='ico-checkbox'][class$='disabled']");
		if(chkdischilds.elems.length===0){
			chkchilds.attr("class", tgclass);
		}else{
			this.setChkCls(chkchilds.elems,tgclass);
		}
		clickTg.attr("class", tgclass);
		//下面都选中的话，上面也选中,递归
		
		//父节点下所有的节点复选框
		var pli = li.parents("li:first");
		if(pli.elems.length===0){
			return;
		}
		var pid=pli.attr("id");
		var pchk = pli.children("div").children("span:eq(1)");			
		var pdiv=pli.children("ul").children("li").children("div");
		var xd = pdiv.find("[class^='ico-checkbox']");		
		var xdchked = pdiv.find("[class^='ico-checkbox-checked']");
		var xdchkhalfed = pdiv.find("[class^='ico-checkbox-checked'],[class^='ico-checkbox-half']");	
		var pchkclass = pchk.attr("class");		
		if(xd.elems.length===xdchked.elems.length){
			//兄弟全部选中	
			this.setChkCls(pchk.elems,"ico-checkbox");
			this.chkclick(pchk);
		}else if(xdchkhalfed.elems.length===0){
			//兄弟全部没选中
			this.setChkCls(pchk.elems,"ico-checkbox-checked");
			this.chkclick(pchk);
		}else{
			//兄弟部分选中
			this.setChkCls(pchk.elems,"ico-checkbox-half");
			var ppdiv=pchk.parents("li").children("div");
			var ppchk = ppdiv.find("[class^='ico-checkbox']");			
			var ppchkdis=ppdiv.find("[class^='ico-checkbox'][class$='disabled']");
			if(ppchkdis.elems.length===0){
				ppchk.attr("class", "ico-checkbox-half");
			}else{
				this.setChkCls(ppchk.elems,"ico-checkbox-half");
			}	
		}
	},
	/**
	 *  单选框选中事件
	 * @param {Object} span
	 * @private
	 */
	"radioclick" : function(clickTg){
		var options = this._options, tgclass, pa, childsameparentchbs,thistree=this._global.thistree;
		var clickclass = clickTg.attr("class");
		if(clickclass.indexOf("disabled")>0){
			return false;
		}
		//得到当前节点状态
		tgclass =clickclass.indexOf("ico-radio-checked")>-1 ? "ico-radio" : "ico-radio-checked";
		//	1.单选勾选分组范围有"同一级内"和"整棵树"内两种
		if(options.radioType === "level") {
			//兄弟节点选中的单选框为未选中状态
			pa = clickTg.parents("li:first").parent("ul");
			childsameparentchbs = pa.children("li").children("div").children(".ico-radio-checked");
			childsameparentchbs.attr("class", "ico-radio");
			//选中节点
			clickTg.attr("class", tgclass);
			//清除所有半选中状态
			thistree.find("span.ico-radio-half").attr("class", "ico-radio");
			//得到所有选中节点，并给这些节点的直系父祖辈未选中的节点赋半选中状态
			var allsedradio = thistree.find(".ico-radio-checked,ico-radio-checked-over");
			allsedradio.parents("li").children("div").children(".ico-radio").attr("class", "ico-radio-half");
		} else if(options.radioType === "all") {
			//整棵树：
			//设置所有节点都为未选状态。
			thistree.find("[class^='ico-radio']").attr("class", "ico-radio");
			//如果当前节点选中的话，直系父祖辈节点变为半选中状态。
			if(tgclass === "ico-radio-checked") {
				clickTg.parents("li").children("div").children(".ico-radio").attr("class", "ico-radio-half");
			}
			clickTg.attr("class", tgclass);
		}
	},
	/**
	 *  收缩
	 * @param {Object} span
	 * @private
	 */ 
	"collect":function(span){
		var sclass = span.attr("class"),
		closecls= sclass.replace("-open","-close"),			
		div=span.parent("div"),
		folderSpan = div.find("span.ico-folder-open"),
		li=div.parent("li"),
		id=li.attr("id");				
		span.attr("class",closecls);	
		folderSpan.attr("class","ico-folder-close");			
		var ul=li.children("ul");		
		ul.css("display", "none");	
		var icoCls=folderSpan.attr("ico");
		if(icoCls){
			folderSpan.addClass(icoCls+"-close");
		}			
		this._options.onCollect.call(this,id);
	},
	/**
	 * 通过父节点添加其下面的子节点
	 * @param {string} pid
	 * @param {} options
	 * @param {} global
	 * @private
	 */
	"addNodeByPid" : function(pid,options,global){
		    options.openFloor=1;
			var dataSet=this.dataset.structure.getNode(pid),			
			iddiv =global.thistree.find("li[id='"+pid+"']"),
			idul=iddiv.children("ul"),
			onlyli=idul.elems.length>0;
			if(pid===options.topParentid && !options.rootValue){
			idul =this._global.thistree.find("ul:first");
			onlyli=true;
		    }
			var html =this.dynamicTemplate(dataSet.children,1,true,onlyli,options,global);
			if(onlyli){
				idul.append(fastDev(html.join('')));
			}else{
				iddiv.append(fastDev(html.join('')));			
			}
	},
	/**
	 * 添加指定节点
	 * @param {string} id
	 * @param {} options
	 * @param {} global
	 * @private
	 */
	"addNodeById" : function(id,options,global){
		    options.openFloor=1;
			var dataSet=this.dataset.structure.getNode(id),
			pid=dataSet.parentid,
			iddiv =global.thistree.find("li[id='"+pid+"']"),
			idul=iddiv.children("ul"),
			onlyli=idul.elems.length>0;
			if(pid===options.topParentid && !options.rootValue){
			idul =this._global.thistree.find("ul:first");
			onlyli=true;
		    }
			var html =this.dynamicTemplate([dataSet],1,true,onlyli,options,global);
			if(onlyli){
				idul.append(fastDev(html.join('')));
			}else{
				iddiv.append(fastDev(html.join('')));			
			}
	},
	/**
	 *  展开
	 * @param {Object} span
	 * @private
	 */ 
	"expand":function(span){
		var options=this._options,
		global=this._global,
		that=this,
		sclass = span.attr("class"),
		closecls= sclass.replace("-close","-open"),
		div=span.parent("div"),	
		folderSpan = div.find("span.ico-folder-close"),
		li=div.parent("li"),
		id=li.attr("id");		
		span.attr("class",closecls);			
		folderSpan.attr("class","ico-folder-open");	
		//如果是延迟加载的节点
		if(li.attr("yc")==="1"){
			this.addNodeByPid(id,options,global);
			li.removeAttr("yc");
			this.setTreeCls(li);			
			this.setPart(li);
		}
		//如果是异步节点
		if(li.attr("asyn")==="1"){
			var asyncurl=options.asyncDataSource,url="";	
			if(asyncurl.indexOf("?")>0){
			  url=asyncurl+"&id="+id;	
			}else{
			  url=asyncurl+"?id="+id;
			}		   
		   var createNode = function(item) {
			this.dataset.fill(item,false,true);	
			that.addNodeByPid(id,options,global);
			li.removeAttr("asyn");
			that.setTreeCls(li);
		  };
		  var asynProxy= fastDev.create("Proxy", {
				url : url,
				queue : global.queue,
				onAfterLoad : fastDev.setFnInScope(this, createNode)
		  });
		  asynProxy.load();
		}
		//样式变更
		var ul=li.children("ul");		
		ul.css("display", "block");
		var icoCls=folderSpan.attr("ico");
		if(icoCls){
			folderSpan.addClass(icoCls+"-open");
		}
		this._options.onExpand.call(this,id);
	},
	/**
	 * 把所有展开的节点全部收缩
	 */
	"setAllCollect":function(){
		var opennode=this._global.thistree.find("[class^='ico-node-open']");
		var len=opennode.elems.length;
		for(var i=0;i<len;i++){
			this.collect(fastDev(opennode.elems[i]));
		}
	},
	/**
	 * 把所有展开的节点全部展开
	 */
	"setAllExpand":function(){
		this.setAllExpandByPid(this._options.topParentid);
	},
	/**
	 * 把pid下的所有节点全部展开
	 * @param {String} pid
	 */
	"setAllExpandByPid":function(pid,isoldstate){
		var closenode,global=this._global;
		if(pid===this._options.topParentid){
			closenode=global.thistree.find("[class^='ico-node-close']");
		}else{
			closenode=global.thistree.find("li[id='"+pid+"'] [class^='ico-node-close']");
		}		
		var len=closenode.elems.length,span,spancls,collectspan=global.collectspan;
		for(var i=0;i<len;i++){
			span=fastDev(closenode.elems[i]);
			spancls=span.getClass();
			this.expand(span);
			if(spancls.indexOf("ico-node-close")>-1 && isoldstate===true){
				collectspan.push(span);
			}
			if(pid===this._options.topParentid){
			closenode=global.thistree.find("[class^='ico-node-close']");
			}else{
			closenode=global.thistree.find("li[id='"+pid+"'] [class^='ico-node-close']");
			}
			if(closenode.elems.length>0){
				this.setAllExpandByPid(pid);
			}else{
				return;
			}
		}
		var slen=collectspan.length;
		for(var j=0;j<slen;j++){
			this.collect(collectspan[j]);
		}
	},
	/**
	 * 给选中的节点的父级节点给半选值
	 * @param {String} leafs
	 */
	"setPart" : function(leafs) {
		//给选中的节点的父级节点给半选值	
		var options=this._options;
		if(options.treeType==="radiotree" || options.treeType==="multitree" ){
			var chked,type="checkbox";
			if(options.treeType==="radiotree"){
				type="radio";
			}
			if(leafs) {
				chked = leafs.children("div").children("span.ico-"+type+"-checked").elems;
			} else {
				chked = this._global.thistree.find("span.ico-"+type+"-checked").elems;
			}
			var chklength = chked.length;
			for(var i = 0; i < chklength; i += 1) {
				this.chkState(chked[i],type);
			}
		}
	},
	/**
	 * 如果当前节点是选中状态，那么其子孙节点全部选中
	 * @private
	 */
	"chkState" : function(clickTg,type) {
		//如果当前节点是选中状态，那么其子孙节点全部选中
		var chkchilds = fastDev(clickTg).parent("div").parent("li").children("ul").find("span[class^='ico-"+type+"']");
		var tgclass = fastDev(clickTg).getClass();
		if(chkchilds.elems.length > 0 && tgclass === "ico-"+type+"-checked") {
			chkchilds.attr("class", tgclass);
		}
	},
	/**
	 *   判断id是否父节点
	 * @param {String} id
	 * @return {Boolean}
	 */
	"isBranch" : function(id) {
		//是否父节点--根据原始数据源判断	
		if(id){
			if(!!this._options.asyncDataSource){
				var nn=this.getNodeByid(id);
				if(nn){
				var asyn=nn.asyn;
				if(asyn==="true" || asyn==="1" || asyn===true || asyn===1){
					return true;
				}
				}
			}
			var node=this.getItemsBypid(id);
			if(!node || node.length===0){
				return false;
			}else{
				return true;
			}
		}
	},
	/**
	 * 得到传入id的父id
	 * @param {String} id
	 * @return {String} pid
	 */
	"getParentid" : function(id) {
		// 得到传入id的父id
		var pid,node=this.getNodeByid(id);
		if(node){
		   pid=node.parentid;
		}
		return pid;
	},
	/**
	 * 得到节点id的文本
	 * @param {String} id
	 * @return {String}
	 */
	"getValByid" : function(id) {
		var val,node=this.getNodeByid(id);
		if(node){
		   val=node.text;
		}
		return val;
	},
	/**
	 * 查找所有的节点对象
	 * @return {Json}
	 */
	"getItems" : function(){
		var items=this.dataset.select();
		return items;
	},
	/**
	 * 查找指定id的节点对象
	 * @param {String} id
	 * @return {Object}
	 */
	"getNodeByid" : function(id) {
		return this.getItemsByid(id);
	},
	/**
	 * 得到某个节点的数据
	 * @private
	 */
	"getItemsByid" : function(id){
		return this.dataset.structure.getNode(id);
	},
	"getItemsBypid" : function(pid){
		return this.dataset.structure.getNode(pid).children;
	},	
	/**
	 * 查找指定id数组的节点文本数组
	 * @param {String} ids
	 * @return {String}
	 */
	"getValsByids" : function(ids) {
		var vals = "";
		var idssz = ids.split(',');
		var idssz_length = idssz.length;
		for(var i = 0; i < idssz_length; i += 1) {
			if(i === idssz_length - 1) {
				vals += this.getValByid(idssz[i]);
			} else {
				vals += this.getValByid(idssz[i]) + ",";
			}
		}
		return vals;
	},	
	/**
	 * 得到多选框获得值的类型
	 * @return {String}
	 * @private
	 */
	"getValueType" : function() {
		var options = this._options;
		if(options.onlyLeafValue) {
			return "onlyLeafValue";
		} else {
			if(options.treeType==="multitree"){
				return options.partchkValue?"partchkValue":"allchkValue";				
			}else{
				return options.partradioValue?"partradioValue":"allradioValue";
			}
		}
	},
	/**
	 *  根据参数获取复选框选中值
	 * @param {String} type 有onlyLeafValue、partchkValue、allchkValue三种
	 * @return {Array}
	 */
	"getChkedIds" : function(type) {
		//获取复选框选中值
		//1.得到所有看得见的构建好的节点的选中值
		var ids = "";
		if(type === "onlyLeafValue") {
			ids = this.getChkLeafVal("checkbox");
		} else if(type === "partchkValue") {
			ids = this.getChkPartAllVal("checkbox");
		} else if(type === "allchkValue") {
			ids = this.getChkAllVal("checkbox");
		}
		// var time=new Date();		
		//var noleafs = this._global.thistree.find("li[yc]");
		var hasyc = this.elems[0].innerHTML.indexOf(" yc=")>0;
		// alert(new Date()-time);
		if(!hasyc){
			return ids;
		}
		//2.得到所有没构建子节点的父节点
		var items = this.getItems();//dataset.select();
		//var noleafs =this._global.thistree.find("li[yc]");
		if(hasyc) {
			if(ids !== "") {
				ids += ",";
			}
			//3.得到2中所有选中节点
			//var nolchilddiv=noleafs.children("div");
			var allchk = this._global.thistree.find("li[yc]>div>[class^='ico-checkbox-checked']").elems;
			//4.得到2中所有半选中节点
			var partchk = this._global.thistree.find("li[yc]>div>[class^='ico-checkbox-half']").elems;
			//5.得到3中节点的所有子孙级节点，全算选中
			var allchklen = allchk.length;
			var idtemp = "";
			for(var i = 0; i < allchklen; i += 1) {
				//var id = fastDev(allchk[i]).parent("div").parent("li").prop("id");
				var id = allchk[i].parentNode.parentNode.id;
				if(id !== "") {
					idtemp = this.getIdsByItems(this._findNodesByPid(id));
					if(type === "onlyLeafValue") {//叶子节点
						var idta = idtemp.split(',');
						var tlen = idta.length;
						for(var j = 0; j < tlen; j++) {
							if(idta[j] && (this.isBranch(idta[j]) === false)) {
								ids += idta[j] + ",";
							}
						}
					} else {
						ids += idtemp + ",";
					}
				}
			}
			//6.得到4中节点的所有子孙级节点在数据源中的选中节点
			var partchklen = partchk.length;
			for(var k = 0; k < partchklen; k += 1) {
				var chkid = fastDev(partchk[k]).parent("div").parent("li").attr("id");
				if(chkid !== "") {
					ids += this.getChkedIdsByDataType(chkid, type) + ",";
				}
			}
			if(ids && ids.length > 0) {
				ids = ids.substring(0, ids.length - 1);
			}
		}
		return ids;
	},
	/**
	 *  根据参数获取单选框选中值
	 * @param {String} type 有onlyLeafValue、partradioValue、allradioValue三种
	 * @return {Array}
	 */
	"getRadioedIds" : function(type) {
		//获取单选框选中值
		//1.得到所有看得见的构建好的节点的选中值
		var ids = "";
		if(type === "onlyLeafValue") {
			ids = this.getChkLeafVal("radio");
		} else if(type === "partradioValue") {
			ids = this.getChkPartAllVal("radio");
		} else if(type === "allradioValue") {
			ids = this.getChkAllVal("radio");
		}
		var noleafs =this._global.thistree.find("li[yc]");
		if(noleafs.elems.length===0){
			return ids;
		}
		//2.得到所有没构建子节点的父节点
		
		if(noleafs.length > 0) {
			if(ids !== "") {
				ids += ",";
			}
			var nolchilddiv=noleafs.children("div");
			//3.得到2中所有选中节点
			var allradio = nolchilddiv.children("[class=^'ico-radio-checked']").elems;
			//4.得到2中所有半选中节点
			var partradio = nolchilddiv.children("[class=^'ico-radio-half']").elems;
			//5.得到3中节点的所有子孙级节点，全算选中
			var allradiolen = allradio.length;
			for(var i = 0; i < allradiolen; i += 1) {
				//var id = fastDev(allradio[i]).parent("div").parent("li").prop("id");
				var id = allradio[i].parentNode.parentNode.id;
				if(id !== "") {
					ids += this.getIdsByItems(this._findNodesByPid(id)) + ",";
				}
			}
			//6.得到4中节点的所有子孙级节点在数据源中的选中节点
			var partradiolen = partradio.length;
			for(var k = 0; k < partradiolen; k += 1) {
				//var id = fastDev(partradio[i]).parent("div").parent("li").prop("id");
				var radid = partradio[k].parentNode.parentNode.id;
				if(radid) {
					ids += this.getRadioedIdsByDataType(radid, type) + ",";
				}
			}
			if(ids && ids.length > 0) {
				ids = ids.substring(0, ids.length - 1);
			}
		}
		return ids;
	},
	/**
	 * 根据dom得到复选框的所有选中值
	 * @return {Array}
	 * @private
	*/
	"getChkAllVal" : function(type) {
		// 得到复选框的所有选中值 页面上的
		var chked = this._global.thistree.find("span[class^='ico-"+type+"-checked']").elems;
		var chkvals = "";
		var chkedlength = chked.length,li,id;
		if(chked && chkedlength > 0) {
			for(var i = 0; i < chkedlength; i += 1) {
				//li=fastDev(chked[i]).parent("div").parent("li");
				//if(li.elems.length>0){
				//chkvals = chkvals +li.prop("id") + ",";
				chkvals = chkvals +chked[i].parentNode.parentNode.id + ",";
				//}
			}
			chkvals = chkvals.substring(0, chkvals.length - 1);
		}
		return chkvals;
	},
	/**
	 * 根据得到复选框的所有选中节点包括半选中节点的选中id值
	 * @return {Array}
	 * @private
	 */
	"getChkPartAllVal" : function(type) {
		//得到复选框的所有选中节点包括半选中节点的选中id值ui-tree-chk-part		 页面上的
		var chked = this._global.thistree.find("span[class^='ico-"+type+"-checked']").elems;
		var chkhalfed = this._global.thistree.find("span[class^='ico-"+type+"-half']").elems;
		var chkvals = "";
		var chkedlength = chked.length;
		var chkhalfedlen = chkhalfed.length,li,li2;
		for(var i = 0; i < chkedlength; i += 1) {
			//li= fastDev(chked[i]).parent("div").parent("li");
			//if(li.elems.length>0){
			//chkvals = chkvals +li.prop("id") + ",";
			chkvals = chkvals +chked[i].parentNode.parentNode.id + ",";
			//}
		}	
		for(var k = 0; k < chkhalfedlen; k += 1) {
			//li2=fastDev(chkhalfed[i]).parent("div").parent("li");
			//if(li2.elems.length>0){
			//chkvals = chkvals +li2.prop("id") + ",";
			chkvals = chkvals +chkhalfed[k].parentNode.parentNode.id+ ",";
			//}
		}			
		chkvals = chkvals.substring(0, chkvals.length - 1);
		return chkvals;
	},
	/**
	 * 根据得到复选框的所有叶节点的选中值
	 * @return {Array}
	 * @private
	 */
	"getChkLeafVal" : function(type) {		
		// 得到复选框的所有叶节点的选中值
		/*var leafvalue =  this._global.thistree.find("[class='ico-node'],[class='ico-node-last']");
		var chkvals = "";
		if(leafvalue && leafvalue.elems.length > 0) {
			var chked =leafvalue.parent("div").find("[class^='ico-"+type+"-checked']").elems;
			var chkedlength = chked.length,li;
			if(chked && chkedlength > 0) {
				for(var i = 0; i < chkedlength; i += 1) {
					//li= fastDev(chked[i]).parent("div").parent("li");
					//if(li.elems.length>0){
					//	chkvals = chkvals +li.prop("id") + ",";
					chkvals = chkvals +chked[i].parentNode.parentNode.id + ",";
					//}
				}
				chkvals = chkvals.substring(0, chkvals.length - 1);
			}
		}*/
		var chkallvals=this.getChkAllVal(type).split(","),len=chkallvals.length,chkvals="";
		for(var i=0;i<len;i++){
			if(!this.isBranch(chkallvals[i])){
				chkvals = chkvals + chkallvals[i]+ ",";
			}
		} 
		chkvals = chkvals.substring(0, chkvals.length - 1);
		return chkvals;
	},
	/**
	 * 是否延迟加载
	 * @return {Boolean}
	 * @private
	 */
	"isYanchi" : function() {
		//是否延迟加载
		return this._global.thistree.find("li[yc]").elems.length>0?true:false;
	},
	/**
	 * 根据数据集得到ids
	 * @param {Array} items 数据集
	 * @return {String}
	 * @private
	 */
	"getIdsByItems" : function(items) {
		var ids = "";
		for(var i = 0; i < items.length; i += 1) {
			ids += items[i].id + ",";
		}
		if(ids && ids.length > 0) {
			ids = ids.substring(0, ids.length - 1);
		}
		return ids;
	},
	/**
	 * 查找指定pid的所有子孙节点
	 * @param {String} pid
	 * @return {Array}
	 */
	"findNodesByPid" : function(pid) {
		//查找指定pid的所有子孙节点
		this._global.findItems=[];	
		var items=this.getNodesByPidItems(pid);
		return items;//this.getJsonByData(items);
	},
	/**
	 * 查找指定pid的所有子孙节点
	 * @private
	 */
	"_findNodesByPid" : function(pid) {
		//查找指定pid的所有子孙节点
		this._global.findItems=[];
		var items=this.getNodesByPidItems(pid);
		return items;
	},
	/**
	 * 得到父节点下的子节点
	 * @private
	 */
	"getNodesByPidItems" : function(pid){		
		//var im = this.dataset.select("pid="+pid),len=im.length;
		//if(len===0){
			var im=this.getItemsBypid(pid),len=im.length;
		//}
		for(var i = 0; i < len; i += 1) {
			 var id =im[i].id;
			 this._global.findItems = this._global.findItems.slice(0).concat(im[i]);
			 if(this.isBranch(id)){				
				 this.getNodesByPidItems(id);
			 }
		}
		return  this._global.findItems;
	},	
	/**
	 * 查找指定pid的节点
	 * @param {String} pid
	 * @return {Array}
	 */
	"getNodesByPid" : function(pid) {
		//查找指定pid的节点
		return this.getItemsBypid(pid);
	},	
	/**
	 * 得到所有叶子节点
	 * @return {Array}
	 */
	"getAllLeafItems" : function(){
		//var items = this.dataset.select(),newitems=[],n=0;		
		var items = this.getItems(),newitems=[],n=0;
		for(var i = 0; i < items.length; i++) {
			var im = items[i];
			if(this.isBranch(im.id) === false) {
				newitems[n]= im;
				n+=1;
			}
		}		
		//return this.getJsonByData(newitems);
		return newitems;
	},	
	/**
	 * 根据数据源数据得到所有选中状态的节点id
	 * @param {String} pid
	 * @param {String} type
	 * @return {Array}
	 * @private
	 */
	"getChkedIdsByDataType" : function(pid, type) {
		//根据数据源数据得到所有选中状态的节点id
		var ids = "", items = [];
		if(pid) {
			items = this._findNodesByPid(pid);
		} else {
			items = this.getItems();//dataset.select();
		}
		if(type === "onlyLeafValue") {//仅仅叶节点值
			for(var i = 0; i < items.length; i++) {
				var im = items[i];
				if(im) {
					if(this.isBranch(im.id) === false && "" + im.chk === "true") {
						ids += im.id + ",";
					}
				}
			}
		} else if(type === "partchkValue") {//全选和半选状态值
			for(var j = 0; j < items.length; j++) {
				var pim = items[j];
				if(pim) {
					var chk = "" + pim.chk;
					if(chk === "true" || chk === "part") {
						ids += pim.id + ",";
					}
				}
			}
		} else if(type === "allchkValue") {//全选值
			for(var k = 0; k < items.length; k++) {
				var aim = items[k];
				var chka = "" + aim.chk;
				if(chka === "true") {
					ids += aim.id + ",";
				}
			}
		}
		if(ids && ids.length > 0) {
			ids = ids.substring(0, ids.length - 1);
		}
		return ids;
	},
	/**
	 * 根据数据源得到所有选中状态的值
	 * @param {Array} items
	 * @return {Array}
	 * @private
	 */
	"getAllCheckedByData" : function(items) {
		//根据数据源得到所以选中状态的值
		var len = items.length, nodes = [];
		for(var i = 0; i < len; i++) {
			var im = items[i];
			if(im && "" + im.chk === "true") {
				nodes = nodes.slice(0).concat(items[i]);
			}
		}
		return nodes;
	},
	/**
	 * 根据数据源数据得到所有选中状态的节点id
	 * @param {String} pid
	 * @param {String} type
	 * @return {Array}
	 * @private
	 */
	"getRadioedIdsByDataType" : function(pid, type) {
		//根据数据源数据得到所有选中状态的节点id
		var ids = "", items = [];
		if(pid) {
			items = this._findNodesByPid(pid);
		} else {
			items = this.getItems();//dataset.select();
		}
		if(type === "onlyLeafValue") {//仅仅叶节点值
			for(var i = 0; i < items.length; i++) {
				var im = items[i];
				if(im) {
					if(this.isBranch(im.id) === false && "" + im.radio === "true") {
						ids += im.id + ",";
					}
				}
			}
		} else if(type === "partradioValue") {//全选和半选状态值
			for(var j = 0; j < items.length; j++) {
				var pim = items[j];
				if(pim) {
					var radio = "" + pim.radio;
					if(radio === "true" || radio === "part") {
						ids += pim.id + ",";
					}
				}
			}
		} else if(type === "allradioValue") {//全选值
			for(var k = 0; k < items.length; k++) {
				var aim = items[k];
				var radioa = "" + aim.radio;
				if(radioa === "true") {
					ids += aim.id+ ",";
				}
			}
		}
		if(ids && ids.length > 0) {
			ids = ids.substring(0, ids.length - 1);
		}
		return ids;
	},
	/**
	 * 是否父节点
	 * @param {String} id
	 * @param {Array} items 数据集
	 * @return {Boolean}
	 * @private
	 */
	"isBranchByData" : function(id, items) {
		//是否父节点--根据原始数据源判断		
		var allbraids=this.getAllBranchIds();
		if(allbraids.indexOf(","+id+",")>-1){
			return true;
		}else{			
			return false;
		}
	},
	/**
	 * 得到所有父节点
	 * @return {String}
	 * @private
	 */
	"getAllBranchIds" : function(){
		if(this._global.allBraIds!==""){
			return this._global.allBraIds;
		}else{
		var items=this.getItems(),len=items.length,ids=",";
		for(var i = 0; i < len; i += 1) {
			if(ids.indexOf(","+items[i].parentid+",")===-1){
				ids+=items[i].parentid+",";
			}
		}
		this._global.allBraIds=ids;
		return ids;
		}
	},
	/**
	 * 判断某个id的节点是否叶节点
	 * @param {String} id
	 * @return {Boolean}
	 */
	"isLeaf" : function(id) {
		return this.isBranch(id)===false?true:false;
	},
	/**
	 * 判断某个id的节点是否选中
	 * @param {String} id
	 * @return {Boolean}
	 */
	"isChecked" : function(id) {
		//是否选中
		var li = this._global.thistree.find("li[id='" + id + "']");
		var options = this._options;
		if(li.elems.length > 0) {
			if(options.treeType === "radiotree") {
				return li.children("div").find("[class^='ico-radio-checked']").elems.length>0 ? true : false;
			} else {
				return li.children("div").find("[class^='ico-checkbox-checked']").elems.length>0? true : false;
			}
		} else {
			//var items = this.dataset.select(), items_length = items.length;
			var items = this.getItems(), items_length = items.length;
			if(!items) {
				return null;
			}
			for(var i = 0; i < items_length; i += 1) {
				if("" +items[i].id === id) {
					if(options.treeType === "radiotree") {
						return "" + items[i].radio === "true" ? true : false;
					} else {
						return "" + items[i].chk === "true" ? true : false;
					}
				}
			}
		}
	},
	/**
	 * 清空复选树的值
	 */
	"clearCheck" : function() {
		//清空
		 this._global.thistree.find("span.ico-checkbox-half").attr("class", "ico-checkbox");
		 this._global.thistree.find("span.ico-checkbox-checked").attr("class", "ico-checkbox");
	},
	/**
	 * 清空某个复选树的值
	 * @param {String} id
	 */
	"unCheckedById" : function(id) {
		//清空
		var options = this._options;
		var currli=	this._global.thistree.find("li[id='" + id + "']");	
		if(currli.elems.length === 0) {
			this.createNodeByChildId(id);
		}
		currli = this._global.thistree.find("li[id='" + id + "']");
		if(currli.elems.length === 0) {
			return;
		}
		var li=currli.children("div");		
		if(options.treeType === "multitree" ){
			//li.find(".ico-checkbox-half").attr("class", "ico-checkbox");
			//li.find(".ico-checkbox-checked").attr("class", "ico-checkbox");
			var chkc= li.children("span.ico-checkbox-checked");
			this.chkclick(chkc);
		}else if(options.treeType === "radiotree"){
			//li.find(".ico-radio-half").attr("class", "ico-radio");
			//li.find(".ico-radio-checked").attr("class", "ico-radio");
			var chkr= li.children("span.ico-radio-checked");
			this.radioclick(chkr);
		}
	},
	/**
	 * 选中某个复选树的值
	 * @param {String} id
	 */
	"checkedById" : function(id) {		
		var options = this._options;	
		var currli=	this._global.thistree.find("li[id='" + id + "']");	
		if(currli.elems.length === 0) {
			this.createNodeByChildId(id);
		}
		currli = this._global.thistree.find("li[id='" + id + "']");
		if(currli.elems.length === 0) {
			return;
		}
		var li=currli.children("div");	
		///var li=this._global.thistree.find("[id='"+id+"']").children("div");
		if(options.treeType === "multitree" ){
			//li.find(".ico-checkbox-half").attr("class", "ico-checkbox");
			//li.find(".ico-checkbox-checked").attr("class", "ico-checkbox");
			var chkc= li.children(".ico-checkbox");
			this.chkclick(chkc);
		}else if(options.treeType === "radiotree"){
			//li.find(".ico-radio-half").attr("class", "ico-radio");
			//li.find(".ico-radio-checked").attr("class", "ico-radio");
			var chkr= li.children(".ico-radio");
			this.radioclick(chkr);
		}
	},
	/**
	 * 清空单选树的值
	 */
	"clearRadio" : function() {
		//清空
		 this._global.thistree.find(".ico-radio-half").attr("class", "ico-radio");
		 this._global.thistree.find(".ico-radio-checked").attr("class", "ico-radio");
	},	
	/**
	 * 设置树的值
	 * @param {String}
	 */
	"setValue" : function(ids) {
		var options = this._options;
		if(ids==="" || ids===options.topParentid){
			return;
		}	
		if(options.treeType === "multitree" || options.treeType === "radiotree") {
			//多选树就给选中节点打钩
			if(typeof ids === "string"){
				if(ids.indexOf(',')>0){
					ids=ids.split(',');
				}else{
					ids = [ids];
				}				
			}
			var idslen = ids.length;
			var txt = "",type="checkbox";
			if(options.treeType === "radiotree"){
				type="radio";
				this.clearRadio();
			}else{
				this.clearCheck();
			}
			this._global.thistree.find(".ui-tree-selected").removeClass("ui-tree-selected");
			for(var i = 0; i < idslen; i += 1) {
				var currli = this._global.thistree.find("li[id='" + ids[i] + "']");
				if(currli.elems.length === 0) {
					this.createNodeByChildId(ids[i]);
				}
				currli = this._global.thistree.find("li[id='" + ids[i] + "']");
				if(currli.elems.length === 0) {
					break;
				}
				if((type === "checkbox" && options.mTreeShowCkb === false) || (type=== "radio" && options.mTreeShowRadio === false)) { 
					currli.find(".ui-tree-content").addClass("ui-tree-selected");
				}else{
					currli.find(".ico-"+type+",.ico-"+type+"-half").attr("class", "ico-"+type+"-checked");
				}
			}			
		} else {
				this.setCurrentId(ids);			
		}
	},
	/**
	 * 设置当前id
	 * @param {String}
	 */
	"setCurrentId" : function(id){
		if(typeof id !== "string" || id===""){
			return;
		}
		this._global.thistree.find("span.ui-tree-selected").removeClass("ui-tree-selected");
		var currli = this._global.thistree.find("li[id='" + id + "']");
		if(currli.elems.length === 0) {
			this.createNodeByChildId(id);
			currli = this._global.thistree.find("li[id='" + id + "']");
		}
		if(currli.elems.length > 0) {
			currli.children("div").children(".ui-tree-content").addClass("ui-tree-selected");
			var currparentsul = currli.parents("ul:hidden");
			if(currparentsul && currparentsul.elems.length > 0) {
				currparentsul.css("display", "block");
			}
		}
	},
	/**
	 * 得到树的值
	 * @return {String}或数组
	 */
	"getValue" : function() {
		var value, options = this._options,ids;
		if(options.treeType === "multitree") {
			ids = this.getChkedIds(this.getValueType());
			value = ids.split(',');
		} else if(options.treeType === "radiotree") {
			ids = this.getRadioedIds(this.getValueType());
			value = ids.split(',');
		} else {
			value =  this.getCurrentId();
		}
		return value;
	},
	/**
	 * 得到当前id
	 * @return {String}
	 */
	"getCurrentId" : function() {
		// 得到当前id
		var curr = this._global.thistree.find(".ui-tree-selected");
		var id = "";
		if(curr && curr.elems.length > 0) {
			id = curr.parent("div").parent("li").attr("id");
		}
		return id;
	},
	/**
	 * 得到多选树的选中节点的id
	 * @return {String}
	 */
	"getSelectedIds" : function() {
		// 得到当前id
		var curr = this._global.thistree.find(".ui-tree-selected").elems;
		var id = [],len=curr.length;
		//id = curr.parent("div").parent("li").attr("id");
		for(var i=0;i<len;i++){
			//id[i]=fastDev(curr[i]).parent("div").parent("li").attr("id");
			id[i]=curr[i].parentNode.parentNode.id;
		}
		return id;
	},
	/**
	 * 得到是否有选中节点
	 * @return {Boolble}
	 */
	"isSelected":function(){
		var ids=this.getSelectedIds();
		return ids.length>0?true:false;
	},
	/**
	 * 得到当前文本
	 * @return {String}
	 */
	"getCurrentTxt" : function() {
		// 得到当前文本
		var curr =  this._global.thistree.find(".ui-tree-selected");
		var txt = "";
		if(curr && curr.elems.length > 0) {
			txt = curr.children(".ui-tree-text").getText();
			if(txt.lastIndexOf('...')>0){
				txt = curr.children(".ui-tree-text").attr("title") || txt;
			}
		}
		return txt;
	},
	/**
	 * 得到传入枚举的值太多请具体看例子
	 * @param {String} type
	 * @return {Array} values
	 */
	"getValues" : function(type) {
		var value=[], ids, id, val, i, idslist, idslen;
		switch(type) {
			case  "chkedNodes":
				// 当前选中的所有节点id
				ids = this.getChkedIds("allchkValue");
				if(ids === "") {
					return null;
				}
				value = ids.split(',');
				break;
			case  "chkedLeafNodes":
				// 当前选中的所有叶节点id
				ids = this.getChkedIds("onlyLeafValue");
				if(ids === "") {
					return null;
				}
				value = ids.split(',');
				break;
			case  "chkedPNodes":
				// 当前选中和半选中的所有节点id
				ids = this.getChkedIds("partchkValue");
				if(ids === "") {
					return null;
				}
				value = ids.split(',');
				break;
			case  "chkedNodesIdVal":
				// 当前选中的所有节点IdVal
				ids = this.getChkedIds("allchkValue");
				if(ids === "") {
					return null;
				}				
				//var values = "[";
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					val = this.getValByid(id);
					//if(i === idslen - 1) {
						//values += "{id:'" + id + "',val:'" + val + "'}";
					//} else {
						//values += "{id:'" + id + "',val:'" + val + "'},";
					//}
					value.push({id:id,val:val});
				}
				//values += "]";
				//value = [].concat(eval(values));
				break;
			case  "chkedPNodesIdVal":
				// 当前选中和半选中的所有节点IdVal
				ids = this.getChkedIds("partchkValue");
				if(ids === "") {
					return null;
				}
				//var values = "[";
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					val = this.getValByid(id);
					//if(i === idslen - 1) {
					//	values += "{id:'" + id + "',val:'" + val + "'}";
					//} else {
					//	values += "{id:'" + id + "',val:'" + val + "'},";
					//}
					value.push({id:id,val:val});
				}
				//values += "]";
				//value = [].concat(eval(values));
				break;
			case  "chkedLeafNodesIdVal":
				// 当前选中的所有叶节点IdVal
				ids = this.getChkedIds("onlyLeafValue");
				if(ids === "") {
					return null;
				}
				//var values = "[";
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					val = this.getValByid(id);
					//if(i === idslen - 1) {
					//	values += "{id:'" + id + "',val:'" + val + "'}";
					//} else {
					//	values += "{id:'" + id + "',val:'" + val + "'},";
					//}
					value.push({id:id,val:val});
				}
				//values += "]";
				//value = [].concat(eval(values));
				break;
			case  "chkedNodesArray":
				// 当前选中的所有节点node
				ids = this.getChkedIds("allchkValue");
				if(ids === "") {
					return null;
				}
				//var values = [];
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					//values = values.concat(this.getNodeByid(id));
					value.push(this.getNodeByid(id));
				}
				//value = values;
				break;
			case  "chkedPNodesArray":
				// 当前选中和半选中的所有节点node
				ids = this.getChkedIds("partchkValue");
				if(ids === "") {
					return null;
				}
				//var values = [];
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					//values = values.concat(this.getNodeByid(id));
					value.push(this.getNodeByid(id));
				}
				//value = values;
				break;
			case  "chkedLeafNodesArray":
				// 当前选中的所有叶节点node
				ids = this.getChkedIds("onlyLeafValue");
				if(ids === "") {
					return null;
				}
				//var values = [];
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					//values = values.concat(this.getNodeByid(id));
					value.push(this.getNodeByid(id));
				}
				//value = values;
				break;
			case  "radioedNodes":
				// 当前选中的所有节点id
				ids = this.getRadioedIds("allradioValue");
				if(ids === "") {
					return null;
				}
				value = ids.split(',');
				break;
			case  "radioedLeafNodes":
				// 当前选中的所有叶节点id
				ids = this.getRadioedIds("onlyLeafValue");
				if(ids === "") {
					return null;
				}
				value = ids.split(',');
				break;
			case  "radioedPNodes":
				// 当前选中和半选中的所有节点id
				ids = this.getRadioedIds("partradioValue");
				if(ids === "") {
					return null;
				}
				value = ids.split(',');
				break;
			case  "radioedNodesIdVal":
				// 当前选中的所有节点IdVal
				ids = this.getRadioedIds("allradioValue");
				if(ids === "") {
					return null;
				}
				//var values = "[";
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					val = this.getValByid(id);
					//if(i === idslen - 1) {
					//	values += "{id:'" + id + "',val:'" + val + "'}";
					//} else {
					//	values += "{id:'" + id + "',val:'" + val + "'},";
					//}
					value.push({id:id,val:val});
				}
				//values += "]";
				//value = [].concat(eval(values));
				break;
			case  "radioedPNodesIdVal":
				// 当前选中和半选中的所有节点IdVal
				ids = this.getRadioedIds("partradioValue");
				if(ids === "") {
					return null;
				}
				//var values = "[";
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					val = this.getValByid(id);
					//if(i === idslen - 1) {
					//	values += "{id:'" + id + "',val:'" + val + "'}";
					//} else {
					//	values += "{id:'" + id + "',val:'" + val + "'},";
					//}
					value.push({id:id,val:val});
				}
				//values += "]";
				//value = [].concat(eval(values));
				break;
			case  "radioedLeafNodesIdVal":
				// 当前选中的所有叶节点IdVal
				ids = this.getRadioedIds("onlyLeafValue");
				if(ids === "") {
					return null;
				}
				//var values = "[";
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					val = this.getValByid(id);
					//if(i === idslen - 1) {
					//	values += "{id:'" + id + "',val:'" + val + "'}";
					//} else {
					//	values += "{id:'" + id + "',val:'" + val + "'},";
					//}
					value.push({id:id,val:val});
				}
				//values += "]";
				//value = [].concat(eval(values));
				break;
			case  "radioedNodesArray":
				// 当前选中的所有节点node
				ids = this.getRadioedIds("allradioValue");
				if(ids === "") {
					return null;
				}
				//var values = [];
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					//values = values.concat(this.getNodeByid(id));
					value.push(this.getNodeByid(id));
				}
				//value = values;
				break;
			case  "radioedPNodesArray":
				// 当前选中和半选中的所有节点node
				ids = this.getRadioedIds("partradioValue");
				if(ids === "") {
					return null;
				}
				//var values = [];
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					//values = values.concat(this.getNodeByid(id));
					value.push(this.getNodeByid(id));
				}
				//value = values;
				break;
			case  "radioedLeafNodesArray":
				// 当前选中的所有叶节点node
				ids = this.getRadioedIds("onlyLeafValue");
				if(ids === "") {
					return null;
				}
				//var values = [];
				idslist = ids.split(',');
				idslen = idslist.length;
				for(i = 0; i < idslen; i += 1) {
					id = idslist[i];
					//values = values.concat(this.getNodeByid(id));
					value.push(this.getNodeByid(id));
				}
				//value = values;
				break;
			default:
				value = this.getCurrentId() && this.getNodeByid(this.getCurrentId());
		}
		return value;
	},
	/**
	 * 判断id是否树的节点id
	 * @param {String} id
	 * @return {Boolean}
	 */
	"isRealData" : function(id) {
		//是否真实数据
		return !this.getNodeByid(id)?false:true;
	},
	/**
	 * 判断数据是否是树的真实节点(有pid)
	 * @param {Json} item
	 * @return {Boolean}
	 */
	"isData" : function(items) {
		//是否有跟节点
		return !this.dataset.structure.getRoot()?false:true;
	},
	/**
	 * 创建某id的所有未构建的直系父节点和兄弟节点
	 * @private
	 */
	"createNodeByChildId" : function(id) {
		//创建某id的所有未构建的直系父节点和兄弟节点
		if(this.isRealData(id)) {
			var pitem=  this.getParentNodebyId(id);
			var len=pitem.length;
			for(var i=len-1;i>-1;i--){
				var li=this._global.thistree.find("li[id='" +pitem[i] + "']");
				if(li.elems.length>0){
				var span=li.children("div").find("[class^='ico-node']");
				if(span.elems.length>0){
					this.expand(span);
				}
				}
			}
		}
	},
	/**
	 * 得到某id的所有未构建的直系父节点和兄弟节点
	 * @param {String} id
	 * @return {Array}
	 * @private
	 */
	"getParentNodebyId" : function(id) {
		//得到某id的所有未构建的直系父节点和兄弟节点
		//1.是否id的节点有构建
		
		var li = this._global.thistree.find("li[id='" + id + "']").elems;
		//2.没有构建的话，将此pid的子节点保存在递归ids变量中，重复1开始。
		if(li.length === 0) {
			//3.找到当前节点的pid
			var pid = this.getParentid(id);
			this._global.parentItems = this._global.parentItems.slice(0).concat(pid);			
			this.getParentNodebyId(pid);
		}
		return this._global.parentItems;
	},
	/** 
	 * 添加树节点
	 * @param {json} item 一个树节点数据json数据字符串
	 * @return {Boolean}
	 */
	"addNode" : function(items) {
		if(!fastDev.isArray(items)){
			items = [items];
		}
		var itemslen=items.length,options=this._options,global=this._global;
		for(var i=0;i<itemslen;i++){
			var item=items[i];
			var id=item.id;
			var tempds=this.getItemsByid(id);//dataset.select("id="+id);
			if(!!tempds){
				throw "id为"+id+"的数据已经存在，无法添加。";
				//return;
			}
			this.dataset.insert(item,false,true);	
			var pid=this.dataset.structure.getNode(id).parentid+"";
			//var pitem=this.getItemsByid(pid);//dataset.select("id="+pid);
			var li=global.thistree.find("[id='"+pid+"']");
			if(li.elems.length===0 && pid!==options.topParentid){
				this.dataset.structure.removeNode(id);
				//alert("没有父节点为"+pid+"的数据存在，无法添加。");
				fastDev.alert("没有父节点为"+pid+"的数据存在，无法添加。", "信息", "tip");
				return;
			}
			if(options.onBeforeAdd.call(this,item)===false){
				return false;
			}
			//如果父节点是展开状态，那么创建一个节点
			
			if(pid===options.topParentid){
				li=global.thistree;
			}
			var spancls=li.children("div").children("span:first").getClass();
			var hasul=li.children("ul").elems.length;
			if(spancls.indexOf('ico-node-close')===-1 || pid===options.topParentid || hasul>0){
				this.addNodeById(id,options,global);
				this.showNode(id);
				this.changeLeafCls(li);
				this.setTreeCls(li);
				this.setPart(li);
			}
			options.onAfterAdd.call(this,item);
		}
		return true;
	},
	/**
	 * 将叶子节点变成枝节点
	 * @private
	 */
	"changeLeafCls" : function(li){
		li.removeAttr("yc");
		var div=li.children("div");
		div.find(".ico-file").setClass("ico-folder-open");
		div.find(".ico-node-last").setClass("ico-node-open-last");
		div.find(".ico-node").setClass("ico-node-open");
	},	
	/**
	 * 删除树节点
	 * @param {String} id
	 * @return {Boolean}
	 */
	"delNode" : function(id) {
		var tempds=this.getItemsByid(id);//dataset.select("id="+id);
		if(!tempds){
			throw "id为"+id+"的数据不存在，无法删除。";
		}
		if(this._options.onBeforeDel.call(this,id)===false){
			return false;
		}
		var pid=this.getParentid(id);
		this.removeNodeByid(id);
		this.delNodeByDom(id,pid);
		this._options.onAfterDel.call(this,id);		
		return true;
	},
	/**
	 * 通过id和pid的dom来删除节点
	 * @param {string} id
	 * @param {string} pid
	 * @private
	 */
	"delNodeByDom" : function(id,pid){
		if(!pid){
			pid=this.getParentid(id);
		}
		var li = this._global.thistree.find("[id='"+id+"']");
		var pli=this._global.thistree.find("[id='"+pid+"']");
		if(li.elems.length>0){
			li.remove();			
			this.setTreeCls(pli);
		}//else{
			var xds=this.getItemsBypid(pid);//dataset.select("pid="+pid);
			if(xds.length===0){				
				this.changeBranchCls(pli);
			}
	},
	/**
	 * 移除指定id的节点数据
	 * @param {} id
	 * @private
	 */
	"removeNodeByid" : function(id) {
		this.dataset.remove(function(i, data) {
			return data.id === id;
		});
		
		this.dataset.structure.removeNode(id);
		this.dataset.structure.map[id]=undefined;
	
	},
	/**
	 * 将枝节点变成叶子节
	 * @private
	 */
	"changeBranchCls" : function(li){
		li.removeAttr("yc");
		var div=li.children("div");
		div.find(".ico-folder-open").setClass("ico-file");
		div.find(".ico-node-open-last").setClass("ico-node-last");
		div.find(".ico-node-open").setClass("ico-node");
		div.find(".ico-folder-close").setClass("ico-file");
		div.find(".ico-node-close-last").setClass("ico-node-last");
		div.find(".ico-node-close").setClass("ico-node");
	},
	/**
	 * 禁用某个复选框
	 * @param {String} id
	 */
	"disableChk" : function(id){
		var li=this._global.thistree.find("[id='"+id+"']>div");
		var chk= li.find("[class^='ico-checkbox']");
		var oldcls=chk.getClass();
		if(oldcls.indexOf("-disabled")===-1){
		chk.setClass(oldcls+"-disabled");
		}
	},
	/**
	 * 启用某个复选框
	 * @param {String} id
	 */
	"enableChk" : function(id){
		var li=this._global.thistree.find("[id='"+id+"']>div");	
		var chk= li.find("[class^='ico-checkbox']");
		var oldcls=chk.getClass();
		if(oldcls.indexOf("-disabled")>-1){
			chk.setClass(oldcls.replace("-disabled",""));	
		}
	},
	/**
	 * 隐藏树节点
	 * @param {String} id
	 */
	"hideNode" : function(id){		
		var li=this._global.thistree.find("[id='"+id+"']");		
		if(li.elems.length===0){
			this.createNodeByChildId(id);
			li = this._global.thistree.find("li[id='" + id + "']");
		}		
			li.find(".ui-tree-selected").removeClass("ui-tree-selected");
			li.hide();
			this.setLast(li);		
	},
	/**
	 * 是否隐藏节点
	 * @param {String} id
	 * @return {Boolean}
	 */
	"isHideNode" : function(id){
		return !this._global.thistree.find("[id='"+id+"']").isShow();
		// var li=this._global.thistree.find("[id='"+id+"']");		
		// var lishow=this._global.thistree.find("[id='"+id+"'][style!='display: none;']");		
		// if(fastDev.Browser.isIE6 || fastDev.Browser.isIE7){
			 // lishow=this._global.thistree.find("[id='"+id+"']:visible");
		// }
		// if(li.elems.length===0){
			// return false;
		// }else{
			// return lishow.elems.length>0?false:true;
		// }
	},
	/**
	 * 显示树节点
	 * @param {String} id
	 */
	"showNode" : function(id){
		var li=this._global.thistree.find("[id='"+id+"']");
		li.show();
		this.setLast(li);
	},
	/**
	 * 设置末端数据样式
	 * @private
	 */
	"setLast" : function(li){
		var lastlen=li.children("div").find("[class$='-last']").elems.length;
		//if(lastlen>0){
			var pli=li.parents("li:first");
			if(pli.elems.length===0){
				pli =this._global.thistree;
		    }
			var div= pli.find("ul>li:visible>div").elems;			
			var len=div.length;
			var lastdivs=fastDev(div[len-1]);
			var lastprevdivs=fastDev(div[len-2]);
			lastdivs.find(".ico-node").setClass("ico-node-last");
			lastdivs.find(".ico-node-close").setClass("ico-node-close-last");
			lastdivs.find(".ico-node-open").setClass("ico-node-open-last");
			lastprevdivs.find(".ico-node-last").setClass("ico-node");
			lastprevdivs.find(".ico-node-close-last").setClass("ico-node-close");
			lastprevdivs.find(".ico-node-open-last").setClass("ico-node-open");						
		//}
	},
	/**
	 * 编辑树节点
	 * @param  {json} itemstr 一个树节点数据json数据字符串，id不能变
	 * @return {Boolean}
	 */
	"editNode" : function(item) {
		var id=item.id,options=this._options,global=this._global;
		var tempds=this.getItemsByid(id);//dataset.select("id="+id);
		if(!tempds){
			throw "id为"+id+"的数据不存在，无法修改。";			
		}
		if(options.onBeforeEdit.call(this,item)===false){
			return false;
		}
		var pid=item.parentid || item.pid;
		var val=item.text || item.val;
		var oldpid=tempds.parentid;
		this.dataset.structure.updateNode(item);
		//先改文本
		var li=global.thistree.find("[id='"+id+"']");
		var preid=li.prev("li").attr("id");
		li.children("div").find(".ui-tree-text").setText(val);
		if(pid!==oldpid){
			//改父节点位置
			var iddiv =global.thistree.find("li[id='"+pid+"']"),
			idul=iddiv.children("ul"),
			onlyli=idul.elems.length>0;
			if(pid===options.topParentid && !options.rootValue){
				idul =global.thistree.find("ul:first");
				onlyli=true;
		    }
			if(!onlyli){
				idul=fastDev.createByHTML("<ul class=\"ui-line\"></ul>");
				iddiv.append(idul);
				idul=iddiv.children("ul");
			}
			idul.append(li);
			if(!onlyli){	
				this.changeLeafCls(iddiv);
			}
			this.showNode(id);
			this.showNode(preid);
			this.setTreeCls(iddiv);
			this.setPart(iddiv);
		}
		this._options.onAfterEdit.call(this,item);
		return true;
	},
	/**
	 * 重新加载
	 */
	"reLoad" : function(config) {
		if(this._global.thistree){
			this._global.thistree.children(".ui-tree").remove();
		}
		if(!!config && !!config.data){
			config.renderer=true;
			this.refreshDataSet(config);
		}else{
			this.initRefresh(config);
		}
	},	
	/**
	 * 将节点收缩的展开或展开
	 * @param {String} id
	 */
	"setCollect" : function(id) {
		var li = this._global.thistree.find("li[id='" + id + "']");
		var spanfh = li.children("div").children(":first");
		this.collect(spanfh);
	},
	/**
	 * 将节点展开
	 * @param {String} id
	 */
	"setExpand" : function(id) {
		var li = this._global.thistree.find("li[id='" + id + "']");
		var spanfh = li.children("div").children(":first");
		this.expand(spanfh);
	},	
	/**
	 * 设置id
	 * @param {String} id
	 */
	"setID" : function(id) {
		if(!id) {
			id = fastDev.getID();
		}
		this._global.thistree.attr("id", id);
	}
});
/**
 * @class fastDev.Ui.BreadCrumb
 * @extends fastDev.Ui.Component
 * @author chengwei
 * <p>面包屑控件。</p>
 * <p>导航类控件，支持静态定义和远程数据定义，样式自定义等。</p>
 * <p>作者：程伟</p>
 *      
 *      <div itype="BreadCrumb" width="60%">
 *           <div href="http://www.163.com" value="网易" target="_blank"></div>
 *           <div href="http://www.baidu.com" value="百度" target="_blank"></div>
 *           <div href="http://www.sina.com.cn" value="新浪" current="true"></div>
 *      </div> 
 */
fastDev.define("fastDev.Ui.BreadCrumb", {
    "alias" : "BreadCrumb",
    "extend" : "fastDev.Ui.Component",
    "_options" : {
		/**
         * @cfg {Array} items
         * 静态数据项
         * @param {Object} item 超链接配置
         * @param {String} item.href 链接地址
         * @param {String} item.value 链接名称
         * @param {String} [item.target=_self] 链接的目标 URL
         * @param {String} [item.current=false] 是否是当前页面链接
         * @param {Number} [item.sortValue=0] 排序值
         */
        "items": null,
		/**
         * @cfg {String} [width="auto"]
         * 控件宽度
         */
        "width" : "auto",
        /**
         * @cfg {String} symbolsCls
         * 连接符号样式名
         */
        "symbolsCls" : "",
        /**
         * @cfg {String} headerCls
         * 头部样式名
         */
        "headerCls" : "",
        /**
         * @cfg {String} backgroundCls
         * 面包屑栏的背景样式名
         */
        "backgroundCls" : ""
    },
    /**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
    "template" : [
		'<div name="bread" class="ui-bread #{backgroundCls}" style="width:#{width}">',
			'<div class="ui-bread-ico #{headerCls}"></div>',
		'</div>',
		'<tpl dynamic>', 
			'<tpl each>', 
				'<tpl if(rowid &gt; 1)>',
					'<span class="ui-bread-symbols #{symbolsCls}"></span>',
				'</tpl>',
				'<a href="{href}" target="{target}" ',
					'<tpl if({current})>',
						'class="current"',
					'</tpl>',
				'>{value}</a>',
			'</tpl>',
		'</tpl>'
    ],
    /**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
    "tplParam": ["symbolsCls", "headerCls", "backgroundCls", "width"],
    /**
	 * @property {Array[String]|Array[JsonObject]} fields
	 * 控件数据集所依赖的数据结构定义
	 * @readonly 
	 */
    "fields": [{
        "name": "href",
        "defaultValue": "#@"
    }, {
        "name": "value",
        "defaultValue": ""
    }, {
        "name": "target",
        "defaultValue": "_self"
    }, {
        "name": "current",
        "defaultValue": false
    }, {
        "name": "sortValue", //排序值，用于动态数据时显示顺序指定
        "type": "Int",
        "defaultValue": 0
    }],
    // 使用父类文档说明
    "ready": function (options, global) {
        if (fastDev.isNumber(options.width)) {
            options.width += "px";
        }
        if (!options.backgroundCls) {
            options.backgroundCls = "ui-bread-bg";
        }
    },
    // 使用父类文档说明
    "constructItems": function () {
        this.dataset.sort("sortValue");
        this.renderDynamicHtml(fastDev(this.elems), false);
        // 如果子项可能过多建议使用事件代理
        this.find(".ui-bread").bind("click", fastDev.setFnInScope(this, function (event) {
            if (event.target.nodeName === "A") {
                this.find("A").removeClass("current");
                fastDev(event.target).addClass("current");
            }
        }));
    }
});
/**
 * @class fastDev.Ui.ChooseList
 * @extends fastDev.Ui.Component
 * @author chengwei
 * <p>选择列表控件。</p>
 * <p>适用于需对某一数据集进行数据筛选过滤的场合。</p>
 * <p>作者：程伟</p>
 *     
 *     <div itype="ChooseList" id="list2" saveInstance="true" leftWidth="160px" 
 *          rightWidth="160px" initSource="../../data/chooselist.json" 
 *          dataSource="../../data/chooselist_select.json">
 *     </div>
 */
fastDev.define("fastDev.Ui.ChooseList", {
    "alias": "ChooseList",
    "extend": "fastDev.Ui.Component",
    "_options": {
        /**
         * @cfg {String|Number} [leftWidth="122px"]
         * 左侧区域的宽度
         */
        "leftWidth" : "122px",
        /**
         * @cfg {String|Number} [leftTopHeight=0]
         * 左侧顶部区域高度
         */
        "leftTopHeight" : 0,
        /**
         * @cfg {String|Number} [leftBottomHeight=0]
         * 左侧底部区域的高度
         */
        "leftBottomHeight" : 0,
        /**
         * @cfg {String|Number} [centerWidth="77px"]
         * 中部区域的宽度
         */
        "centerWidth" : "77px",
        /**
         * @cfg {String|Number} [buttonWidth="50px"]
         * 按钮的宽度
         */
        "buttonWidth" : "50px",
        /**
         * @cfg {String|Number} [rightWidth="122px"]
         * 右侧区域的宽度
         */
        "rightWidth" : "122px",
        /**
         * @cfg {String|Number} [rightTopHeight=0]
         * 右侧顶部区域的高度
         */
        "rightTopHeight" : 0,
        /**
         * @cfg {String|Number} [rightBottomHeight=0]
         * 右侧底部区域的高度
         */
        "rightBottomHeight" : 0,
        /**
         * @cfg {String|Number} [height="150px"]
         * 整个控件的高度
         */
        "height" : "150px",
        /**
         * @cfg {String} leftTop
         * 左部上方自定义模板
         */
        "leftTop" : "",
        /**
         * @cfg {String} leftBottom
         * 左部下方自定义模板
         */
        "leftBottom" : "",
        /**
         * @cfg {String} rightTop
         * 右部上方自定义模板
         */
        "rightTop" : "",
        /**
         * @cfg {String} rightBottom
         * 右部下方自定义模板
         */
        "rightBottom" : "",
        /**
         * @cfg {String} leftCls
         * 左边中部区域自定义样式名
         */
        "leftCls" : "",
        /**
         * @cfg {String} rightCls
         * 右边中部区域自定义样式名
         */
        "rightCls" : "",
        /**
         * @cfg {String} centerCls
         * 中部区域自定义样式名
         */
        "centerCls" : "",
        /**
         * @cfg {Boolean} [showFunctionBtn=true]
         * 是否显示功能按钮（选取，移除等操作按钮）
         * 不需要功能按钮时，可以通过该属性撤销按钮的构建
         */
        "showFunctionBtn" : true,
        /**
         * @cfg {Boolean} [showLoading=true]
         * 是否在加载数据时显示加载图标
         */
        "showLoading" : true,
        /**
         * @cfg {Number} [zIndex=201]
         * 重置索引值
         */
        "zIndex" : 201,
        /**
         * @cfg {String} loadingMsg
         * 加载图标附带的提示文本信息
         */
        "loadingMsg" : "",
        /**
         * @cfg {String} primaryKey
         * 记录的主键字段名
         * 用于标记记录的唯一性
         */
        "primaryKey" : "",
        /**
         * @cfg {Number} [maxItems=0]
         * 最大可选项数
         * 0表示不受限
         */
        "maxItems" : 0,
        /**
         * @cfg {Array} items
         * 静态数据源
         */
        "items" : null,
        /**
         * @cfg {JsonObject} params
         * 刷新控件时额外的查询参数
         */
        "params" : {},
        /**
         * @cfg {Function} itemRenderer
         * 列表项使用的自定义渲染器（回调函数）
         * 传递参数为当前列表项，回调需返回渲染后的DOM片段或文本值，否则按默认文本处理
         */
        "itemRenderer" : fastDev.noop,
        /**
         * @cfg {JsonObject} leftWidget
         * 左边待选项数据展示部件（控件）自定义配置
         * 默认为列表控件
         * @param {String} obj.type 控件类型，可为控件的全类型名或者别名
         * @param {String|Function} obj.onGetSelectedItems 获取控件已选中项的方法名，或者自定义一个函数来返回控件已选择项（this指向对应的控件类型，如：type为Tree，则this为树控件，下同）
         * @param {String|Function} obj.onGetAllItems 获取控件所有可选项的方法名，或者自定义一个函数来返回控件的所有可选项
         * @param {String|Function} obj.onRemoveItems 控件移除指定列表项的方法名，或者自定义一个函数来移除控件值项，传递参数为被移除的项列表（数组）
         * @param {String|Function} obj.onAddItems 控件添加指定列表项的方法名，或者自定义一个函数来添加控件值项，传递参数为被添加的项列表（数组）
         * @param {String|Function} [obj.onRefresh] 刷新控件的方法名或者自定义一个函数，传递参数为查询参数
         * @param {Object} obj.options 控件配置对象
         */
        "leftWidget" : null,
        /**
         * @cfg {JsonObject} rightWidget
         * 右边已选项数据展现部件（控件）自定义配置
         * 默认为列表控件
         * @param {String} obj.type 控件类型，可为控件的全类型名或者别名
         * @param {String|Function} obj.onGetSelectedItems 获取控件已选中项的方法名，或者自定义一个函数来返回控件已选择项（this指向对应的控件类型，如：type为Tree，则this为树控件，下同）
         * @param {String|Function} obj.onGetAllItems 获取控件所有可选项的方法名，或者自定义一个函数来返回控件的所有可选项
         * @param {String|Function} obj.onRemoveItems 控件移除指定列表项的方法名，或者自定义一个函数来移除控件值项，传递参数为被移除的项列表（数组）
         * @param {String|Function} obj.onAddItems 控件添加指定列表项的方法名，或者自定义一个函数来添加控件值项，传递参数为被添加的项列表（数组）
         * @param {String|Function} [obj.onGetValue] 控件的"getValue"取值性质的方法名或者函数
         * @param {String|Function} [obj.onGetText] 控件的"getText"取文本值性质的方法名或者函数
         * @param {String|Function} [obj.onGetItems] 控件的"getItems"取值对象性质的方法名或者函数
         * @param {String|Function} [obj.onMoveUp] 控件的"moveUp"上移记录性质的方法名或者函数
         * @param {String|Function} [obj.onMoveDown] 控件的"moveDown"下移记录性质的方法名或者函数
         * @param {Object} obj.options 控件配置对象
         */
        "rightWidget" : null,
        /**
         * @cfg {Array} buttons
         * 中部区域操作按钮自定义配置（按钮控件的配置对象）
         * 所有按钮的点击回调事件中，this指向按钮控件，回调函数的参数依次为event（事件对象）、chooselist（当前ChooseList实例）
         * 以下本控件的方法可以在按钮点击的回调里面调用来响应用户操作
         * <p>- select(items) 选取操作，如果未传递参数，则控件会默认去获取用户已选择的项（建议不传递参数由控件内部自动去获取值）</p>
         * <p>- selectAll() 全部选取操作</p>
         * <p>- deselect(items) 取消选取操作，如果未传递参数，则控件会默认去获取需取消的的项（建议不传参数由控件内部自动去获取值）</p>
         * <p>- deselectAll() 全部取消选取操作</p>
         * 也可以在按钮配置中，声明name属性值为以上函数名，其点击事件自动绑定至对应的函数。
         */
        "buttons" : null,
        /**
         * @event onBeforeSelect
         * 选取前的回调
         * 传递参数为拟选记录对象
         * this指向当前控件实例
         * 返回false则放弃选取该项
         */
        "onBeforeSelect" : fastDev.noop,
        /**
         * @event onAfterSelect
         * 选取后的事件回调
         * 传递参数为此次选取的记录的集合（数组）
         * this指向当前控件实例
         */
        "onAfterSelect" : fastDev.noop,
        /**
         * @event onBeforeDeselect
         * 取消选取前的回调
         * 传递参数为待撤销选取的记录对象
         * this指向当前控件实例
         * 返回false值则放弃取消操作
         */
        "onBeforeDeselect" : fastDev.noop,
        /**
         * @event onAfterDeselect
         * 取消选取后的回调
         * 传递参数为此次撤销选取的记录的集合（数组）
         * this指向当前控件实例
         */
        "onAfterDeselect" : fastDev.noop,
        // 使用父类文档说明
        "enableInitProxy": false,
        // 使用父类文档说明
        "enableDataProxy": false,
        // 使用父类文档说明
        "enableDataSet": false
    },
    /**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
    "template" : [
		'<div class="ui-form ui-chooselist" style="height:#{listHeight}">',
			'<div class="ui-chooselist-float">',
				'<div id="chooselist-lefttop-#{sequence}" style="display:none;width:#{leftTplWidth};height:#{leftTopHeight};overflow-x:hidden;">#{leftTop}</div>',
				'<div id="chooselist-left-#{sequence}" style="width:#{leftWidth};height:#{leftHeight}" class="ui-chooselist-list #{leftCls}"></div>',
				'<div id="chooselist-leftbottom-#{sequence}" style="display:none;width:#{leftTplWidth};height:#{leftBottomHeight};overflow-x:hidden;">#{leftBottom}</div>',
			'</div>',
			'<div class="ui-chooselist-panel ui-chooselist-float #{centerCls}" style="height:#{listHeight};width:#{centerWidth}">',
				'<div class="ui-chooselist-block">',
					'<div id="chooselist-center-#{sequence}" class="ui-chooselist-tools"></div>',
				'</div>',
			'</div>',
			'<div class="ui-chooselist-float">',
				'<div id="chooselist-righttop-#{sequence}" style="display:none;width:#{rightTplWidth};height:#{rightTopHeight};overflow-x:hidden;">#{rightTop}</div>',
				'<div id="chooselist-right-#{sequence}" style="width:#{rightWidth};height:#{rightHeight}" class="ui-chooselist-list #{rightCls}"></div>',
				'<div id="chooselist-rightbottom-#{sequence}" style="display:none;width:#{rightTplWidth};height:#{rightBottomHeight};overflow-x:hidden;" >#{rightBottom}</div>',
			'</div>',
		'</div>'
    ],
    /**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
    "tplParam": ["sequence", "listHeight", "leftWidth", "rightWidth", "leftHeight", "rightHeight", "centerWidth", "leftTplWidth", "leftTopHeight", "leftBottomHeight", "rightTopHeight", "rightBottomHeight", "rightTplWidth", "leftCls", "centerCls", "rightCls", "leftTop", "leftBottom", "rightTop", "rightBottom"],
    // 使用父类文档说明
    "ready": function (options, global) {
        var fn = fastDev.Util.StringUtil.stripUnits,
            // 容器的内容宽度
            width = options.container.width(),
            height = fn(options.height, options.container.height()) || 150;
        global.sequence = fastDev.getID();
        global.listHeight = height + "px";
        fastDev.apply(options, {
            // 整个控件的高度（包括边框）
            height: height,
            id: options.id || fastDev.getID() + "",
            // 不包括边框的宽度
            leftWidth: (parseInt(options.leftWidgetWidth, 10) || ((fn(options.leftWidth, width) || 122) - 2)) + "px", //2px的边框
            centerWidth: ((fn(options.centerWidth, width) || 77) - 30) + "px", //30px的外边距
            buttonWidth: options.buttonWidth === "auto" ? "auto" : ((fn(options.buttonWidth, width) || 52) - 7) + "px", //7px的外边距加边框
            // 不包括边框的宽度
            rightWidth: (parseInt(options.rightWidgetWidth, 10) || ((fn(options.rightWidth, width) || 122) - 2)) + "px", //2px的边框
            leftWidget: fastDev.isPlainObject(options.leftWidget) ? options.leftWidget : {},
            rightWidget: fastDev.isPlainObject(options.rightWidget) ? options.rightWidget : {},
            maxItems: (options.maxItems && !isNaN(parseInt(options.maxItems, 10))) ? parseInt(options.maxItems, 10) : Infinity,
            params: fastDev.isPlainObject(options.params) ? options.params : {},
            saveInstance: true
        });
        options.leftWidget.name = "left";
        options.leftWidget.options = fastDev.isPlainObject(options.leftWidget.options) ? options.leftWidget.options : {};
        options.rightWidget.name = "right";
        options.rightWidget.options = fastDev.isPlainObject(options.rightWidget.options) ? options.rightWidget.options : {};
        fastDev.each(["onBeforeSelect", "onAfterSelect", "onBeforeDeselect", "onAfterDeselect", "itemRenderer"], function (i, name) {
            options[name] = typeof options[name] === "function" ? options[name] : fastDev.noop;
        });
        fastDev.apply(options, {
            leftTopHeight: (fn(options.leftTopHeight, height) || 0) + "px",
            leftBottomHeight: (fn(options.leftBottomHeight, height) || 0) + "px",
            rightTopHeight: (fn(options.rightTopHeight, height) || 0) + "px",
            rightBottomHeight: (fn(options.rightBottomHeight, height) || 0) + "px",
            // 绝对宽度
            leftTplWidth: (parseInt(options.leftWidth, 10) + 2) + "px",
            rightTplWidth: (parseInt(options.rightWidth, 10) + 2) + "px"
        });
        options.leftWidgetWidth = options.leftWidth;
        options.rightWidgetWidth = options.rightWidth;
        // 初始计算时，减2px边框
        options.leftHeight = (parseInt(options.leftWidgetHeight, 10) || Math.max((height - 2 - (parseInt(options.leftTopHeight, 10) || 0) - (parseInt(options.leftBottomHeight, 10) || 0)), 0)) + "px";
        options.rightHeight = (parseInt(options.rightWidgetHeight, 10) || Math.max((height - 2 - (parseInt(options.rightTopHeight, 10) || 0) - (parseInt(options.rightBottomHeight, 10) || 0)), 0)) + "px";
        if (options.leftWidget.options && typeof options.leftWidget.options.dataSource === "string") {
            options.dataSource = options.leftWidget.options.dataSource;
        }
        global.widgets = {};
        // 保存已选值主键，用于判断数据是否已被选取
        global.keyMap = {};
        // 已选记录数
        global.size = 0;
        // 用于缓存当前待选数据
        global.datas = [];
    },
    // 使用父类文档说明
    "construct": function (options, global) {
        var sequence = global.sequence;
        fastDev.apply(global, {
            left: this.find("[id='chooselist-left-" + sequence + "']"),
            leftTop: this.find("[id='chooselist-lefttop-" + sequence + "']"),
            leftBottom: this.find("[id='chooselist-leftbottom-" + sequence + "']"),
            center: this.find("[id='chooselist-center-" + sequence + "']"),
            right: this.find("[id='chooselist-right-" + sequence + "']"),
            rightTop: this.find("[id='chooselist-righttop-" + sequence + "']"),
            rightBottom: this.find("[id='chooselist-rightbottom-" + sequence + "']")
        });
        fastDev.each(["leftTop", "leftBottom", "rightTop", "rightBottom"], function (idx, name) {
            options[name + "Height"] = !! options[name + "Element"] ? global[name].outerHeight(true) : 0;
        });
        if (!fastDev.getInstance(options.id)) {
            fastDev.Core.ControlBus.saveInstance(options.id, this);
        }
    },
    // 使用父类文档说明
    "init": function (options, global) {
        if (options.dataSource && typeof options.dataSource === "string") {
            this.dataProxy = fastDev.create("Proxy", {
                url: options.dataSource,
                onAfterLoad: fastDev.setFnInScope(this, this.setValue)
            });
        }
        // 初始化按钮
        this.initButtons(options.buttons);
        // 初始化左部数据展现部件
        this.initWidget(options.leftWidget);
        // 初始化右部数据展现部件
        this.initWidget(options.rightWidget);
        // 初始自定义模板区域
        this.initTemplate();
        if (options.leftWidget.isNotDefaultContainer || options.rightWidget.isNotDefaultContainer) {
            this.hide();
        } else {
            var that = this;
            fastDev(function () {
                that.setLoading( !! options.leftWidget.options.initSource);
            });
        }
    },
    /**
     * 刷新已选数据
     * @param {Object} widget 部件配置对象
     * @private 
     */
    "refreshData": function (widget) {
        var options = this._options,
            global = this._global;
        global.widgets[widget.id] = widget;
        widget.initialized = true;
        if (options.leftWidget.initialized && options.rightWidget.initialized) {
            global.initialized = true;
            if ( !! options.dataSource) {
                this.dataRefresh();
                global.initSource = options.initSource;
                global.dataSource = options.dataSource;
                options.initSource = "";
                options.dataSource = "";
            }
        }
    },
    /**
     * 显示与隐藏数据加载图标
     * @param {Boolean} show 为false值时隐藏加载图标，为null时关闭加载图标，否则显示加载图标
     * @param {Boolean} [extra] 是否是额外的数据展现控件
     * @private 
     */
    "setLoading": function (show, extra) {
        var options = this._options,
            global = this._global;
        if (options.showLoading && !extra) {
            if (!fastDev.isComponent(global.loading)) {
                global.loading = fastDev.create("ProgressBar", {
                    opacity: 0.02,
                    display: false,
                    container: global.left,
                    text: options.loadingMsg,
                    zIndex: parseInt(options.zIndex, 10) || 2012
                });
            }
            window.setTimeout(function () {
                global.loading[show === null ? "close" : show === false ? "hide" : "show"]();
            }, 100);
        }
        return this;
    },
    /**
     * 初始化按钮
     * @param {Array} buttons 按钮组
     * @private
     */
    "initButtons": function (buttons) {
        var options = this._options,
            global = this._global,
            btn, name;
        if (options.showFunctionBtn) {
            buttons = buttons ? fastDev.isArray(buttons) ? buttons : [buttons] : [{
                    text: ">",
                    tips: "选取",
                    name: "select"
                }, {
                    text: ">>",
                    tips: "全部选取",
                    name: "selectAll"
                }, {
                    text: "<",
                    tips: "移除",
                    name: "deselect"
                }, {
                    text: "<<",
                    tips: "全部移除",
                    name: "deselectAll"
                }
            ];
            for (var i = 0; i < buttons.length; i++) {
                btn = buttons[i];
                btn.container = fastDev("<div/>").appendTo(global.center);
                // 按钮右外边距加边框有7px
                btn.width = btn.width || options.buttonWidth;
                btn.onclick = this.getBtnCallback(btn.name, btn.onclick);
                buttons[i] = fastDev.create("Button", btn);
            }
            options.buttons = buttons;
        }
    },
    /**
     * 获取按钮的回调
     * @param {String} name 按钮名
     * @param {Function} fn 用户声明的回调
     * @private 
     */
    "getBtnCallback": function (name, fn) {
        var that = this;
        return typeof fn === "function" ? function (event) {
            fn.call(this, event, that);
        } : /^selectAll|deselectAll|select|deselect|moveUp|moveDown$/i.test(name) ? function () {
            that[name]();
        } : fastDev.noop;
    },
    /**
     * 初始化数据展现部件
     * @param {Object} widget 部件配置对象
     * @private
     */
    "initWidget": function (widget) {
        var that = this,
            options = this._options,
            global = this._global,
            container = widget.options.container;
        container = !! container ? fastDev(fastDev.isString(container) ? "#" + container : container) : global[widget.name];
        widget.options.container = container.hasElem() ? container : global[widget.name];
        if (container !== global[widget.name]) {
            global[widget.name].hide();
            widget.isNotDefaultContainer = true;
        }
        if ( !! widget.widgetElement) {
            widget.options.container.append(widget.widgetElement);
        } else {
            widget.type = !! widget.type ? widget.type : "ChooseList.ComboList";
            widget.options.items = widget.options.items || (widget.name === "left" ? options.items : null);
            widget.component = fastDev.create(widget.type, this.initPredefine(options, widget));
        }
        if (widget.type === "DataGrid" || widget.type === "fastDev.Ui.DataGrid") {
            global[widget.name].css("border", "none");
        }
    },
    /**
     * 初始预定义控件回调方法
     * @param {Object} options 控件配置对象
     * @param {Object} widget 部件配置对象
     * @return {Object} settings 部件用户配置对象
     * @private
     */
    "initPredefine": function (options, widget) {
        var uuid = fastDev.getID(),
            name = widget.name,
            settings = widget.options;
        options.id = options.id || (fastDev.getID() + "");
        widget.id = fastDev.getID() + "";
        if (!widget.isNotDefaultContainer) {
            var fn = fastDev.Util.StringUtil.stripUnits;
            fastDev.apply(settings, {
                width: options[name + "WidgetWidth"] || ((parseInt(options[name + "Width"], 10) || 122) - 2 + "px"),
                height: options[name + "WidgetHeight"] || (Math.max((fn(options.height, fastDev(typeof options.container === "string" ? "#" + options.container : options.container).height()) || 150) - 2 - (parseInt(options[name + "TopHeight"], 10) || 0) - (parseInt(options[name + "BottomHeight"], 10) || 0), 0) + "px")
            });
            options[name + "WidgetWidth"] = settings.width;
            options[name + "WidgetHeight"] = settings.height;
        }
        settings.initSource = settings.initSource || (widget.name === "left" ? options.initSource : "");
        // fastDev.apply(settings, {
        // initSource: settings.initSource || (widget.name === "left" ? options.initSource : ""),
        // dataSource: settings.dataSource || (widget.name === "left" ? options.dataSource : "")
        // });
        // 若以后需要内置新的控件定义，到下面的case语句后添加即可
        switch (widget.type) {
            case "Tree":
            case "fastDev.Ui.Tree":
                this.initTreeWidget(options, widget);
                break;
            case "DataGrid":
            case "fastDev.Ui.DataGrid":
                this.initDataGridWidget(options, widget);
                break;
            default:
                this.initComboListWidget(options, widget);
        }
        settings.enableDataProxy = false;
        var onAfterInitRender = settings.onAfterInitRender || fastDev.noop,
            onAfterInit = settings.onAfterInit || fastDev.noop;
        fastDev.apply(settings, {
            onAfterInit: function () {
                this.widgetName = widget.name + "Widget";
                this.widgetSettings = widget;
                widget.component = this;
                onAfterInit.call(this);
                if (!settings.initSource && !widget.initialized) {
                    fastDev.getInstance(options.id).refreshData(widget);
                }
            },
            onAfterInitRender: function () {
                var that = fastDev.getInstance(options.id);
                if (widget.name === "left") {
                    that.setLoading(false, widget.extraWidget);
                }
                onAfterInitRender.call(this);
                that.refreshData(widget);
            }
        });
        if (widget.mode === "html") {
            window["onAfterInitRender" + uuid] = settings.onAfterInitRender;
            settings.onAfterInitRender = "onAfterInitRender" + uuid + "()";
            window["onAfterInit" + uuid] = settings.onAfterInit;
            settings.onAfterInit = "onAfterInit" + uuid + "()";
        }
        return settings;
    },
    /**
     * 初始化列表部件定义
     * @param {Object} options 控件配置对象
     * @param {Object} widget 部件配置对象
     * @private
     */
    "initComboListWidget": function (options, widget) {
        var settings = widget.options,
            isLeft = widget.name === "left";
        fastDev.apply(widget, {
            textField: widget.textField || "text",
            valueField: widget.valueField || options.primaryKey || "value",
            onGetSelectedItems: "getSelectedItems",
            onGetAllItems: "getItems",
            onRemoveItems: "removeItems",
            onAddItems: "addItems",
            onGetValue: "getValue",
            onGetText: "getText",
            onGetItems: "getItems",
            onRefresh: "initRefresh",
            onMoveUp: function () {
                this.move(true);
            },
            onMoveDown: function () {
                this.move();
            }
        });
        fastDev.apply(settings, {
            enableDataProxy: false,
            enableInitProxy: isLeft,
            autoLoad: isLeft,
            maxItems: isLeft ? 0 : options.maxItems,
            itemRenderer: options.itemRenderer,
            onDoubleClick: function (event, item) {
                fastDev.getInstance(options.id)[isLeft ? "select" : "deselect"](item);
            },
            fields: settings.fields || [{
                    name: widget.textField,
                    mapping: "text"
                }, {
                    name: widget.valueField,
                    mapping: "value"
                }
            ]
        });
    },
    /**
     * 初始化表格部件定义
     * @param {Object} options 控件配置对象
     * @param {Object} widget 部件配置对象
     * @private
     */
    "initDataGridWidget": function (options, widget) {
        var settings = widget.options;
        fastDev.apply(widget, {
            isCopy: widget.name === "left" && widget.isCopy,
            onGetSelectedItems: widget.onGetSelectedItems || function () {
                return this.getValue();
            },
            onGetAllItems: widget.onGetAllItems || function () {
                return this.getAllValue();
            },
            onRemoveItems: widget.onRemoveItems || function (items) {
                var list = fastDev.getInstance(options.id),
                    item, key;
                while (item = items.shift()) {
                    key = list.getPrimaryValue(item);
                    if (widget.isCopy) {
                        this.cleanSelected(key);
                        this.enableChooseBox(key);
                    } else {
                        this.delRow(key);
                    }
                }
                this.find("input[name='dg_checkbox_all']").prop("checked", false);
                if (widget.name === "left") {
                    this._options.onAfterInitRender.call(this);
                }
            },
            onAddItems: widget.onAddItems || function (items) {
                var list = fastDev.getInstance(options.id),
                    item, key;
                while (item = items.shift()) {
                    key = list.getPrimaryValue(item);
                    if (widget.isCopy || widget.name === "left" && this.getValueByText(key, settings.keyword).length) {
                        this.cleanSelected(key);
                        this.enableChooseBox(key);
                    } else {
                        this.addRow(item, false);
                    }
                }
                this.find("input[name='dg_checkbox_all']").prop("checked", false);
                if (widget.name === "left") {
                    this._options.onAfterInitRender.call(this);
                }
            },
            onGetValue: widget.onGetValue || function () {
                var list = fastDev.getInstance(options.id),
                    items = [].concat(this.getAllValue()),
                    values = [],
                    item;
                while (item = items.shift()) {
                    values.push(list.getPrimaryValue(item));
                }
                return values.join(",");
            },
            onGetText: widget.onGetText || "getAllValue",
            onGetItems: widget.onGetItems || "getAllValue",
            onRefresh: widget.onRefresh || function (config) {
                this.refreshData(config.urlParam);
            }
        });
        if (widget.name === "right") {
            settings.pagePosition = "none";
            settings.showCheckColumn = true;
            settings.keyword = settings.keyword || options.primaryKey || "";
        } else {
            fastDev.apply(settings, {
                allowAutoFillRow: false,
                showCheckColumn: true,
                keyword: settings.keyword || options.primaryKey || "",
                onAfterInitRender: function () {
                    var list = fastDev.getInstance(options.id),
                        items = [].concat(this.getAllValue()),
                        item;
                    while (item = items.shift()) {
                        if (list.isSelected(item)) {
                            this.setSelected(list.getPrimaryValue(item));
                        }
                    }
                    this.find("[name='dg_choose']:checked").each(function(idx, elem) {
                        fastDev(elem).prop("disabled", "disabled");
                    });
                }
            });
        }
    },
    /**
     * 初始化树部件定义
     * @param {Object} options 控件配置对象
     * @param {Object} widget 部件配置对象
     * @private
     */
    "initTreeWidget": function (options, widget) {
        var settings = widget.options;
        fastDev.apply(widget, {
            onlyLeaf: (widget.onlyLeaf === undefined && settings.onlySelectedLeaf === undefined) ? true : widget.onlyLeaf || settings.onlySelectedLeaf,
            onGetSelectedItems: widget.onGetSelectedItems || function () {
                if (!settings.mTreeShowCkb) {
                    var tree = this,
                        nodes = [];
                    fastDev.each(this.getSelectedIds(), function (idx, id) {
                        nodes.push(tree.getNodeByid(id));
                    });
                    return nodes;
                } else {
                    return this.getValues(widget.onlyLeaf ? "chkedLeafNodesArray" : "chkedNodesArray");
                }
            },
            onGetAllItems: widget.onGetAllItems || function () {
                return this[widget.onlyLeaf ? "getAllLeafItems" : "getItems"]();
            },
            onRemoveItems: widget.onRemoveItems || function (items) {
                var list = fastDev.getInstance(options.id),
                    branches = {},
                    tree = this,
                    branch, node;
                fastDev.each(items, function (i, item) {
                    if (!tree.isLeaf(item.id)) {
                        list.select(tree.getNodesByPid(item.id) || []);
                    } else {
                        // branches[tree.getParentid(item.id)] = true;
                    }
                    tree.unCheckedById(item.id);
                    tree.hideNode(item.id);
                });
                // 复选框禁用样式不对
                // isHideNode判断有误
                // for (branch in branches) {
                // var children = tree.getNodesByPid(branch) || [];
                // while (node = children.shift()) {
                // if (!tree.isHideNode(node.id)) {
                // branch = false;
                // break;
                // }
                // }
                // if ( !! branch) {
                // tree.disableChk(branch);
                // }
                // }
            },
            onAddItems: widget.onAddItems || function (items) {
                var list = fastDev.getInstance(options.id),
                    tree = this,
                    parent;
                fastDev.each(items, function (i, item) {
                    tree.unCheckedById(item.id);
                    tree.showNode(item.id);
                    if ( !! (parent = tree.getNodeByid(tree.getParentid(item.id))) && list.isSelected(parent)) {
                        list.deselect(parent);
                        tree.setExpand(parent.id);
                    }
                });
            },
            onRefresh: widget.onRefresh || "reLoad"
        });
        fastDev.apply(settings, {
            treeType: "multitree",
            enabledInitProxy: true,
            mTreeShowCkb: settings.mTreeShowCkb === undefined ? true : settings.mTreeShowCkb,
            onlySelectedLeaf: !! widget.onlyLeaf,
            onExpand: function (id) {
                var list = fastDev.getInstance(options.id),
                    tree = this,
                    nodes = tree.getNodesByPid(id);
                fastDev.each(fastDev.isArray(nodes) ? nodes : [nodes], function (i, node) {
                    if (tree.isLeaf(node.id) && list.isSelected(node)) {
                        tree.hideNode(node.id);
                    }
                });
            },
            onNodeDblClick: function (id) {
                if (this.isLeaf(id)) {
                    fastDev.getInstance(options.id).select(this.getNodeByid(id));
                    this.unCheckedById(id);
                    this.hideNode(id);
                }
            }
        });
        // html构建模式，则需在全局命名空间生成代理函数（控件的用户配置回调）
        if (widget.mode === "html") {
            var uuid = fastDev.getID();
            window["onExpand" + uuid] = settings.onExpand;
            settings.onExpand = "onExpand" + uuid + "()";
            window["onNodeDblClick" + uuid] = settings.onNodeDblClick;
            settings.onNodeDblClick = "onNodeDblClick" + uuid + "()";
        }
        if (widget.name === "left") {
            options.primaryKey = options.primaryKey || "id";
        }
    },
    /**
     * 初始化自定义模板
     * @private
     */
    "initTemplate": function () {
        var options = this._options,
            global = this._global;
        fastDev.each(["leftTop", "leftBottom", "rightTop", "rightBottom"], function (i, name) {
            if ( !! options[name + "Element"]) {
                global[name].append(options[name + "Element"]).removeCss("display");
            }
        });
    },
    /**
     * 获取记录的主键值
     * @param {Object} item 值对象
     * @param {Object} [field] 映射字段
     * @return {String} key
     * @private
     */
    "getPrimaryValue": function (item, field) {
        var key = "";
        if ( !! item || item === 0) {
            field = field || this._options.primaryKey || "value";
            if (fastDev.isPlainObject(item) || typeof item === "object") {
                key = item[field];
            } else {
                key = item;
            }
        }
        return fastDev.Util.StringUtil.trim(key + "");
    },
    /**
     * 操作控件进行增删操作
     * @param {String} name left或right
     * @param {Object} items 值项
     * @private
     */
    "doSelect": function (name, items) {
        var that = this,
            options = this._options,
            global = this._global,
            widget = options[name + "Widget"],
            size = name === "left" ? global.size : -9999999;
        if (size < options.maxItems && !! (items = items ? items : this.doCallback(widget.component, widget.onGetSelectedItems))) {
            var array = [];
            fastDev.each(fastDev.isArray(items) ? items : [items], function (idx, item) {
                if ( !! item && size < options.maxItems && (name === "left" ? !that.isSelected(item) : that.isSelected(item)) && options[name === "left" ? "onBeforeSelect" : "onBeforeDeselect"].call(that, item) !== false) {
                    global.keyMap[that.getPrimaryValue(item)] = name === "left";
                    array.push(item);
                    size++;
                }
            });
            if ( !! array.length) {
                global.size += (array.length * (name === "left" ? 1 : -1));
                fastDev.each(global.widgets, function (id, wigt) {
                    try {
                        that.doCallback(wigt.component, wigt[name === "left" ? (wigt.name === "left" ? "onRemoveItems" : "onAddItems") : (wigt.name === "left" ? "onAddItems" : "onRemoveItems")], array.slice(0));
                    } catch (e) {}
                });
                global.hasChanged = true;
                options[name === "left" ? "onAfterSelect" : "onAfterDeselect"].call(that, array);
            }
        }
        return this;
    },
    /**
     * 执行回调函数
     * @param {fastDev.Ui.Component} obj
     * @param {Function|String} func
     * @param {Object} args
     * @return {Object}
     * @private
     */
    "doCallback": function (obj, func, args) {
        if (typeof func === "function") {
            return func.call(obj, args);
        } else if (fastDev.isString(func) && typeof obj[func] === "function") {
            return obj[func](args);
        } else {
            throw "未知的回调函数(" + func + ")";
        }
    },
    /**
     * 判断某项是否已被选取
     * 将根据primaryKey主键字段配置来判断
     * @param {Object} item 待测项（记录对象或者记录的主键值）
     * @return {Boolean}
     */
    "isSelected": function (item) {
        return !!this._global.keyMap[this.getPrimaryValue(item)];
    },
    /**
     * 执行选取
     * @param {Array} [items] 要选择的项，若未指定则控件自动获取拟选项
     * @return {fastDev.Ui.ChooseList} 本控件实例
     */
    "select": function (items) {
        return this.doSelect("left", items);
    },
    /**
     * 选取所有值
     * @return {fastDev.Ui.ChooseList} 本控件实例
     */
    "selectAll": function () {
        var left = this._options.leftWidget;
        return this.select(this.doCallback(left.component, left.onGetAllItems) || []);
    },
    /**
     * 取消选取
     * @param {Array} [items] 要取消的项，若未指定则控件自动获取拟取消选取的项
     * @return {fastDev.Ui.ChooseList} 本控件实例
     */
    "deselect": function (items) {
        return this.doSelect("right", items);
    },
    /**
     * 全部取消选取
     * @return {fastDev.Ui.ChooseList} 本控件实例
     */
    "deselectAll": function () {
        var right = this._options.rightWidget;
        return this.deselect(this.doCallback(right.component, right.onGetAllItems) || []);
    },
    /**
     * 获取已选择项的有效值
     * @return {Object} 控件值
     */
    "getValue": function () {
        var right = this._options.rightWidget;
        return this.doCallback(right.component, right.onGetValue || "getValue");
    },
    /**
     * 获取已选择项的文本值
     * @return {Object} 控件文本值
     */
    "getText": function () {
        var right = this._options.rightWidget;
        return this.doCallback(right.component, right.onGetText || "getText");
    },
    /**
     * 获取已选值对象数组
     * @return {Array} 控件值对象数组
     */
    "getItems": function () {
        var right = this._options.rightWidget;
        return this.doCallback(right.component, right.onGetItems || "getItems") || [];
    },
    /**
     * 获取待选值对象数组
     * @param {fastDev.Ui.Component} [context] 数据的来源控件实例（可选参数，默认为当前使用的待选数据展现控件）
     * @return {Array} 待选值对象数组
     */
    "getData": function (context) {
        var global = this._global,
            data = !! context ? [] : global.hasChanged ? [] : global.datas.slice(0),
            items, item, mark;
        if (!data.length) {
            fastDev.each( !! context ? this._global.widgets : [], function (id, widget) {
                if (context === widget.component) {
                    context = widget;
                    return !(mark = true);
                }
            });
            context = mark ? context : this._options.leftWidget;
            items = [].concat(this.doCallback(context.component, context.onGetAllItems));
            while (item = items.shift()) {
                if (!this.isSelected(item)) {
                    data.push(item);
                }
            }
            global.datas = !! context ? [] : data.slice(0);
            global.hasChanged = false;
        }
        return data;
    },
    /**
     * 设置值
     * @param {Object} value 可以为非文本值
     * @return {fastDev.Ui.ChooseList} 本控件实例
     */
    "setValue": function (value) {
        if (this._global.initialized && value) {
            this.select(value);
        }
        return this;
    },
    /**
     * 上移选中的记录
     * @return {fastDev.Ui.ChooseList} 本控件实例
     */
    "moveUp": function () {
        var right = this._options.rightWidget;
        this.doCallback(right.component, right.onMoveUp || "moveUp");
        return this;
    },
    /**
     * 下移选中的记录
     * @return {fastDev.Ui.ChooseList} 本控件实例
     */
    "moveDown": function () {
        var right = this._options.rightWidget;
        this.doCallback(right.component, right.onMoveDown || "moveDown");
        return this;
    },
    /**
     * 获取当前使用的左侧控件实例
     * @return {fastDev.Ui.Component}
     */
    "getLeftWidget": function () {
        return this._options.leftWidget.component;
    },
    /**
     * 获取当前使用的右侧控件实例
     * @return {fastDev.Ui.Component}
     */
    "getRightWidget": function () {
        return this._options.rightWidget.component;
    },
    /**
     * 设置数据展现控件实例
     * @param {fastDev.Ui.Component} widget 参数必须为使用createWidget()方法初始化出的控件实例
     * @return {fastDev.Ui.ChooseList}
     */
    "setWidget": function (widget) {
        if (fastDev.isComponent(widget) && /^(left|right)Widget/.test(widget.widgetName)) {
            var options = this._options,
                global = this._global;
            options[widget.widgetName].component.hide();
            options[widget.widgetName] = widget.widgetSettings;
            global.widgets[widget.widgetSettings.id] = widget.widgetSettings;
            if (!widget.widgetSettings.isNotDefaultContainer) {
                global[widget.widgetSettings.name][widget.alias === "DataGrid" ? "css" : "removeCss"]("border", "none");
            }
            widget.show();
            global.hasChanged = true;
        } else {
            throw "参数无效（仅接受使用ChooseList控件的createWidget方法创建出的控件实例）.";
        }
        return this;
    },
    /**
     * 刷新左边区域控件的值
     * @param {Object} config 请求参数配置对象(plain object)
     * @param {String} [config.url] 请求链接，默认为initSource属性值
     * @param {Object} [config.param] 查询参数对象(plain object)，键值对
     * @param {Object} [config.data] 使用的静态数据
     * @param {Boolean} cleanSelected 是否在刷新前清理右边已选数据
     * @return {fastDev.Ui.ChooseList} 本控件实例
     */
    "refresh": function (config, cleanSelected) {
        var that = this,
            options = this._options,
            left = options.leftWidget,
            right = options.rightWidget;
        if ( !! cleanSelected) {
            this.doCallback(right.component, right.onRemoveItems, this.doCallback(right.component, right.onGetAllItems) || []);
            this._global.keyMap = {};
        }
        if (!fastDev.isPlainObject(config)) {
            config = {};
        }
        if (fastDev.isPlainObject(config.param)) {
            fastDev.apply(options.params, config.param);
        }
        config.url = config.url || left.options.initSource;
        config.urlParam = options.params;
        fastDev(function () {
            that.setLoading(true, !config.url);
        });
        this.doCallback(left.component, left.onRefresh || "initRefresh", config);
        return this;
    },
    /**
     * 创建一个数据展示部件（不传配置时，使用默认的列表控件）
     * 控件使用ChooseList容器时，初始完成后，该控件默认会被隐藏起来
     * @param {Object} [config] 部件配置对象 
     * @param {String} [config.name] left或right值，标明需放置在左边（待选）或右边（已选） 
     * @param {Object} [config.options] 控件配置对象
     * @return {fastDev.Ui.Component} 控件实例或undefined（创建失败时）
     */
    "createWidget": function (config) {
        var options = this._options,
            widget;
        if (!fastDev.isPlainObject(config)) {
            config = {};
        }
        fastDev.apply(config, {
            extraWidget: true,
            name: (config.name === "left" || config.name === "right") ? config.name : "left",
            type: config.type || "ChooseList.ComboList",
            options: fastDev.isPlainObject(config.options) ? config.options : {}
        });
        if (!config.options.container) {
            config.options.container = this._global[config.name];
        } else {
            config.isNotDefaultContainer = true;
        }
        (widget = fastDev.create(config.type, this.initPredefine(options, config)))[config.isNotDefaultContainer ? "show" : "hide"]();
        return widget;
    },
    /**
     * 获取当前已选记录数
     * @return {Number} 当前已选记录的数目 
     */
    "getSize": function () {
        return this._global.size;
    }
});
// 内部子控件
fastDev.define("fastDev.Ui.ChooseList.ComboList", {
    "alias" : "ChooseList.ComboList",
    "extend" : "fastDev.Ui.Component",
    "_options" : {
        "width" : "",
        "height" : "",
        "multiple" : true,
        "maxItems" : 0,
        "itemRenderer" : fastDev.noop,
        "onDoubleClick" : fastDev.noop,
        "onItemClick" : fastDev.noop,
        "onItemMouseOver" : fastDev.noop,
        "onItemMouseOut" : fastDev.noop,
        "fields" : []
    },
    "template" : [
		'<div id="combolist-container-#{uuid}">',
			'<div class="ui-selectlist-list-ct" style="width:#{width};height:#{height}">',
				'<ul id="combolist-list-#{uuid}"></ul>',
			'</div>',
		'</div>',
		'<tpl dynamic>',
			'<tpl each>',
				'<li class="ui-list-item" name="list#{uuid}" text="{text}" itemVal="{value}" item="{item}">{label}</li>',
			'</tpl>',
		'</tpl>'
				
    ],
    "tplParam": ["uuid", "width", "height", "text", "value"],
    "fields": ["text", "value", "label", "item"],
    "ready": function (options, global) {
        global.uuid = fastDev.getID();
        global.size = 0;
        global.currItems = {};
        options.maxItems = (options.maxItems && fastDev.isNumber(options.maxItems)) ? options.maxItems : Infinity;
    },
    "construct": function (options, global) {
        var uuid = global.uuid;
        global.list = this.find("[id='combolist-list-" + uuid + "']");
    },
    "init": function (options, global) {
        var 
			that = this,
            uuid = global.uuid;
            
        global.list.bind("mouseover", function (event) {
			options.onItemMouseOver.call(that, event, that.getListItem(event).addClass("ui-list-over"));
        }).bind("mouseout", function (event) {
            options.onItemMouseOut.call(that, event, that.getListItem(event));
            global.list.find("li.ui-list-over").removeClass("ui-list-over");
        }).bind("click", function (event) {
            var item = that.getListItem(event);
            if (!options.multiple) {
                global.list.find("li.ui-list-selected").removeClass("ui-list-selected");
            }
            item[(item.hasClass("ui-list-selected") ? "remove" : "add") + "Class"]("ui-list-selected");
            options.onItemClick.call(that, event, global.currItems[item.attr("item")]);
        }).bind("dblclick", function (event) {
            global.list.find("li.ui-list-selected").removeClass("ui-list-selected");
            options.onDoubleClick.call(that, event, global.currItems[that.getListItem(event).attr("item")]);
        });
	        
        global.initialized = true;
    },
    "constructItems": function () {
        var opts = this._options,
            global = this._global,
            data = this.dataset.select(),
            length = Math.min(data.length, opts.maxItems),
            items = [],
            item, id, label;
        for (var i = 0; i < length; i++) {
            if (label = fastDev.Util.StringUtil.trim(opts.itemRenderer.call(this, {
                text: (item = data[i]).text,
                value: item.value
            }) || item.text)) {
                item.label = label;
                item.item = id = fastDev.getID();
                global.currItems[id] = {
                    value: item.value,
                    text: item.text
                };
                global.size += 1;
                items.push(item);
            }
        }
        this.renderDynamicHtml(global.list, items);
    },
    /*
     * 取value、text、items等
     * @private
     */
    "get": function (type) {
        var global = this._global,
            items = [];
        global.list.find("li[name='list" + global.uuid + "']").each(function (idx, item) {
            items.push(fastDev(item).attr(type));
        });
        return items;
    },
    /*
     * 获取dom节点
     * @private
     */
    "getListItem": function (event) {
        var uuid = this._global.uuid,
            item = (item = fastDev(event.target)).attr("name") === "list" + uuid ? item : item.parents("li[name='list" + uuid + "']");
        return item;
    },
    /*
     * 获取已选择的项
     * @private
     */
    "getSelectedItems": function () {
        var global = this._global,
            uuid = global.uuid,
            items = [];
        global.list.find("li.ui-list-selected[name='list" + uuid + "']").each(function(idx, item) {
            items.push(global.currItems[(item = fastDev(item)).attr("item")]);
        });
        return items;
    },
    /*
     * 判断Element是否在数组中
     * @private
     */
    "inArray": function (array, elem) {
        elem = fastDev.isArray(elem.elems) ? elem.elems[0] : elem;
        for (var i = 0; i < array.length; i++) {
            if (elem === (array[i].elems ? array[i].elems[0] : array[i])) {
                return true;
            }
        }
    },
    /*
     * 获取字段映射
     * @private
     */
    "getMapping": function (name) {
        var options = this._options,
            fields = options.fields,
            length = fields.length;
        while (length--) {
            if (fastDev.isPlainObject(fields[length]) && fields[length].mapping === name) {
                return fields[length].name;
            }
        }
        return name;
    },
    /*
     * 移除项
     * @return this
     */
    "removeItems": function (items) {
        var global = this._global,
            uuid = global.uuid,
            value = this.getMapping("value"),
            id, item;
        items = fastDev.isArray(items) ? items : [items];
        for (var i = 0; i < items.length; i++) {
            if ( !! (item = global.list.find("li[name='list" + uuid + "'][itemVal='" + fastDev.Util.StringUtil.trim(items[i][value] || items[i]) + "']")).elems.length) {
                global.currItems[id = item.attr("item")] = null;
                delete global.currItems[id];
                item.remove();
                global.size -= 1;
            }
        }
        return this;
    },
    /*
     * 添加项
     * @return this
     */
    "addItems": function (items) {
        var opts = this._options,
            global = this._global,
            uuid = global.uuid,
            text = this.getMapping("text"),
            value = this.getMapping("value"),
            item, id, html, length;
        items = fastDev.isArray(items) ? items : [items];
        length = Math.min(items.length, opts.maxItems - global.size);
        for (var i = 0; i < length; i++) {
            if (html = fastDev.Util.StringUtil.trim(opts.itemRenderer.call(this, items[i]) || items[i][text] || items[i])) {
                item = fastDev(document.createElement("li")).addClass("ui-list-item").attr("name", "list" + uuid).attr("itemVal", fastDev.Util.StringUtil.trim(items[i][value] || items[i])).attr("text", fastDev.Util.StringUtil.trim(items[i][text] || items[i])).attr("item", id = fastDev.getID()).appendTo(global.list);
                item.elems[0].innerHTML = html;
                global.currItems[id] = items[i];
                global.size += 1;
            }
        }
        return this;
    },
    /*
     * 取得所有项数据对象
     * @return {Array}
     */
    "getItems": function () {
        var global = this._global,
            items = this.get("item"),
            data = [];
        for (var i = 0; i < items.length; i++) {
            data.push(global.currItems[items[i]]);
        }
        return data;
    },
    /*
     * 获取值
     * @return {Array}
     */
    "getValue": function () {
        return this.get("itemVal").join(",");
    },
    /*
     * 获取文本值
     * @return {Array}
     */
    "getText": function () {
        return this.get("text").join(",");
    },
    /*
     * 设置值
     * @param {value}
     */
    "setValue": function (value) {
        if (this._global.initialized && value) {
            this.clean();
            this.addItems(value);
        }
        return this;
    },
    /*
     * 清空值
     * @return this
     */
    "clean": function () {
        var global = this._global;
        global.currItems = {};
        global.size = 0;
        global.list.empty();
        if ( !! this.dataset) {
            this.dataset.clean();
        }
        return this;
    },
    /*
     * 获取当前控件列表的项数
     */
    "getSize": function () {
        return this._global.size;
    },
    /*
     * 移动
     * @param {String} isUp
     * @param {Array} items
     * @param {DomObject|Element} items.item
     */
    "move": function (isUp, items) {
        var global = this._global,
            uuid = global.uuid,
            item, prev;
        items = !! items ? items : global.list.find("li.ui-list-selected[name='list" + uuid + "']").elems;
        items = fastDev.isArray(items) ? items : [items];
        items = !isUp ? items.reverse() : items;
        for (var i = 0; i < items.length; i++) {
            if ((item = fastDev(items[i])).hasElem() && (prev = item[isUp ? "prev" : "next"]("li[name='list" + uuid + "']")).hasElem() && !this.inArray(items, prev)) {
                prev[isUp ? "insertAfter" : "insertBefore"](item.replace(prev));
            }
        }
    }
});
/**
 * @class fastDev.Ui.Dialog
 * @extends fastDev.Ui.Window
 * @author luming
 * <p>对话框控件。</p>
 * <p>属弹窗类控件，继承自Window。</p>
 * <p>可定义工具栏。</p>
 * <p>作者：禄铭</p>
 *     
 *     fastDev.create("Dialog", {
 *          title : "标题",
 *          src : "iframe.html"
 *     });
 */
fastDev.define("fastDev.Ui.Dialog", {
	staticTemplate : null,
    "extend" : "fastDev.Ui.Window",
    "alias" : "Dialog",
    "_options" : {
       /**
         * @cfg {JsonObject} toolbar
         * 定义顶部的工具栏
         */
        "toolbar" : null
    },
    "_global" : {
		//是否包含工具栏
		"hasToolbar" : false,
		//工具栏对象实例
		"toolbarInstance" : null
    },
    /**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
    "template" : [
		'<tpl if(#{inside})>',
			'<div id="panel-box-#{sequence}" class="ui-window ui-dialog ui-window-plain ui-window-radius ui-window-shadow #{cls}" style="display:none;z-index:#{zIndex}">',
			'<tpl if(#{showHeader})>',
				'<div class="ui-window-tl">',
                '<div class="ui-window-tr">',
                '<div id="panel-header-#{sequence}" class="ui-window-tc">',
                '<div class="ui-window-header ui-window-header-noborder">',
                '<div class="ui-window-header-text #{iconCls} #{headerCls}" style="height:16px">#{title}</div>',
                '<div id="panel-tool-#{sequence}" class="ui-window-tool">',
                '<span class="ui-window-tool-show" handler="expand" title="展开"></span>',
                '<span class="ui-window-tool-hidden" handler="collapse" title="折叠"></span>',
                '<span class="ui-window-tool-min" handler="minimize" title="最小化"></span>',
                '<span class="ui-window-tool-restore" handler="reset" title="还原"></span>',
                '<span class="ui-window-tool-max" handler="maximize" title="最大化"></span>',
                '<span class="ui-window-tool-close" handler="close" title="关闭"></span>',
                '</div></div></div></div></div>',
			'</tpl>',
			'<div class="ui-window-bg"><div id="panel-body-#{sequence}" class="ui-window-content-bg ui-window-body">',
			'<tpl if(!!#{toolbar})>',
				'<div id="panel-toolbar-#{sequence}" style="width:100%"></div>',
			'</tpl>',
			'<div id="panel-content-#{sequence}" class="ui-window-content #{bodyCls}" style="#{bodyStyle}"></div>',
			'<tpl if(!!#{buttons})>',
				'<div id="panel-buttons-#{sequence}" class="ui-window-button-panel">',
                '<span class="ui-left" style="display:none;margin-left:#{btnPanelMarginLeft}"></span>',
                '<span class="ui-center" style="display:none;overflow:hidden"></span>',
                '<span class="ui-right" style="display:none;margin-right:#{btnPanelMarginRight}"></span>',
                '</div>',
			'</tpl>',
			'</div></div><div class="ui-window-bl"><div class="ui-window-br"><div class="ui-window-bc"><div class="ui-window-footer"></div></div></div></div></div>',
			'<tpl if(!!#{showShadow})>',
				'<div id="panel-shadow-#{sequence}" class="ui-window-shadow-bg" style="display:none">',
                '<div class="shadow-st">',
                '<div class="shadow-stl"></div>',
                '<div class="shadow-stc"></div>',
                '<div class="shadow-str"></div>',
                '</div>',
                '<div class="shadow-sc" id="panel-shadow-sc-#{sequence}">',
                '<div class="shadow-sml"></div>',
                '<div class="shadow-smc"></div>',
                '<div class="shadow-smr"></div>',
                '</div>',
                '<div class="shadow-sb">',
                '<div class="shadow-sbl"></div>',
                '<div class="shadow-sbc"></div>',
                '<div class="shadow-sbr"></div>',
                '</div></div>',
			'</tpl>',
			'<tpl if(!!#{modal})>',
				'<div id="panel-mask-#{sequence}" class="ui-mask" style="display:none"></div>',
			'</tpl>',
		'</tpl>'
    ],
    /**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
    "tplParam" : ["inside", "zIndex", "showHeader","sequence", "cls", "iconCls", "toolbar", "headerCls", "title", "bodyCls", "bodyStyle", "buttons", "showShadow", "modal", "btnPanelMarginLeft", "btnPanelMarginRight"],
    // 使用父类文档说明
    "ready" : function (options, global) {
        if (!fastDev.isPlainObject(options.toolbar)) {
            options.toolbar = null;
        }
        options.showBorder = true;
        // 底部按钮面板与边线的距离
        global.btnPanelMarginRight = (fastDev.Browser.isIE6 || fastDev.Browser.isIE7) ? "0px" : "5px";
    },
    // 使用父类文档说明
    "construct" : function (options, global) {
        if (options.inside) {
            var that = this;
            global.toolbar = this.find("#panel-toolbar-"+ global.sequence);
            if (fastDev.isPlainObject(options.toolbar)) {
                options.toolbar.container = global.toolbar;
                // 初始工具栏
                fastDev.each(options.toolbar.items = [].concat(options.toolbar.items), function (index, item) {
                    if (fastDev.isPlainObject(item)) {
                        item.onclick = that.getBtnCallback(item.onclick);
                    }
                });
                global.toolbarInstance = fastDev.create("Toolbar", options.toolbar);
                global.hasToolbar = true;
                global.onDragStart = function () {
                    global.toolbar.hide();
                };
                global.onDragStop = function () {
                    if (global.hasToolbar) {
                        global.toolbar.show();
                    }
                };
            }
        }
    },
    /**
     * 初始动画设置
     * @param {String} type
     * @param {DomObject} target
     * @param {Object|Boolean} animation
     * @return {Object}
     * @protected
     */
    "initAnimation" : function (type, target, animation) {
        var options = this._options,
            global = this._global,
            duration = 0,
            startHeight, stopHeight, height;
        animation = fastDev.Ui.Window.initAnimation.call(this, type, target, animation);
        for (var i = 0; i < animation.length; i++) {
			// 计算总的动画执行时长
            duration += animation[i].duration;
        }
        if (!(duration === 0 || type === "collapse" || type === "expand" || options.collapsed)) {
            height = global.box.height();
            startHeight = animation[0].start.height;
            stopHeight = animation[animation.length - 1].stop.height;
            global.body.css({
				// 调整内容区域的高度
                "height": this.getBodyHeight(isNaN(startHeight) ? height : startHeight),
                "display": "block"
            }).animate({
                "height": this.getBodyHeight(isNaN(stopHeight) ? height : stopHeight)
            }, duration, options.animateEasing || animation.easing);
        }
        return animation;
    },
    /**
     * 开始动画前的回调
     * @param {DomObject} target 动画目标
     * @param {Object} animation 动画队列配置
     * @private 
     */
    "startAnimation" : function (target, animation) {
        var res = fastDev.Ui.Window.startAnimation.apply(this, arguments);
        this._global.body.removeCss("borderColor");
        return res;
    },
    /**
     * 获取内容部分高度值
     * @param {Number} bodyHeight 当前body高度
     * @return {Number}
     * @protected
     */
    "getContentHeight" : function (bodyHeight) {
        var global = this._global,
            content = global.content;
        return Math.max(bodyHeight - (content.outerHeight(true) - content.height()) - (global.hasButton ? Math.max(global.buttons.outerHeight(true), 32) : 0) - (global.hasToolbar ? Math.max(global.toolbar.outerHeight(true), 28) : 0), 0);
    },
    /**
     * 获取对话框主体部分的高度值
     * @param {Number} height 总高度
     * @return {Number}
     * @protected
     */
    "getBodyHeight" : function (height) {
        var options = this._options;
        return Math.max(parseInt(height, 10) - (options.showHeader ? Math.max(this._global.header.outerHeight(true), 27) : 0) - 9, 0);
    },
    /**
     * 获取内容区域以外部分的宽高值
     * @return {Number} width、height
     * @protected 
     */
    "getContentBounding" : function () {
        var options = this._options,
            global = this._global;
        return {
            // 2pxbody-bg边框，10px body外边距，2px body边框
            "width": Math.abs(global.content.outerWidth(true) - global.content.width() + 2 + 10 + 2),
            "height": Math.abs(12 + (global.content.outerHeight(true) - global.content.height()) + (global.hasButton ? Math.max(global.buttons.outerHeight(true), 32) : 0) + (global.hasToolbar ? Math.max(global.toolbar.outerHeight(true), 28) : 0) + (options.showHeader ? Math.max(global.header.outerHeight(true), 27) : 0))
        };
    },
    /**
     * 获取工具栏 
     * @return {fastDev.Ui.Toobar}
     */
    "getToolbar" : function () {
        return this._global.toolbarInstance;
    },
    /**
     * 隐藏工具栏
     * @return {fastDev.Ui.Dialog} 当前对话框控件实例
     */
    "hideToolbar" : function () {
        var global = this._global;
        if (global.toolbarInstance) {
            global.toolbar.hide();
            global.hasToolbar = false;
            this.resize({
                "height": global.box.height()
            });
        }
        return this;
    },
    /**
     * 显示工具栏
     * @return {fastDev.Ui.Dialog} 当前对话框控件实例
     */
    "showToolbar" : function () {
        var global = this._global;
        if (global.toolbarInstance) {
            global.toolbar.show();
            global.hasToolbar = true;
            this.resize({
                "height": global.box.height()
            });
        }
        return this;
    }
});
/**
 * @class fastDev.Ui.FileUpload
 * @extends fastDev.Ui.Box
 * @author luming
 * <p>HTML文件上传控件。</p>
 * <p>使用纯HTML实现页面无刷新文件上传功能。</p>
 * <p>支持多文件队列，以及选取文件后自动上传文件等。</p>
 * <p>作者：禄铭</p>
 *     
 *     <input itype="FileUpload" action="../../data/fileupload.jsp"/>
 */
fastDev.define("fastDev.Ui.FileUpload", {
    "alias": "FileUpload",
    "extend": "fastDev.Ui.Box",
    "_options": {
        /**
         * @cfg {String}
         * 文件上传后台处理程序链接
         */
        "action": "",
        /**
         * @cfg {String}
         * 文件域表单请求参数名
         */
        "name": "",
        /**
         * @cfg {Boolean}
         * 是否显示文件域的文本输入框
         */
        "showTextInput": true,
        /**
         * @cfg {Boolean}
         * 是否显示"上传"按钮
         * 指定为自动上传时不会显示上传按钮
         */
        "showUploadBtn": true,
        /**
         * @cfg {Boolean}
         * 是否在上传进行时显示loading图标
         */
        "showLoading": true,
        /**
         * @cfg {Object}
         * "浏览文件"按钮配置,和控件库的button按钮配置属性一致
         * ex:chooseBtn={text:"选择文件",iconCls:"icon-add"}
         * @param {String} text 按钮上的文本
         * @param {String} iconCls 按钮上的图标样式
         */
        "chooseBtn": {},
        /**
         * @cfg {Object}
         * "上传文件"按钮配置,和控件库的button按钮配置属性一致
         * ex:uploadBtn={text:"上传",iconCls:"icon-upload"}
         * @param {String} text 按钮上的文本
         * @param {String} iconCls 按钮上的图标样式
         */
        "uploadBtn": {},
        /**
         * @cfg {Boolean}
         * 是否在选取文件后自动开始上传
         * 开启自动上传功能 后，文件仅在验证通过后才会开始上传
         */
        "autoUpload": false,
        /**
         * @cfg {Boolean}
         * 是否允许上传多个文件
         * 若已开启自动上传，则总是允许上传多个文件
         */
        "multiple": false,
        /**
         * @cfg {Number}
         * 单个可上传文件的最大字节数限制（默认为 10 MB）
         * 单位为千字节（KB）
         * -1表示可上传文件大小不受限制
         */
        "sizeLimit": 10240,
        /**
         * @cfg {String|Array}
         * 允许上传的文件扩展名（扩展名并非文件真实的MIME类型，真实的文件类型需由后台处理程序验证）
         * 参数为字符串时，扩展名用逗号分隔
         * 空串或空数组则表示文件扩展名不受限制
         */
        "typeLimit": [],
        /**
         * @cfg {Number}
         * 指定可上传文件文件数限制(默认不做限制)
         * -1表示可上传任意数量的文件
         */
        "fileLimit": null,
        /**
         * @cfg {Object}
         * 额外附加的查询参数，对象的属性名为参数名，属性值为参数值
         * 也可以调用addParams(obj)方法来动态变更查询参数
         */
        "params": {},
        /**
         * @cfg {Boolean}
         * 在自动上传的情况下，当文件上传失败时，是否继续上传文件队列中的其他文件
         * 参数值为false时，将会继续上传其他文件
         * 也可通过调用stopUpload()方法来终止整个上传进程
         */
        "stopOnFailed": false,
        /**
         * 用户选取文件后的回调函数
         * 回调函数返回false，则表示放弃此次选取
         * 回调函数内this指向本控件
         * @param {Object} file 文件对象
         * @param {String} file.id 文件ID值，可以根据该ID值调用startUpload(id)方法上传该文件
         * @param {String} file.path 文件物理路径
         * @param {String} file.name 文件名称
         * @param {String} file.type 文件扩展名
         * @param {Number} file.size 文件大小，当js不能获取该值时，其值为null
         * @event onFileChoose
         */
        "onFileChoose": function (file) {},
        /**
         * 选取失败时回调函数
         * 默认的回调处理函数提供简单的错误提示，可自定义该回调函数来处理错误信息
         * 回调函数内this指向本控件
         * @param {Object} file 文件对象
         * @param {String} file.id 文件ID值
         * @param {String} file.path 文件物理路径
         * @param {String} file.name 文件名称
         * @param {String} file.type 文件扩展名
         * @param {Number} file.size 文件大小，当js不能获取该值时，其值为null
         * @param {String} code 错误代码，为以下常量（数值类型）：
         * <p>1 - 文件扩展名受限</p>
         * <p>2 - 文件大小受限</p>
         * <p>3 - 超过最大可上传文件数</p>
         * @param {String} msg 默认的错误提示消息
         * @event onChooseError
         */
        "onChooseError": function (file, code, msg) {
            fastDev.tips(msg);
        },
        /**
         * 每个文件上传开始时的回调函数
         * 回调函数返回false，则取消上传该文件
         * 回调函数内this指向本控件
         * @param {Object} file 文件对象
         * @param {String} file.id 文件ID值
         * @param {String} file.path 文件物理路径
         * @param {String} file.name 文件名称
         * @param {String} file.type 文件扩展名
         * @param {Number} file.size 文件大小，当js不能获取该值时，其值为null
         * @event onUploadStart
         */
        "onUploadStart": function (file) {},
        /**
         * 文件上传被取消时的回调函数
         * 回调函数内this指向本控件
         * @param {Object} file 文件对象
         * @param {String} file.id 文件ID值
         * @param {String} file.path 文件物理路径
         * @param {String} file.name 文件名称
         * @param {String} file.type 文件扩展名
         * @param {Number} file.size 文件大小，当js不能获取该值时，其值为null
         * @event onUploadCancel
         */
        "onUploadCancel": function (file) {
            fastDev.tips("文件 " + file.name + " 已经取消上传");
        },
        /**
         * 每个文件上传成功时的回调函数
         * 回调函数内this指向本控件
         * @param {Object} file 文件对象
         * @param {String} file.id 文件ID值
         * @param {String} file.path 文件物理路径
         * @param {String} file.name 文件名称
         * @param {String} file.type 文件扩展名
         * @param {Number} file.size 文件大小，当js不能获取该值时，其值为null
         * @param {Object|String} response 服务器端返回的上传结果，若上传发生异常或服务器端未返回任何结果，则其值为null
         * @event onUploadSuccess
         */
        "onUploadSuccess": function (file, response) {
            fastDev.tips("文件 " + file.name + " 上传成功");
        },
        /**
         * 每个文件上传失败时的回调函数
         * 回调函数内this指向本控件
         * @param {Object} file 文件对象
         * @param {String} file.id 文件ID值
         * @param {String} file.path 文件物理路径
         * @param {String} file.name 文件名称
         * @param {String} file.type 文件扩展名
         * @param {Number} file.size 文件大小，当js不能获取该值时，其值为null
         * @param {Object|String} response 服务器端返回的上传结果，若上传发生异常或服务器端未返回任何结果，则其值为null
         * @event onUploadFail
         */
        "onUploadFail": function (file, response) {
            fastDev.tips("文件 " + file.name + " 上传失败");
        },
        /**
         * 每个文件上传完成后的回调函数
         * <strong>回调函数返回布尔值false，则表示上传失败，无返回值或者返回非布尔值false则表示上传成功</strong>
         * 传递参数file为当前上传文件对象，response为服务器返回的上传结果JSON对象或字符串（不能解析为JSON对象时）
         * 注意！若上传发生异常或服务器未返回任何结果时，参数response为null
         * 默认回调是根据后台默认处理程序的返回结果来判断文件上传成功与否并给与相关提示的
         * 可以通过重定义该回调函数，然后自己处理后台处理程序的返回结果（上传失败的话，必须返回false值来通知控件更新上传状态）
         * <p>若上传成功，则会回调onUploadSuccess函数</p>
         * <p>若上传失败，则会回调onUploadFail函数</p>
         * 回调函数内this指向本控件
         * @param {Object} file 文件对象
         * @param {String} file.id 文件ID值
         * @param {String} file.path 文件物理路径
         * @param {String} file.name 文件名称
         * @param {String} file.type 文件扩展名
         * @param {Number} file.size 文件大小，当js不能获取该值时，其值为null
         * @param {Object|String} response 服务器端返回的上传结果，若上传发生异常或服务器端未返回任何结果，则其值为null
         * @return {Boolean} 若上传失败，请返回布尔值false来更新控件内部状态
         * @event onUploadComplete
         */
        "onUploadComplete": function (file, response) {
            // 下面的实现与本控件后台处理程序处理结果绑定，如果更换后台处理程序，请自己实现相应的结果处理
            if (!response) {
                // 上传失败，返回false
                return false;
            }
            if (fastDev.isArray(response) && !! response.length) {
                response = response[0];
                if (!response.allowed || response.missing) {
                    // 上传失败，返回false
                    return false;
                }
            }
        }
    },
    "_global" : {
		//宽度
		"wrapperWidth" : null,
		//显示文件名的文本框对象
		"textBox" : null,
		//"浏览文件"按钮默认配置
		"chooseBtnOpts" : {"text":"浏览..."},
		//"上传文件"按钮默认配置
		"uploadBtnOpts" : {"text":"上传"},
		//内置id
		"sequence" : "",
		//是否显示上传按钮的容器
		"showUploadBtnContainer" : true,
		//失去焦点事件
		"onBlur" : fastDev.noop,
		// 当前窗口卸载前回调事件(窗口unload特殊事件，可能会被用户事件覆盖）
		"winBeforeUnloadHandle" : null,
		//上传点击事件
		"uploadBtnClick" : fastDev.noop,
		//上传按钮对象
		"uploadBtn" : null,
		//input输入框对象
		"textInput" : null,
		//iframe对象
		"iframe" : null,
		//form表单对象
		"form" : null,
		//file控件容器对象
		"fileContainer" : null,
		//选择文件按钮容器对象
		"chooseBtnContainer" : null,
		//选择文件按钮对象
		"chooseBtn" : null,
		//显示进度容器对象
		"loading" : null,
		//窗口对象
		"win" : null,
		//是否是flash上传控件
		"isSWFUploader" : false,
		// 初始文件队列
        "fileQueue" : [],
        // 统计对象
        "fileStats" : {
            "success": 0,
            "failed": 0,
            "cancelled": 0
        },
		//是否需要服务器断验证
		"needCheckSize" : null,
		//正在上传文件的详细信息
		"uploadFile" : null,
		//是否绑定窗口卸载事件
		"boundUnloadEventHandle" : false,
		//是否有文件正在上传
		"isUploading" : false,
		//是否禁用
		"disabled" : false
    },
    /**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
    "template" : [
		'<form id="fileupload-form-#{sequence}" action="#{action}" method="post" enctype="multipart/form-data" target="fileupload-iframe-#{sequence}" style="width:#{width}">',
			'<table class="ui-form-upload-wrap" style="width:#{wrapperWidth}"><tbody><tr>',
				'<tpl if(!!#{showTextInput})>',
					'<td id="fileupload-text-box-#{sequence}" class="ui-form-upload-cell"></td>',
				'</tpl>',
				'<td style="width:1px"><div id="fileupload-fileinput-container-#{sequence}" style="position:relative;direction:ltr;overflow:hidden;">',
					'<div id="fileupload-choosebtn-#{sequence}" class="ui-form-upload-btn"></div></div>',
				'</td>',
				'<tpl if(!!#{showUploadBtnContainer})>',
					'<td style="width:18px">',
						'<tpl if(!!#{showUploadBtn})>',
							'<div id="fileupload-uploadbtn-#{sequence}"></div>',
						'</tpl>',
						'<tpl if(!!#{showLoading})>',
							'<span id="fileupload-loading-#{sequence}" class="ui-loading-indicator" style="display:none;background-position:0 0;padding:0">　</span>',
						'</tpl>',
					'</td>',
				'</tpl>',
			'</tr></tbody></table>',
		'</form>',
		'<iframe src="about:blank" id="fileupload-iframe-#{sequence}" name="fileupload-iframe-#{sequence}" style="display:none;position:absolute;left:-1000px;width:1px;height:1px"></iframe>'
    ],
    /**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
    "tplParam": ["sequence", "action", "showTextInput", "showUploadBtnContainer", "id", "width", "wrapperWidth", "name", "showLoading", "showUploadBtn"],
	// 使用父类文档说明
    "ready": function (options, global) {
        var width,fileLimit;
        //获取唯一ID
        var sequence = global.sequence = fastDev.getID();
        //修正宽度
        width = /^(-?\d+\.?\d+|-?\d)(px|%|em|cm)?$/.exec(fastDev.Util.StringUtil.trim(options.width + ""));
        if (width) {
            options.width = width[1] + (width[2] || "px");
        } else {
            options.width = options.showTextInput ? "280px" : "";
        }
        //允许上传的数量
        fileLimit = parseInt(options.fileLimit, 10);
        //包裹文本框和按钮的div宽度
        global.wrapperWidth = options.showTextInput ? "100%" : "";
        //参数准备
        fastDev.apply(options, {
            "id": options.id ? options.id : sequence,
            "params": fastDev.isPlainObject(options.params) ? options.params : {},
            "typeLimit": options.typeLimit ? fastDev.isArray(options.typeLimit) ? options.typeLimit : typeof options.typeLimit === "string" ? options.typeLimit.split(",") : [] : [],
            "showUploadBtn" : options.autoUpload ? false : options.showUploadBtn,
            "multiple" : options.autoUpload || options.multiple,
            "fileLimit" : fastDev.isNumber(fileLimit) ? fileLimit : -1
        });
        //是否显示上传按钮的容器
        global.showUploadBtnContainer = options.showUploadBtn || options.showLoading;
        //页面关闭时的事件
        global.winBeforeUnloadHandle = fastDev.setFnInScope(this, this.winBeforeUnloadHandle);
    },
	// 使用父类文档说明
    "construct": function (options, global) {
        var sequence = global.sequence,
            chooseBtnContainer;
        // 添加浏览文件按钮,合并用户配置的属性
        fastDev.apply(global.chooseBtnOpts, options.chooseBtn);
        global.chooseBtnOpts.container = chooseBtnContainer = this.find("#fileupload-choosebtn-" + sequence);
        //创建文本框
        if (options.showTextInput) {
            options.width = options.iwidth = "100%";
            options.container = this.find("#fileupload-text-box-" + sequence);
            global.textBox = fastDev.create("TextBox", options).setReadonly(true);
        }
        // 添加上传文件按钮
        if (options.showUploadBtn) {
            var that = this;
            fastDev.apply(global.uploadBtnOpts, options.uploadBtn);
            global.uploadBtnOpts.container = global.uploadBtnContainer = this.find("#fileupload-uploadbtn-" + sequence);
            global.uploadBtnClick = global.uploadBtnOpts.onclick;
            global.uploadBtnClick = typeof global.uploadBtnClick === "function" ? global.uploadBtnClick : fastDev.noop;
            global.uploadBtnOpts.onclick = function (event) {
                global.uploadBtnClick.apply(this, arguments);
                that.uploadEventHandle();
            };
            global.uploadBtn = fastDev.create("Button", global.uploadBtnOpts);
        }
        // 保存控件结构对象
        fastDev.apply(global, {
            "textInput": this.find("#" + options.id),
            "iframe": this.find("#fileupload-iframe-" + sequence),
            "form": this.find("#fileupload-form-" + sequence),
            "fileContainer": this.find("#fileupload-fileinput-container-" + sequence),
            "chooseBtnContainer": chooseBtnContainer,
            "chooseBtn": fastDev.create("Button", global.chooseBtnOpts),
            "loading": this.find("#fileupload-loading-" + sequence),
            "win": fastDev(window)
        });
        if (fastDev.Browser.isIE6) {
            // IE6存在容器高度未显示设置时，overflow样式失效的bug
            global.fileContainer.css("height", global.fileContainer.height());
        }
        // 初始一个文件域，若为Flash按钮，则不初始HTML上传按钮
        if (!global.isSWFUploader) {
            global.fileContainer.append(this.createFileInput());
        }
    },
	// 使用父类文档说明
    "init": function (options, global) {
        // 绑定相关事件
        global.fileContainer.bind("mouseover", function () {
            global.chooseBtnContainer.addClass("ui-button-over");
        }).bind("mouseout", function () {
            global.chooseBtnContainer.removeClass("ui-button-over");
        });
    },
    /**
     * 上传按钮点击事件回调
     * @private
     */
    "uploadEventHandle": function () {
        if (!this._options.readonly) {
            this.startUpload();
        }
    },
    /**
     * 选取文件
     * @private
     */
    "setFile": function () {
        var global = this._global,
            options = this._options,
            // 活动文件域
            fileInput = global.chooseFileInput,
            // 文件域ID
            fileId = fileInput.prop("id"),
            // 文件域的值
            fileValue = fileInput.prop("value").replace(/\\/g, "/"),
            // 文件路径
            //filePath = fileValue.replace(/\\/g, "/"),
            filePath = this.getFilePath(fileInput.elems[0]),
            // 文件名称
            fileName = fileValue.substring(fileValue.lastIndexOf("/") + 1),
            // 文件扩展名
            fileExtension = fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase(),
            // 文件对象
            file = fileInput.elems[0].files ? fileInput.elems[0].files[0] : null,
            // 文件大小
            fileSize = file ? file.fileSize ? file.fileSize : file.size : null;
        // 文件对象，包含属性声明如下：
        file = {
            "id": fileId,
            "path": filePath,
            "name": fileName,
            "type": fileExtension,
            "size": fileSize,
            "value": fileValue
        };
        if (!options.multiple) {
            global.fileQueue = [];
        }
        // 验证文件
        if ( !! fileValue && this.checkFile(file) && options.onFileChoose.call(this, file) !== false) {
            this.addFile(file);
            if (options.multiple) {
                fileInput.prop("disabled", "disabled");
                global.fileContainer.append(this.createFileInput());
            }
            if (options.autoUpload) {
                this.startUpload(fileId);
            }
        } else {
            global.textInput.prop("value", "");
            fileInput.prop("value", "");
        }
    },
    /**
     * 创建新的文件域
     * @private
     */
    "createFileInput": function () {
        var global = this._global,
            options = this._options,
            newFileInput = fastDev(document.createElement("input")),
            id = fastDev.getID();
        global.chooseFileInput = newFileInput.prop("type", "file")
        // 设置ID
        .prop("id", "file" + id)
        // 设置文件域的名称
        .prop("name", (options.name + "") || ("file" + id))
        // 该样式使得该文件域构成一个假按钮
        .addClass("ui-form-upload-file")
        // 绑定值变更事件，以便对选取的文件进行验证或上传
        .bind("change", fastDev.setFnInScope(this, this.setFile));
        return newFileInput;
    },
    /**
     * 检查文件是否符合上传要求
     * @param {Object} file
     * @return {Boolean}
     * @private
     */
    "checkFile": function (file) {
        var options = this._options,
            global = this._global,
            size = file.size,
            extension = file.type,
            valid = null;
        // 检查是否超过最大可上传文件数限制
        if (options.fileLimit !== -1) {
            if (global.fileQueue.length >= options.fileLimit || global.fileStats.success >= options.fileLimit) {
                options.onChooseError.call(this, file, 3, "超过最大可上传文件数");
                return false;
            }
        }
        // 检查文件扩展名
        if (options.typeLimit.length > 0) {
            fastDev.each(options.typeLimit, function (i, type) {
                valid = (type + "").toLowerCase() === extension;
                return !valid;
            });
            if (!valid) {
                options.onChooseError.call(this, file, 1, "文件类型受到限制");
                return false;
            }
        }
        // 检查文件大小，前端js验证仅适用于某些浏览器
        if ( !! size && options.sizeLimit !== -1) {
            if (options.sizeLimit < size / 1024) {
                options.onChooseError.call(this, file, 2, "文件大小超过限制");
                return false;
            }
        }
        if (size === null && options.sizeLimit !== -1) {
            // 需服务器端验证
            global.needCheckSize = true;
        }
        return true;
    },
    /**
     * 执行上传
     * @param {Object} file 需上传的文件对象
     * @private
     */
    "doUpload": function (uploadFile) {
        var global = this._global,
            options = this._options;
        // onUploadStart 回调返回false则取消本文件上传
        if (options.onUploadStart.call(this, uploadFile) !== false) {
            // 设置请求链接地址
            global.form.prop("action", this.getRequestAction());
            global.iframe.bind("load", global.iframeLoadEvent || (global.iframeLoadEvent = fastDev.setFnInScope(this, this.doComplete)));
            this.uploadReady();
            // 正在上传
            global.uploadFile = uploadFile;
            global.form.elems[0].submit();
        } else if (global.uploadAllFile) {
            this.startUpload();
        }
    },
    /**
     * 窗口卸载前回调事件
     * @private
     */
    "winBeforeUnloadHandle": function () {
        var file = this._global.uploadFile;
        return "文件" + ( !! file ? file.name : "") + "正在上传中，确定中断上传并离开此页？";
    },
    /**
     * 上传前的最后准备工作
     * @private
     */
    "uploadReady": function () {
        var global = this._global,
            options = this._options;
        global.win.bind("beforeunload", global.winBeforeUnloadHandle);
        global.boundUnloadEventHandle = true;
        global.isUploading = true;
        if (options.showLoading) {
            global.loading.css({
                display: "block",
                width: global.loading.parent().width()
            });
            if (options.showUploadBtn) {
                global.uploadBtnContainer.hide();
            }
        } else if (options.showUploadBtn) {
            global.uploadBtn.disable();
        }
    },
    /**
     * 上传完成后的扫尾工作
     * @private
     */
    "uploadFinish": function () {
        var global = this._global,
            options = this._options;
        if (global.boundUnloadEventHandle) {
            global.win.unbind("beforeunload", global.winBeforeUnloadHandle);
            global.boundUnloadEventHandle = false;
        }
        global.isUploading = false;
        global.uploadFile = null;
        if (!options.multiple && !global.isSWFUploader) {
            global.chooseFileInput.prop("value", "");
        }
        if (options.showLoading) {
            global.loading.hide();
            if (options.showUploadBtn) {
                global.uploadBtnContainer.show();
            }
        } else if (options.showUploadBtn) {
            global.uploadBtn.enable();
        }
    },
    /**
     * 文件上传完成时的回调函数
     * @private
     */
    "doComplete": function () {
        var options = this._options,
            global = this._global,
            iframeEle = global.iframe.elems[0],
            uploadFile = global.uploadFile,
            doc = null, response = null, json = null, elem;
        global.iframe.unbind("load", global.iframeLoadEvent);
        this.uploadFinish();
        if (!global.isCancelled) {
            try {
                doc = iframeEle.contentDocument ? iframeEle.contentDocument : iframeEle.contentWindow.document;
            } catch (e) {
                // 上传发生异常
                response = null;
            }
            if (doc) {
                response = fastDev.Util.StringUtil.trim(!(elem = fastDev(doc.body).children("pre")).isEmpty() ? elem.elems[0].innerHTML : doc.body.innerHTML);
                try {
                    json = fastDev.Util.JsonUtil.parseJson(response);
                } catch (e) {} finally {
                    response = !! json ? json : response;
                }
                doc.body.innerHTML = "";
            }
            this["do" + (options.onUploadComplete.call(this, uploadFile, response) !== false ? "Success" : "Fail")](uploadFile, response);
        } else if ( !! uploadFile) {
            options.onUploadCancel.call(this, uploadFile);
        }
        global.uploadFileInput.prop("disabled", "disabled");
        global.isCancelled = false;
        if (global.uploadAllFile) {
            // 上传队列中的所有文件
            this.startUpload();
        } else {
            global.chooseFileInput.removeProp("disabled");
        }
    },
    /**
     * 上传成功后执行的操作
     * @param {Object} file
     * @param {Object} response
     * @private
     */
    "doSuccess": function (file, response) {
        this._global.fileStats.success++;
        this._options.onUploadSuccess.call(this, file, response);
    },
    /**
     * 上传失败后执行的操作
     * @param {Object} file
     * @param {Object} response
     * @param {String} msg
     * @private
     */
    "doFail": function (file, response, msg) {
        var options = this._options;
        this._global.fileStats.failed++;
        this.cleanTextInput();
        if (options.stopOnFailed) {
            this.stopUpload();
        }
        options.onUploadFail.call(this, file, response);
    },
    /**
     * 获取请求链接地址
     * @return {String}
     * @private
     */
    "getRequestAction": function () {
        var options = this._options,
            global = this._global,
            // 链接中也许带了查询参数
            query = options.action.indexOf("?") === -1 ? false : true;
        query = query ? options.action : options.action + "?" + fastDev.getID() + "=1";
        // 最大字节数限制
        if (global.needCheckSize) {
            query += "&maxSize=" + options.sizeLimit * 1024;
        }
        for (var key in options.params) {
            query += ("&" + key + "=" + window.encodeURIComponent(options.params[key]));
        }
        return query;
    },
    /**
     * 删除并返回文件队列中指定ID的文件
     * 若ID为null，则删除并返回队列中的第一个文件
     * @param {String} id 文件ID
     * @return {Object} 文件对象
     * @private
     */
    "nextFile": function (id) {
        var global = this._global,
            queue = global.fileQueue,
            uploadFile = null;
        if (id) {
            fastDev.each(queue, function (idx, file) {
                if (file.id === id) {
                    uploadFile = file;
                    // 删除数组中的对应元素
                    queue.splice(idx, 1);
                    return false;
                }
            });
        } else {
            // 返回队列中的第一个文件对象
            uploadFile = queue.shift();
        }
        if (!global.isSWFUploader && !! uploadFile) {
            global.uploadFileInput = this.find("#" + uploadFile.id).removeProp("disabled");
        }
        return uploadFile;
    },
    /**
     * 向文件队列中添加一个文件
     * @param {Object} file 文件对象
     * @param {Boolean} only
     * @private
     */
    "addFile": function (file, only) {
        var global = this._global,
            options = this._options,
            fileName = file.name,
            fileValue = file.path;
        global.fileQueue.push(file);
        if (!only && options.showTextInput) {
            global.textInput.attr("fileId", file.id).prop("value", fileName.length > 23 ? fileName.slice(0, 9) + "..." + fileName.slice(-10) : fileName).prop("title", fileValue);
        }
    },
    /**
     * 添加查询参数
     * 会覆盖之前添加的同名的查询参数
     * @param {Object} params 参数对象，仅接受普通的javascript对象（即使用"{}"声明的对象字面量），对象属性名为查询参数名，属性值为查询参数值
     * @return {fastDev.Ui.FileUpload} 本控件实例
     */
    "addParams": function (params) {
        if (fastDev.isPlainObject(params)) {
            fastDev.apply(this._options.params, params);
        }
        return this;
    },
    /**
     * 开始文件上传
     * 若未指定需上传的文件ID，则上传文件队列中的所有文件
     * @param {String} id 文件ID值
     * @return {fastDev.Ui.FileUpload} 本控件实例
     */
    "startUpload": function (id) {
        var global = this._global,
            options = this._options,
            uploadFile;
        if (!options.action) {
            // 未设置后台处理程序链接
            fastDev.error("FileUpload", "startUpload", "未设置上传处理程序链接（action）");
            return this;
        }
        if (global.fileQueue.length === 0) {
            // 文件队列为空则返回
            global.chooseFileInput.prop("value", "").removeProp("disabled");
            this.uploadFinish();
            return this;
        }
        if (global.isUploading) {
            // 正在上传则返回
            return this;
        }
        global.isCancelled = false;
        global.chooseFileInput.prop("disabled", "disabled");
        // 如果未指定文件ID或者自动上传，则上传文件队列中的所有文件
        global.uploadAllFile = !id || options.autoUpload;
        // 执行上传
        uploadFile = this.nextFile(id);
        if (uploadFile) {
            this.doUpload(uploadFile);
        }
        return this;
    },
    /**
     * 立即取消当前上传进程并停止整个上传队列
     * 区别于cancelUpload的是，该方法会终止整个上传队列
     * @return {fastDev.Ui.FileUpload} 本控件实例
     */
    "stopUpload": function () {
        this._global.uploadAllFile = false;
        this.cancelUpload();
        return this;
    },
    /**
     * 取消当前的上传过程
     * 若上传队列中存在其他待上传的文件，仍会继续上传下一个文件
     * 若要取消整个上传进程，请调用stopUpload方法
     * @return {fastDev.Ui.FileUpload} 本控件实例
     */
    "cancelUpload": function () {
        var global = this._global;
        if ( !! global.uploadFile) {
            // 标记为取消状态
            global.isCancelled = true;
            this.cleanTextInput();
            global.fileStats.cancelled++;
            if (!global.isSWFUploader) {
                // javascript:false是为解决IE6在https协议下使用空页面时会有BUG的问题
                global.iframe.prop("src", "javascript:false;");
            }
        }
        return this;
    },
    /**
     * 获取当前上传队列的一份快照
     * @return {Array} 文件队列
     */
    "getFileQueue": function () {
        return this._global.fileQueue.slice(0);
    },
    /**
     * 清空并返回当前上传文件队列
     * @return {Array} 文件队列
     */
    "cleanFileQueue": function () {
        var global = this._global,
            queue = this.getFileQueue();
        global.fileQueue = [];
        this.cleanTextInput();
        if (!global.isSWFUploader) {
            global.chooseFileInput.prop("value", "");
        }
        return queue;
    },
    /**
     * 从文件上传队列中移除文件
     * @param {String} id 文件ID
     * @param {Boolean} only 仅从文件队列中移除而不清空文本输入框的值
     * @return {Object} 被移除的文件对象（未找到对应ID文件时返回null）
     */
    "removeFile": function (id, only) {
        var global = this._global,
            uploadFile = null;
        if (id) {
			this.find("#" + id).remove();
            uploadFile = this.nextFile(id);
            if (!only && global.textInput.attr("fileId") === id) {
                this.cleanTextInput();
                if (!this._options.multiple && !global.isSWFUploader) {
                    global.chooseFileInput.prop("value", "");
                }
            }
        }
        return uploadFile;
    },
    /**
     * 清空文本输入框的值
     * @param {Boolean} removeFile 是否同时移除文件队列中的对应文件
     * @return {fastDev.Ui.FileUpload}
     */
    "cleanTextInput": function (removeFile) {
        var global = this._global;
        if (this._options.showTextInput) {
            global.textInput.prop("value", "").prop("title", "");
        }
        if (removeFile) {
            this.removeFile(global.textInput.attr("fileId"));
        }
        return this;
    },
    /**
     * 设置是否只读 
     * @param {Boolean} [readonly=true] 是否只读
     * @return {fastDev.Ui.FileUpload} 当前控件实例
     */
    "setReadonly": function (readonly) {
        var global = this._global;
        this._options.readonly = (readonly = readonly === false ? false : true);
        if (!global.isSWFUploader) {
            global.chooseFileInput[readonly ? "prop" : "removeProp"]("disabled", "disabled").css("cursor", readonly ? "default" : "pointer");
        }
        this.find(".ui-button")[readonly ? "css" : "removeCss"]("cursor", "default");
        this.superClass.setReadonly.call(this, readonly);
        return this;
    },
    /**
     * 开启与禁用切换
     * @param {Boolean} disabled
     * @private
     */
    "toggle": function (disabled) {
        var global = this._global,
            toggle = disabled ? "disable" : "enable";
        //检查是否被禁用，若被禁用则跳出
        if (disabled ? !global.disabled : !! global.disabled) {
            if (this._options.showUploadBtn) {
                global.uploadBtn[toggle]();
            }
            global.chooseBtn[toggle]();
            if (!global.isSWFUploader) {
                global.chooseFileInput[disabled ? "prop" : "removeProp"]("disabled", "disabled").css("cursor", disabled ? "default" : "pointer");
            }
            if (global.textBox) {
                global.textBox[toggle]();
            }
            global.disabled = !! disabled;
        }
        return this;
    },
    /**
     * 禁用文件上传
     * @return {fastDev.Ui.FileUpload} 本控件实例
     */
    "disable": function () {
        return this.toggle(true);
    },
    /**
     * 启用文件上传
     * @return {fastDev.Ui.FileUpload} 本控件实例
     */
    "enable": function () {
        return this.toggle(false);
    },
    /**
     * 获取统计信息，返回的统计信息对象包含以下属性：
     * <p>-success 上传成功文件数</p>
     * <p>-fail 上传失败文件数</p>
     * <p>-cancel 取消上传的文件数</p>
     * <p>-progress 正在上传的文件数（0或者1）</p>
     * <p>-queued 文件队列中待上传的文件数</p>
     * @return {Object} 
     */
    "getStats": function () {
        var global = this._global;
        return {
            "success": global.fileStats.success,
            "fail": global.fileStats.failed,
            "cancel": global.fileStats.cancelled,
            "progress": global.isUploading ? 1 : 0,
            "queued": this.getFileQueue().length
        };
    },
    /**
     * 获取被选取文件的路径
     * @param {Object} 文件dom对象
     * @return {String} 
     * @private
     */
    "getFilePath" : function (fileInput){
		var filePath = "";
		if(fileInput.files){
			//兼容chrome、火狐7+、360浏览器急速模式等，应该也兼容ie10
			if(window.FileReader){
				var reader = new FileReader(); 
				reader.onload = function(e){
					//e.target.result为图片地址,这样能将图片填充到img标签中
					filePath = e.target.result;
				};
				reader.readAsDataURL(fileInput.files[0]);
			}
		}else if(fastDev.Browser.isIE){
			if(fastDev.Browser.isIE6){
				filePath = fileInput.value;
			}else {
				fileInput.select();
				//iframe下使用失去焦点方法取不到值,将使其他元素获得焦点后便可以取值，且只可访问一次
				window.parent.document.body.focus();
				filePath = document.selection.createRange().text;
			}
		}
		return filePath;
    }
});
﻿/**
 * @class fastDev.Ui.MessageBox
 * @extends fastDev.Ui.Dialog
 * @author luming
 * <p>消息提示框控件。</p>
 * <p>作者：禄铭</p>
 *
 *     fastDev.create("MessageBox", {
 *        width : "200px",
 *        height : "150px",
 *        content : "消息内容",
 *        icon : "tip"
 *     })
 */
fastDev.define("fastDev.Ui.MessageBox", {
    "alias": "MessageBox",
    "extend": "fastDev.Ui.Dialog",
    "_options": {
        /**
         * @cfg {Boolean}
         * 是否固定定位
         */
        "fixed": true,
        /**
         * @cfg {String}
         * 标题内容
         */
        "title": "消息",
        /**
         * @cfg {Number} 
         * 动画速度
         */
        "animateSpeed": 180,
        /**
         * @cfg {Boolean}
         * 是否允许调节大小
         */
        "allowResize": false,
        /**
         * @cfg {Boolean}
         * 是否在当前父容器展现
         * <p>默认只在当前页面展现,不跨出iframe
         * <p>若要跨出iframe,则需配置为true,并且父页面也必须引用fastui
         */
        "inside": false,
        /**
         * @cfg {String|Number}
         * 最小宽度
         */
        "minWidth": 255,
        /**
         * @cfg {Boolean}
         * 是否显示最大化按钮
         */
        "showMaxBtn": false,
        /**
         * @cfg {Boolean}
         * 是否显示最小化按钮
         */
        "showMinBtn": false,
        /**
         * @cfg {Boolean}
         * 是否显示折叠按钮
         */
        "showCollapseBtn": false
    },
    /**
     * 内置消息框队列 
     * @private
     */
    "queue": [],
	// 使用父类文档说明
    "construct": function (options, global) {
        global.box.removeClass("ui-dialog").addClass("ui-messagebox");
    },
    /**
     * @param {Function} callback 按钮点击回调
     * @param {String} [name] 按钮名
     * @return {Function}
     * @private 
     */
    "getBtnCallback": function (callback, name) {
        if (typeof callback !== "function" && (name = /^@MESSAGEBOX#(ALERT|CONFIRM|PROMPT|SAVE)#(OK|YES|NO|CANCEL)$/.exec(name))) {
            callback = function (event, that) {
                if ((that._options["on" + name[2] + "BtnClick"] || fastDev.noop).apply(that, [/CONFIRM|PROMPT/i.test(name[1]) ? name[2] === "OK" : name[2].toLowerCase(), /PROMPT/i.test(name[1]) ? that.find("#messagebox-prompt-input").prop("value") : undefined]) !== false) {
                    that.close();
                }
            };
        }
        return fastDev.Ui.Window.getBtnCallback.call(this, callback);
    },
    /**
     * 初始预设的消息框
     * @param {String} type 消息框类型
     * @param {Object} options 配置对象
     * @param {Boolean} queued 是否属队列操作
     * @return {fastDev.Ui.MessageBox}
     * @private 
     */
    "initPredefineBox": function (type, options, queued) {
        var box = fastDev.Ui.MessageBox,
            queue = box.queue;
        if (!queued) {
            queue.push({
                "type": type,
                "options": options
            });
            if (queue.length === 1) {
                return box.initPredefineBox(type, options, true);
            }
        } else {
            var msger = fastDev.Ui.Window.getData("@MESSAGEBOX#" + type),
                fn = options.callback,
                callback = typeof fn === "function" ? function () {
                    try {
                        return fn.apply(this, arguments);
                    } catch (e) {
                        fastDev.error("fastDev", type, "消息框回调函数执行异常。[" + e + "]");
                    }
                } : fastDev.noop,
                common = {
                    "animateSpeed": fastDev.Ui.Panel.launchAnimation ? 180 : 0,
                    "onCloseBtnClick": function () {
                        return callback.apply(this, [/CONFIRM|PROMPT/i.test(type) ? false : "cancel", /PROMPT/i.test(type) ? this.find("#messagebox-prompt-input").prop("value") : undefined]);
                    },
                    "onAfterOpen": type === "prompt" ? function () {
                        var elem = this.find("#messagebox-prompt-input").elems[0];
                        elem.focus();
                        elem.select();
                    } : fastDev.noop,
                    "onCANCELBtnClick": callback,
                    "onYESBtnClick": callback,
                    "onOKBtnClick": callback,
                    "onNOBtnClick": callback,
                    "onAfterClose": function () {
                        var box = fastDev.Ui.MessageBox,
                            queue = box.queue;
                        if (queue) {
                            var settings;
                            queue.shift();
                            if (settings = queue[0]) {
                                box.initPredefineBox(settings.type, settings.options, true);
                            }
                        }
                    }
                };
            options.content = fastDev.isValid(options.content) ? options.content : "";
            if (msger) {
                fastDev.apply(msger._options, fastDev.apply({
                    "icon": options.icon || "",
                    "height": "auto",
                    "width": "auto"
                }, common));
                msger.setContent(options.content).move({
                    "left": "50%",
                    "top": "38.2%"
                }).show().setTitle(options.title || "消息", options.iconCls || "");
            } else {
                options.persisted = true;
                fastDev.Ui.Window.setData("@MESSAGEBOX#" + type, msger = top.fastDev.create("MessageBox", fastDev.apply(options, common)));
            }
            fastDev(window).unbind("unload", box._winUnloadEventHandler || fastDev.noop).bind("unload", box._winUnloadEventHandler = function () {
                box.queue = [];
                msger.hide(true, false);
            });
            return msger;
        }
    }
});
fastDev.apply(fastDev, {
    /**
     * 确认框
     * @param {String} content 消息内容
     * @param {String} [title] 标题内容
     * @param {Function} [callback] 回调函数，参数为true为点击确定按钮，参数为false为点击取消按钮，this指向消息框控件，返回false则默认不关闭消息框
     * @param {String} [iconCls] 标题图标样式名
     * @return {fastDev.Ui.MessageBox}
     */
    "confirm": function (content, title, callback, iconCls) {
        return fastDev.Ui.MessageBox.initPredefineBox("confirm", {
            "title": title || "确认",
            "zIndex": 999999998,
            "callback": callback,
            "content": content,
            "iconCls": iconCls,
            "icon": "help",
            "buttons": [{
                    "text": "确定",
                    "width": "63px",
                    "name": "@MESSAGEBOX#CONFIRM#OK"
                }, {
                    "text": "取消",
                    "width": "63px",
                    "name": "@MESSAGEBOX#CONFIRM#CANCEL"
                }
            ]
        });
    },
    /**
     * 提问框
     * @param {String} content 提问内容
     * @param {String} [title] 标题内容
     * @param {Function} [callback] 回调函数，第一个参数为true表示点击确定按钮，为false则表示点击取消或关闭按钮，第二个参数为输入框或文本域的值，this指向消息框控件，返回false则默认不关闭消息框
     * @param {Boolean} [multiline] 输入框是否是文本域
     * @param {String} [value] 输入框或文本域中初始时的默认值
     * @param {String} [iconCls] 标题图标样式名
     * @return {fastDev.Ui.MessageBox}
     */
    "prompt": function (content, title, callback, multiline, value, iconCls) {
        value = fastDev.isValid(value) ? value : "";
        var height = multiline ? "188px" : "132px",
            html = '<div style="margin:3px 10px"><div style="height:' + (content ? "" : "18px") + ';margin-bottom:2px;width:' + (multiline ? 259 : 254) + 'px;word-wrap:break-word;word-break:break-all">' + content + '</div>';
        if (multiline) {
            html += '<div style="width:259px;height:81px;"><div style="width:259px" class="ui-form"><div class="ui-form-wrap ui-textarea"><div style="width:100%"><textarea id="messagebox-prompt-input" value="' + value + '" class="ui-form-field ui-form-input" autocomplete="off" aria-invalid="false" style="resize:none;overflow:auto;height:77px"></textarea></div></div></div></div>';
        } else {
            html += '<div style="width:254px;"><div style="width:254px" class="ui-form"><div class="ui-form-wrap ui-input"><input id="messagebox-prompt-input" value="' + value + '" type="input" class="ui-form-field ui-form-input"></div></div></div>';
        }
        html += "</div>";
        return fastDev.Ui.MessageBox.initPredefineBox("prompt", {
            "title": title || "输入",
            "zIndex": 999999997,
            "callback": callback,
            "minHeight": height,
            "maxHeight": 5000,
            "content": html,
            "iconCls": iconCls,
            "buttons": [{
                    "text": "确定",
                    "width": "63px",
                    "name": "@MESSAGEBOX#PROMPT#OK"
                }, {
                    "text": "取消",
                    "width": "63px",
                    "name": "@MESSAGEBOX#PROMPT#CANCEL"
                }
            ]
        });
    },
    /**
     * 提示框
     * @param {String} content 提示内容
     * @param {String} [title] 标题内容
     * @param {String} [icon] 图标名
     * @param {Function} [callback] "确定"按钮点击回调，回调内this指向当前消息框控件实例，返回false则默认不关闭消息框
     * @param {String} [iconCls] 标题图标样式名
     * @return {fastDev.Ui.MessageBox}
     */
    "alert": function (content, title, icon, callback, iconCls) {
        return fastDev.Ui.MessageBox.initPredefineBox("alert", {
            "title": title || "消息",
            "zIndex": 999999999,
            "callback": callback,
            "content": content,
            "iconCls": iconCls,
            "icon": icon,
            "buttons": {
                "text": "确定",
                "width": "63px",
                "name": "@MESSAGEBOX#ALERT#OK"
            }
        });
    },
    /**
     * YES_NO_CANCEL三按钮提示框
     * @param {String} content 消息内容
     * @param {String} [title] 标题内容
     * @param {Function} [callback] 回调函数，参数为以下枚举值：
     * <p>-yes "是"按钮点击 </p>
     * <p>-no "否"按钮点击 </p>
     * <p>-cancel "取消或关闭"按钮点击 </p>
     * 返回false则默认不关闭消息框
     * @param {String} [iconCls] 标题图标样式名
     * @return {fastDev.Ui.MessageBox}
     */
    "save": function (content, title, callback, iconCls) {
        return fastDev.Ui.MessageBox.initPredefineBox("save", {
            "title": title || "消息",
            "zIndex": 999999998,
            "callback": callback,
            "content": content,
            "iconCls": iconCls,
            "icon": "help",
            "buttons": [{
                    "text": "是",
                    "width": "58px",
                    "name": "@MESSAGEBOX#SAVE#YES"
                }, {
                    "text": "否",
                    "width": "58px",
                    "name": "@MESSAGEBOX#SAVE#NO"
                }, {
                    "text": "取消",
                    "width": "58px",
                    "name": "@MESSAGEBOX#SAVE#CANCEL"
                }
            ]
        });
    },
    /**
     * 简短提示消息标签
     * @param {String} content 提示消息内容
     * @param {String} [icon="tip"] 内容图标名
     * @param {Boolean|Number} [shake=false] 是否启用摇晃效果，数值参数时为摇晃的频率
     * @param {Number} [time=2] 显示时长，单位为秒
     * @return {fastDev.Ui.Window}
     */
    "tips": function (content, icon, shake, time) {
		var sequence = fastDev.getID();
        return fastDev.create("Window", {
            "content": '<div id="tips-'+sequence+'" style="white-space:nowrap;">' + (fastDev.isValid(content) ? content : "") + '</div>',
            "icon": icon = fastDev.isValid(icon) ? icon : "tip",
            "showHeader": false,
            "display": false,
            "allowResize": false,
            "allowDrag": false,
            "modal": false,
            "inside": false,
            "fixed": true,
            "top": "36.2%",
            "minHeight": 58,
            "maxHeight": 58,
            "minWidth": 120,
            "maxWidth": function (boxWidth) {
                return Math.max(Math.min(boxWidth - 40, 800), 120);
            },
            onBeforeClose: function () {
                this.close(true, {
                    "stop": {
                        "top": "15%",
                        "opacity": 0
                    }
                });
                return false;
            },
            onAnimateStart: function () {
                this.showContent();
                this._global.content.css("overflow", "hidden");
            },
            onAnimateStop: function () {
                this._global.content.css("overflow", "hidden");
            }
        }).open(true, {
            start: function () {
                var global = this._global,
                    options = this._options,
                    height = options.height - 12,
                    width = options.width - 12,
                    tips = this.find("#tips-"+sequence),
                    align = "center";
                global.box.css({
                    "-webkit-border-radius": "5px",
                    "-moz-border-radius": "5px",
                    "border-radius": "5px",
                    "width" : options.width += 20
                });
                global.body.css({
                    "-webkit-border-radius": "5px",
                    "-moz-border-radius": "5px",
                    "border-radius": "5px"
                });
                global.content.css("padding", "5px 15px");
                if (icon && fastDev.isString(icon)) {
                    tips.parent().css({
                        "margin": "7px 0px",
                        "height": (height -= 14)
                    });
                    width -= 40;
                    align = "left";
                }
                tips.css({
                    "lineHeight": height - 3 + "px",
                    "textOverflow": !fastDev.Browser.isIE ? "ellipsis" : "",
                    "overflow": "hidden",
                    "width": width,
                    "textAlign": align,
                    "height": height
                });
                return {
                    "opacity": 0,
                    "left": "50%"
                };
            },
            stop: {
                "top": "30%",
                "opacity": 1
            },
            callback: function () {
                if (shake) {
                    this.shake(shake);
                }
                this.closeTimeout(Math.abs(parseFloat(time) || 2));
            }
        });
    },
    /**
     * 通知框
     * <p>除3个特定参数（time、showTime、position）外，其他配置参数继承自MessageBox
     * @param {String} [options] 参数配置对象
     * @param {String} [options.itype] 控件类型，可选值为：Window、Dialog、MessageBox
     * @param {String} [options.time] 显示时长，单位为秒
     * @param {String} [options.position] 弹出位置（left-top、top、right-top、left、right、left-bottom、right-bottom、bottom）
     * @param {Boolean} [options.showTime] 是否在标题栏显示关闭倒计时信息
     * @param {String|Number} [options.horizontalOffset] 弹窗在水平方向（X轴）上的最终显示位置相对可视区域边界的偏移量（百分比值相对于可视区域计算）
     * @param {String|Number} [options.verticalOffset] 弹窗在垂直方向（Y轴）上的最终显示位置相对于可视区域边界的偏移量（百分比值相对于可视区域计算）
     * @param {String} [options.showTime] 是否在标题栏显示关闭倒计时信息
     * @param {String} [options.onBeforeAutoClose] 自动关闭前的回调函数。（此回调先于onBeforeClose回调执行）
     * @return {fastDev.Ui.MessageBox}
     */
    "notice": function (options) {
        var getPosition = function (global) {
            var docLeft = global.doc.scrollLeft(),
                docTop = global.doc.scrollTop(),
                width = global.box.width(),
                height = global.box.height(),
                regx = /^\d+(?:\.\d+|)%$/,
                horizontalOffset = options.horizontalOffset,
                verticalOffset = options.verticalOffset,
                leftPercent = regx.test(horizontalOffset),
                topPercent = regx.test(verticalOffset);
            return {
                "left": /^left$/i.test(position) ? docLeft - width : /^right$/i.test(position) ? docLeft + global.win.width() + width : /.*left.*/i.test(position) ? leftPercent ? horizontalOffset : docLeft : /.*right.*/i.test(position) ? leftPercent ? (100 - parseFloat(horizontalOffset)) + "%" : "100%" : leftPercent ? horizontalOffset : "50%",
                "top": /.*top.*/i.test(position) ? docTop - height : /.*bottom.*/i.test(position) ? global.win.height() + docTop + height : topPercent ? verticalOffset : "50%",
                "visible": false,
                "opacity": 0
            };
        }, position = (options = fastDev.isPlainObject(options) ? options : {}).position || "right-bottom",
            onBeforeAutoClose = options.onBeforeAutoClose || fastDev.noop;
        fastDev.apply(options, {
            "animateSpeed": fastDev.isValid(options.animateSpeed) ? options.animateSpeed : 600,
            "maxHeight": options.maxHeight || 453,
            "minHeight": options.minHeight || 96,
            "maxWidth": options.maxWidth || 280,
            "minWidth": options.minWidth || 155,
            "allowResize": !! options.allowResize || false,
            "fixed": options.fixed === undefined ? true : !! options.fixed,
            "showCollapseBtn": !! options.showCollapseBtn || false,
            "modal": !! options.modal || false,
            "inside": !! options.inside || false,
            "display": false,
            "visible": true,
            "onAnimateStart": function (target, queue, type) {
                if (/open|close/.test(type)) {
                    this.showContent();
                    if (fastDev.isValid(options.horizontalOffset) || fastDev.isValid(options.verticalOffset)) {
                        var global = this._global,
                            regx = /^\d+(?:\.\d+|)%$/,
                            fx = fastDev.Util.StringUtil.stripUnits,
                            left = regx.test(options.horizontalOffset) ? 0 : fx(options.horizontalOffset, global.win, "width"),
                            top = regx.test(options.verticalOffset) ? 0 : fx(options.verticalOffset, global.win, "height"),
                            animation;
                        queue = fastDev.isArray(queue) ? queue : [queue || {}];
                        fastDev.each(["start", "stop"], function (i, val) {
                            animation = queue[0][val];
                            animation.left += (!isNaN(left) ? /.*right.*/i.test(position) ? -left : left : 0);
                            animation.top += (!isNaN(top) ? /.*bottom.*/i.test(position) ? -top : top : 0);
                        });
                    }
                }
            },
            onCloseBtnClick: function () {
                this.close(false, {
                    "stop": getPosition(this._global)
                });
                return false;
            }
        });
        return fastDev.create(/(Window|Dialog|MessageBox)/i.test(options.itype) ? RegExp.$1 : "MessageBox", options).open(true, {
            "start": function () {
                return getPosition(this._global);
            },
            "stop": function () {
                var regx = /^\d+(?:\.\d+|)%$/,
                    horizontalOffset = options.horizontalOffset,
                    verticalOffset = options.verticalOffset;
                return {
                    "left": regx.test(horizontalOffset) ? /.*right.*/i.test(position) ? (100 - parseFloat(horizontalOffset)) + "%" : horizontalOffset : /.*left.*/i.test(position) ? 0 : /.*right.*/i.test(position) ? "100%" : "50%",
                    "top": regx.test(verticalOffset) ? /.*bottom.*/i.test(position) ? (100 - parseFloat(verticalOffset)) + "%" : verticalOffset : /.*top.*/i.test(position) ? 0 : /.*bottom.*/i.test(position) ? "100%" : "50%",
                    "visible": true,
                    "opacity": 1
                };
            },
            "callback": function () {
                var that = this,
                    global = this._global,
                    time = Math.abs(parseInt(options.time, 10));
                if (time && options.showTime) {
                    global.windowCloseTimer = window.setInterval(function () {
                        that.setTitle(options.title + "（" + (--time) + " 秒后自动关闭）");
                        if (!time) {
                            window.clearInterval(global.windowCloseTimer);
                            onBeforeAutoClose.call(that);
                            that.close(false, {
                                "stop": getPosition(global)
                            });
                        }
                    }, 1000);
                } else if (!isNaN(time)) {
                    global.windowCloseTimer = window.setTimeout(function () {
                        onBeforeAutoClose.call(that);
                        that.close(false, {
                            "stop": getPosition(global)
                        });
                    }, time * 1000);
                }
            }
        });
    }
});
/**
 * @class  fastDev.Ui.Navigation
 * @extends fastDev.Ui.Accordion
 * 导航控件是支持多级功能导航控件，设计最多支持5级，手风琴主要是内容的收缩、展开显示的功能，导航控件主要是应用与左侧纵向的功能导航。继承自Accordion，导航类控件。<p>
 * 作者：姜玲
 *
 *			<div itype="Navigation" width="260px" activeIndex=2 initSource="data.txt"  target="main"></div>
 */
fastDev.define("fastDev.Ui.Navigation", {
	"extend" : "fastDev.Ui.Accordion",
	"alias" : "Navigation",
	"_options" : {
		/**
		 * @cfg {Json}
		 * 合法的json数据源
		 **/
		"items" : null,
		/**
		 * @cfg {String}
		 * 所以链接指向哪儿的打开方式，同a标记的target属性
		 */
		"target" : null,
		/**
		 * @cfg {String}
		 * 顶级节点的Group值
		 */
		"topGroup" : "-1",
		/**
		 * @cfg {String}多个用,分隔
		 * 自定义数据属性,不能和原有属性名相同
		 */
		"customFields":"",	
		/**
		 * @cfg {Boolean}
		 * 是否显示为0的数值
		 */
		"showZero":false,
		/**
		 * @cfg {Boolean}
		 * 是否点击展开的节点是否需要收缩起来
		 */
		"ExNodeClickIsCollect":true,
		/**
		 * @cfg {Boolean}
		 * 是否打开当前或第一个链接页面
		 */
		"autoOpenPage" : false,
		/**
		 * @cfg {Boolean}
		 * 是否自动适应高度
		 */
		"autoHeight" : true
	},
	"_global" : {
		//层数
		"level":1,
		//是否都是子节点
		"idAllChild":false,
		//选中
		"selected":"",
		//是否显示
		"isdisplay":"none",
		//临时数据集
		"newData":[],
		//查找用的样式正则
		"matchInReaction" : /\sui-nav-(title|header-ico|arrow|arrow-default|itemtext|number|parent-number)\s/
	},
	"template" : [
		'<div class="ui-nav" style="width:#{width}; height:auto; float:left;">',
			'<div class="ui-nav-panle" style="width:#{width};">',
				'<tpl dynamic>', 
					'<tpl each>',
						'<tpl if(#{idAllChild})>',
							'<div class="ui-nav-inner" name="{id}">',
								'<a class="ui-nav-text',
								'<tpl if({ico}!="")>',
								' ui-nav-ico {ico}',
								'</tpl>',
								'"',
								'<tpl if({url})>',
								 ' href="{url}" target="{target}"',
								 '</tpl>',									 
								 '<tpl if((!#{showZero} && {num}&gt;0) || (#{showZero} && {num} !== "nocount"))>',
									'><div class="ui-nav-ctext"><span class="ui-nav-itemtext">{text}</span>',
									'<span class="ui-nav-number">{num}</span></div>',
								 '<tpl else>', 
									'>{text}',
								 '</tpl>',	
								 '</a>',								 
								// '>{text}</a>',
				             '</div>',
						'<tpl else>',
						    '<div class="ui-nav-item',
							'<tpl if(#{level}&gt;1)>',	
								' ui-nav-#{level}thstage',
							'</tpl>',				
							'" name="{id}">', 
							  '<a class="#{selected}" ',
								'<tpl if({url})>',
								 ' href="{url}" target="{target}"',
								 '</tpl>',	
								 '>',
							'<div class="ui-nav-header">',
								'<div class="ui-nav-title" >{text}</div>',
								'<div class="ui-nav-header-ico {ico}"></div>', 
								'<tpl if((!#{showZero} && {num}&gt;0) || (#{showZero} && {num} !== "nocount"))>',
									'<span class="ui-nav-parent-number">{num}</span>',
								'</tpl>',	
								'<span class="ui-nav-arrow"></span>', 
							'</div>', 
							'</a>',
							'<div class="ui-nav-content" id="{id}" style="display: #{isdisplay};width:#{width};">',									
							'</div>',
						'</tpl>',
						'</div>',
					'</tpl>',
				'</tpl>',
			'</div>',
		'</div>'	
	],	
	"tplParam" : ["height","width","selected","isdisplay","level","idAllChild","itemHeight","showZero"],
	"fields" : ["id","pid","text","num",{name:"url",defaultValue:""},{name:"target",defaultValue:""},{name:"ico",defaultValue:""}],	
	/*"staticTemplate" : function(params) {
	  return '<div class="ui-nav" style="width:'+params.width+'; height:auto; float:left;"><div class="ui-nav-panle" style="width:'+params.width+';"></div></div>';
	},
	"dynamicTemplate" : function(params,data){
		var html = [],idAllChild=this._global.idAllChild,level=this._global.level,
		showZero=this._options.showZero,number=0;
		for(var i=0,item;item=data[i];i++){
			if(item.num !== "nocount"){
				if(!!item.num){
					number=parseInt(item.num, 10);
				}else{
					number=this.getChildNumSum(item.id);
				}
			}else{
				number = 'nocount';
				this.dataset.update(function(index, record){
					if(record.pid === item.id){
						return {"num" : "nocount"};
					}
				});
			}
			if(idAllChild){
				html.push('<div class="ui-nav-inner" name="'+item.id+'">');
				html.push('<a class="ui-nav-text');
				if(!!item.ico){
					html.push(' ui-nav-ico '+item.ico+'');
				}
				html.push('"');
				if(!!item.url){
					html.push(' href="'+item.url+'" target="'+item.target+'"');
				}				
				//新需求，加数字的
				// 不显示0的情况下，number要求大于0
				// 显示0的情况下无要求
				if((!showZero && number>0) || (showZero && number !== 'nocount')){
					html.push('><div class="ui-nav-ctext"><span class="ui-nav-itemtext">'+item.text+'</span>');
					html.push('<span class="ui-nav-number">'+number+'</span></div>');
				}else{
					html.push('>'+item.text);
				}
				html.push('</a>');
				html.push('</div>');
			}else{
				html.push('<div class="ui-nav-item');							
				if(level>1){	
					html.push(' ui-nav-'+level+'thstage');
				}											
				html.push('" name="'+item.id+'">');
				html.push('<a class="'+params.selected+'" ');
				if(!!item.url){
					html.push(' href="'+item.url+'" target="'+item.target+'"');
				}
				html.push('>');
				html.push('<div class="ui-nav-header">');
				html.push('<div class="ui-nav-title" >'+item.text+'</div>');
				html.push('<div class="ui-nav-header-ico '+item.ico+'"></div>');
				//新需求，加数字的
				if((!showZero && number>0  ) || (showZero && number !== 'nocount')){
					html.push('<span class="ui-nav-parent-number">'+number+'</span>');
				}
				html.push('<span class="ui-nav-arrow"></span>'); 
				html.push('</div>'); 
				html.push('</a>');
				html.push('<div class="ui-nav-content" id="'+item.id+'" style="display: '+params.isdisplay+';width:'+params.width+';height:'+params.height+'">');									
				html.push('</div>');		
				html.push('</div>');				
			}
				
		}
		return html.join('');
	},*/
	/**
	 * 面板参数准备
	 * @protected
	 */
	"ready" : function(options, global) {		
		if(options.mode==="maxContent"){
			global.isdisplay="none";
		}
		if(options.showAll){
			global.selected="ui-nav-selected";
			global.isdisplay="block";	
		}		
		if(options.customFields){			
			this.fields =this.fields.slice(0).concat(options.customFields.split(','));
		}
	},
	// 使用父类文档说明
	"init" : function(options, global) {
		var me = this,navinner=this.find(".ui-nav-inner"),navPanle=this.find(".ui-nav-panle");
		//按钮鼠标滑入滑出样式改变事件		
		navinner.unbind("mouseover");
		navinner.unbind("mouseout");
		navinner.bind("mouseover", fastDev.setFnInScope(this, this.navInnerMouseoverHandle));
		navinner.bind("mouseout", fastDev.setFnInScope(this, this.navInnerMouseoutHandle));	
		navPanle.unbind("click");		
		navPanle.bind("click", fastDev.setFnInScope(this, this.panleClickHandle));	
	},
	/**
	 * 鼠标划入按钮响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"navInnerMouseoverHandle" : function(event){
		var options = this._options, 
		global = this._global;		
		var navInner = this.getNavInner(event);
		if(navInner && navInner.hasClass("ui-nav-inner-over") === false){
			navInner.addClass("ui-nav-inner-over");
		}
	},
	/**
	 * 鼠标划出响应句柄
	 * @param {Event} event 事件对象
	 * @private 
	 */
	"navInnerMouseoutHandle" : function(event){
		var global = this._global;
		var navInner = this.getNavInner(event);
		if(navInner){
			navInner.removeClass("ui-nav-inner-over");
		}
	},
	/**
	 * 初始化控件列表
	 * @param {Array} items数据项
	 * @protected
	 */
	"constructItems" : function(options, global) {
		var me = this;
		//var dataSet=this.dataset.select("pid="+options.topGroup);
		var number,data=this.dataset.select();
		for(var i=0,item;item=data[i];i++){			
				if(!!item.num){
					number=parseInt(item.num, 10);
				}else{
					number=this.getChildNumSum(item.id);					
				}
				this.dataUpdateByid(item.id,number);
				//this.dataset.update(function(index, record){
				//	if(record.id === item.id){
				//		return {"num" :number};
				//	}
				//});			
		}
		
		var dataSet = this.dataset.select(function(i, data) {
			return data.pid === options.topGroup;
		});
		
		this._global.params.height = options.autoHeight ? "auto" : options.container.height()-(dataSet.length*25) + "px";
		this.renderDynamicHtml(global.panel,dataSet);
		//this._renderDynamicHtml(this.find(".ui-nav-panle"),dataSet);
		var level=this._global.level;
		for(var j=0;j<dataSet.length;j++){			
			me.constructSubItem(dataSet[j].id,level+1);
		}
		this.setConstruct();
		//this.bindEvent();
	},
	/**
	 * 创建纵向导航的子项
	 * @private
	 */
	"constructSubItem" : function(id,level){		
		var me=this,global=this._global,//dataSet=this.dataset.select("pid="+id);
		dataSet = this.dataset.select(function(i, data) {
			return data.pid === id;
		});
		if(dataSet && dataSet.length>0){
			var isIdAllChild=this.getIdAllChild(dataSet);
			this._global.params.level=level;
			this._global.params.idAllChild=isIdAllChild;
			//var fragment = this.initDynamicHtml(null,dataSet);
			global.level=level;
			global.idAllChild=isIdAllChild;
			//var fragment =this.dynamicTemplate(tplParam,dataSet);
			var iddiv = this.find("[id='"+id+"']");
			this._global.params.height = this._options.autoHeight ? "auto" : iddiv.height()-(dataSet.length*25) + "px";
			this.renderDynamicHtml(iddiv,dataSet);
			//iddiv.append(fragment);
			if(!global.idAllChild){
				var divlist=iddiv.find(".ui-nav-content").elems;
				for(var i=0;i<divlist.length;i++){					
					me.constructSubItem(fastDev(divlist[i]).prop("id"),level+1);
				}
			}
		}
	},
	/**
	 * 得到子级的数值的和
	 * @private
	 */
	"getChildNumSum":function(pid){
		var num=0;
		var ds = this.dataset.select(function(j, data) {
			return data.pid === pid;
		    });
		for(var i=0;i<ds.length;i++){
			if(ds[i].num){
				num+=parseInt(ds[i].num,10);
			}else{
				num+=this.getChildNumSum(ds[i].id);
			}
		}
		return num;
	},
	/**
	 * 得到是否全部都是带链接的子级
	 * @private
	 */
	"getIdAllChild":function(dataSet){	
		var len=0,len2=0,length=0,ds;
		for(var i=0;i<dataSet.length;i++) {
			if(!dataSet[i].url){
				len+=1;
			}
			ds=this.getDataSetByPid(dataSet[i].id);
			//ds = this.dataset.select(function(j, data) {
			//return data.pid === dataSet[i].id;
		   // });
		    length=ds.length;
			if(length===0){
				len2+=1;
			}
		}	
		if((len+len2)===0 || len===0){
			return true;
		}else{
			return false;
		}
	},
	/**
	 * 得到pid为指定值的数据集
	 */
	"getDataSetByPid":function(id){
		var ds = this.dataset.select(function(j, data) {
			return data.pid === id;
		    });
		return ds;
	},
	/**
	 * 根据id更新数字
	 * @param {string} id
	 * @param {string} num
	 */	
	"dataUpdateByid":function(id,number){
		this.dataset.update(function(index, record){
			if(record.id === id){
				return {"num" :number};
			}
		});
	},
	/**
	 * 给尾部设置样式
	 * @private
	 */	
	"setLastCls":function(){
		this.find(".ui-nav-last").removeClass(".ui-nav-last");
		this.find(".ui-nav-panle>a>.ui-nav-item:last>a>.ui-nav-header").addClass("ui-nav-last");
	},
	/**
	 * 设置控件属性
	 * @private
	 */
	"setConstruct" : function() {
		var options = this._options;		
		this.setLastCls();
		//currentNode 优先。在currentNode没有值的情况下，才用活动索引。
		if(options.currentNode){
			this.find("div[name='"+options.currentNode+"']").attr("current","1");
		}else if(options.activeIndex>-1){
			this.find(".ui-nav-text:eq("+options.activeIndex+")").parent("div").attr("current","1");					
		}	
		if(options.target){
			this.find("a[href!=''][target='']").prop("target",options.target);
		}
		if(options.autoOpenPage){
			this.openCurrentPage();
		}
		//设置节点的展开收缩
		if(!options.showAll){
			this.setCurrentExpand();
		}
		this.find(".ui-nav-content:empty").height("0px");
		this.find(".ui-nav-content:empty").prev("a").find(".ui-nav-arrow").attr("class","ui-nav-kong");
	},
	/**
	 * 打开当前节点的链接
	 * @private
	 */
	"openCurrentPage":function(){
		var ec = this.find("[current='1']");
		var href = ec.find("a:first").prop("href");
		var target = ec.find("a:first").prop("target");
		if(href && href !== "" && target) {
			window.open(href, target);
		}
	},
	/**
	 * 设置div展开收缩与选中或没选中的样式
	 * @param {fastDev.core.DomObject} container 菜单容器
	 * @param {fastDev.core.DomObject} content 感应区域
	 * @param {fastDev.core.DomObject} content 内容区域
	 * @private
	 */
	"setExpandCollect":function(container, reaction, content, event){
		// 如果菜单没有内容区域
		if(!content.elems.length){
			return;
		}
		
		var options=this._options, itemHeight=this._global.itemHeight, upContent;
		//如果内容节点是显示状态则隐藏
		if( content.isShow() ){
			if(!(reaction.hasClass("ui-nav-selected") && !options.ExNodeClickIsCollect)){
				content.hide();
				options.onCollect.call(this, container.attr("name"));
			}
			content.find(".ui-nav-inner-seleted").removeClass("ui-nav-inner-seleted");
			//content.find(".ui-nav-selected").removeClass("ui-nav-selected");
		}else{			
			if( !options.showAll && options.showOne ){
				upContent = container.parent();
				upContent.find(".ui-nav-content").hide();
				upContent.find(".ui-nav-selected").removeClass("ui-nav-selected");
				upContent.find(".ui-nav-inner-seleted").removeClass("ui-nav-inner-seleted");
			}
			if(options.mode==="maxContent"){
				 content.css({"height":itemHeight+"px"});
			}
			content.show();
			reaction.addClass("ui-nav-selected");			 
			options.onExpand.call(this, container.attr("name"));
		}
		
		if(!content.children().hasElem()){
			if(options.onItemClick.call(this, event, container.attr("name"))===false ){
				reaction.removeAttr("href");
				return false;
			}
		}			
	},	
	/**
	 * 设置项的点击事件
	 * @param {fastui.core.DomObject} content 菜单内容区域
	 * @param {fastui.core.DomObject} container 菜单容器
	 * @param {Event} event 事件对象
	 * @private
	 */
	"setDivClick":function(content, container, event){		
		if(content.isShow()){						
			this.setExpandCollect(container,false);
		}else{						
			this.setExpandCollect(container,true);
		}
		content=container.find(".ui-nav-content:first");
		var len=content.elems.length,len2=0;
		if(len>0){
			len2=content.children().elems.length;
		}
		if(len===0 || len2===0){
			if(this._options.onItemClick.call(this,event,container.attr("name"))===false){
				container.children("a").removeAttr("href");
				return false;
			}
		}
	},
	/**
	 * 设置当前节点的展开
	 * @private
	 */
	"setCurrentExpand":function(){		
		var currentdiv=this.find("[current='1']").elems;
		if(currentdiv.length>0){
			var currdiv=fastDev(currentdiv);
			if(currdiv.hasClass("ui-nav-inner")){
				currdiv.addClass("ui-nav-inner-seleted");
			}
			currdiv.parents(".ui-nav-content").show();
			currdiv.parents(".ui-nav-content").prev().addClass("ui-nav-selected");
			currdiv.children(".ui-nav-content").prev().addClass("ui-nav-selected");
		}
		this.find("[current='1']").removeAttr("current");
	},		
	/**
	 * 得到ui-nav-inner
	 * @private
	 */
	"getNavInner" : function(event) {
			var navInner, evobj = fastDev(event.target);
			if(evobj.hasClass("ui-nav-text")) {
				navInner = evobj.parent("div");
			} else if(evobj.hasClass("ui-nav-inner")) {
				navInner = evobj;
			}
			return navInner;
	},		
	/**
	 * 面板点击事件
	 * @param {} event
	 * @return {Boolean}
	 */
	"panleClickHandle" : function(event){
		// 菜单由一个容器、一个感应区域以及一个内容区域组成
		var reaction, container, content;
		// 从事件触发的感应点获取到感应区域
		if(reaction = this.getReaction(event)){
			// 从感应区域获取到容器
			container = reaction.parent("div");
			// 根据感应区域的样式判断当前菜单是否是最后一级
			// 最后一级菜单不包含内容区域
			if(reaction.hasClass("ui-nav-text")){
				// 删除上次所设定的选中样式
				this.find(".ui-nav-inner-seleted").removeClass("ui-nav-inner-seleted");
				// 设置当前菜单为选中项，设置选中样式至容器
				container.addClass("ui-nav-inner-seleted");
				// 激活 onItemClick事件回调函数，接受回调函数返回结果
				// 如果返回false则不进行跳转
				if( this._options.onItemClick.call(this, event, container.attr("name")) === false){
					reaction.removeAttr("href");
					return false;
				}
			}else{
				// 获取菜单的内容区域
				content = reaction.next();
				// 设置展开/收缩状态
				this.setExpandCollect(container, reaction, content, event);
				//this.setDivClick(content, container, event);
			}
		}
	},
	/**
	 * 得到感应区域
	 * @private
	 */
	"getReaction" : function(event) {
		var reaction, className, point = fastDev(event.target);
		// 如果感应点就是感应区域直接返回
		// 如果感应点是感应区域的子节点则取感应点的父节点返回
		// 如果感应点是容器则取容器内的感应区域返回
		// 如果感应点位于感应区域内则去父元素返回
		
		if( point.hasClass("ui-nav-text") || point.hasClass("ui-nav-a") ) {
			reaction = point;
		} else if(point.hasClass("ui-nav-header") || point.hasClass("ui-nav-ctext")) {
			reaction = point.parent("a");
		} else if(point.hasClass("ui-nav-item") || point.hasClass("ui-nav-inner")) {
			reaction = point.children("a");
		}else if((className = point.getClass()) && this._global.matchInReaction.test(" " + className + " ")){
			reaction = point.parent("div").parent("a");
		}
		return reaction;
	},
	/**
	 * 得到当前展开的节点,返回选择节点ID(必须是showOne=true时)
	 * @return {String}
	 */
	"getSelected":function(){
		var options= this._options,currentid="";
		if(options.showOne){
			var ca=this.find(".ui-nav-inner-seleted");
			if(ca.elems.length>0){
				currentid=ca.attr("name");
			}else{
				currentid=this.find(".ui-nav-selected:last").parent().attr("name");
			}
		}
		return currentid;
	},
	/**
	 * 据ID设置当期活动的Item
	 * @param {String} id
	 */
	"setActiveItem" : function(id) {
		var options= this._options;
		this.find(".ui-nav-selected").removeClass("ui-nav-selected");
		this.find(".ui-nav-inner-seleted").removeClass("ui-nav-inner-seleted");
		this.find(".ui-nav-content").hide();
		this.find("div[name='"+id+"']").attr("current","1");
		if(options.autoOpenPage){
			this.openCurrentPage();
		}
		if(!options.showAll){
			this.setCurrentExpand();
		}
	},
	/**
	 * 通过id得到节点数据
	 * @param {String} id
	 * @return  {Object}
	 * @private
	 */
	"_getItemById" : function(id) {
		//return  this.dataset.select("id="+id);
		var ds = this.dataset.select(function(i, data) {
			return data.id === id;
		});
		return ds;
	},
	/**
	 * 通过id得到节点数据
	 * @param {String} id
	 * @return  {Json}
	 */
	"getItemById" : function(id) {
		var data=this._getItemById(id);
		if(data.length>0){
			return data[0];
		}else{
			return null;
		}
	},
	/**
	 * 添加一个节点
	 * @param {Array} item
	 */
	"addItem":function(item){
		//var tempds=this.dataset.select("id="+item.id);
		var tempds=this._getItemById(item.id);
		if(tempds.length>0){
			throw "id为"+item.id+"的数据已经存在";
		}
		this.dataset.insert(item);
		var dataSet=this._getItemById(item.id);//this.dataset.select("id="+item.id);
		if(dataSet && dataSet.length>0){
			this._global.idAllChild=true;
			//var fragment = this.initDynamicHtml(null,dataSet);
			var iddiv = this.find("[id='"+item.pid+"']");
			this.renderDynamicHtml(iddiv,dataSet,false,window,false);
			//this.appendDynamicHTML(iddiv,dataSet);
			//iddiv.append(fragment);
			this._options.onAdd(item);
		}		
	},
	/**
	 * 手风琴移除一个节点
	 * @param {String} id
	 */
	"removeItem" : function(id) {
		var options = this._options;
		if(options.onBeforeRemove.call(this, id) === false) {
			return false;
		}
		this.dataset.remove(function(i, data) {
			return data.id === id;
		});
		this.find("[name='" + id + "']").remove();
		this.setLastCls();
		options.onRemove.call(this, id);
	},	
	/**
	 * 重新加载
	 */
	"reLoad" : function(config,data) {	
		this._global.idAllChild=false;
		this._global.level=1;
		this.initRefresh(config,data);
		this.setConstruct();
	},
	/**
	 * 设置id的数值
	 * @param {String} id
	 * @param {Number} number
	 */
	"setNumByid" : function(id,number){
		var div=this.find("[name='"+id+"']");
		number=parseInt(number,10);
		if(div.elems.length>0){
			var span =div.children("a").children("div").find(".ui-nav-number,.ui-nav-parent-number");
			var oldnum=this.getNumByid(id);
			span.setText(""+number);
			var pid=this.getPidById(id);
			if(pid){
				var pidnum=this.getNumByid(pid);
				if(oldnum>number){
					pidnum=pidnum-(oldnum-number);
				}else{
					pidnum=pidnum+(number-oldnum);
				}
				this.setNumByid(pid,pidnum);
			}
		}
	},
	/**
	 * 得到id的数值
	 * @param {String} id
	 */
	"getNumByid" : function(id){
		var div=this.find("[name='"+id+"']");
		if(div.elems.length>0){
			var span =div.children("a").children("div").find(".ui-nav-number,.ui-nav-parent-number");
			var num= span.getText();
			if(num){
				return parseInt(num,10);
			}
		}
		return 0;
	},
	/**
	 * 根据id得到group
	 * @param {String} id
	 * @return  {String}节点group
	 */
	"getPidById" : function(id) {
		var items = this._getItemById(id);
		if(items.length>0){
			return items[0].pid;
		}else{
			return null;
		}
	},
	/**
	 * 得到全部节点数据
	 * @return  {Json}
	 */
	"getAllItems" : function() {
		return this.dataset.select();
	},
	/**
	 * 得到指定节点的所有父祖先级节点
	 * @param {String} id
	 * @return  {Array}
	 */
	"getParentItems" : function(id) {
		var node = this._getItemById(id);		
		var itemsall = this.getPNode(node);
		return itemsall;
	},
	/**
	 * 递归得到指定节点的父祖先级节点
	 * @param {String} id
	 * @return  {Array}
	 * @private
	 */
	"getPNode":function(node){		
		var pnode=this._global.newData.slice(0).concat(node),ppnode;
		if(node){ 
			ppnode = this._getItemById(node[0].pid);
			if(ppnode){
				this.getPNode(ppnode);
			}
		}	
		return pnode;
	},
	/**
	 * 得到当前节点的父级节点
	 * @return  {Object}
	 */
	"getCurrParentItem" : function() {
		var items, id = this.getSelected();
		if(id){
			 var node = this.getItemById(id);
			 if(node){
				 items=this.getItemById(node.pid);
			 }
		}
		return items;
	}
});
﻿/**
 * @class fastDev.Ui.ProgressBar
 * @extends fastDev.Ui.Component
 * @author chengwei
 * <p>进度条控件。</p>
 * <p>有2种可选模式：progress（进度条样式）、graphical（Loading图标）。</p>
 * <p>作者：禄铭</p>
 *     
 *     fastDev.create("ProgressBar", {
 *          container : "example"
 *     });
 */
fastDev.define("fastDev.Ui.ProgressBar", {
    "alias": "ProgressBar",
    "extend": "fastDev.Ui.Component",
    "_options": {
        /**
         * @cfg {String}
         * 控件展现模式，可选值：graphical（图形）、progress（进度条）
         */
        "model": "graphical",
        /**
         * @cfg {String}
         * 进度条模式时进度条的宽度值
         */
        "width": "200px",
        /**
         * @cfg {String}
         * 进度条上显示的提示文本
         * <p>progress(进度条)默认显示当前进度的百分比值
         */
        "text": '',
        /**
         * @cfg {String}
         * 提示文本对齐方式，可选值：left、center、right
         */
        "textAlign": "center",
        /**
         * @cfg {Number}
         * 进度条总进度值
         */
        "totalValue": 100,
        /**
         * @cfg {Number}
         * 当前进度值
         */
        "value": 0,
        /**
         * @cfg {Number}
         * 遮罩层透明度（小数） 
         * 透明度设置区间为0-1,设置越小，背景越透明
         */
        "opacity": 0.1,
        /**
         * @cfg {Boolean}
         * 是否使用屏蔽层
         * <p>Loading模式下默认开启屏蔽层，Progress模式下默认不开启屏蔽层
         */
        "allowLock": null,
        /**
         * @cfg {Boolean}
         * 是否在满进度时自动关闭
         * <p>Loading模式下默认自动关闭，Progress模式下默认不自动关闭
         */
        "allowAutoClose": null,
        /**
         * @cfg {Number}
         * 索引重置
         */
        "zIndex": 2015,
        /**
         * @cfg {String}
         * loading模式下的图标样式
         */
        "loadingCls":"",
        /**
         * @event onValueChange
         * 进度改变时的回调函数
         * 传递参数为当前进度值和总进度值，this指向当前ProgressBar控件实例
         */
        "onValueChange": fastDev.noop,
        /**
         * @event onOverlayClick
         * 加载图标模式时，遮罩被点击时的事件
         * <p>this指向当前ProgressBar控件实例
         */
        "onOverlayClick": fastDev.noop,
        /**
         * @private 
         */
        "enableInitProxy": false,
        /**
         * @private 
         */
        "enableDataProxy": false,
        /**
         * @private 
         */
        "autoRenderer": false,
        /**
         * @private 
         */
        "enableDataSet": false
    },
    "_global":{
		//唯一标识
		"sequence" : "",
		//graphical(图形)模式下的遮罩层
		"mask":null,
		//主体div
		"box":null,
		//进度条图标(progress模式下等于_global.box)
		"ico":null,
		//进度条提示文本的span对象
		"text":null,
		//当前页面的body对象
		"body":null,
		//progressbar模式下的文本div的外层div对象
		"gradient":null,
		//当前控件是否被关闭
		"close" : false
	},
    /**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
    "template" : [
		'<tpl if(/progress/i.test(#{model}))>',
			'<div id="ui-progressbar-#{sequence}" class="ui-progressbar" style="width:#{width};position:relative;">',
				'<div id="ui-progressbar-gradient-#{sequence}" class="ui-progressbar-gradient">',
					'<span id="ui-progressbar-text-#{sequence}" class="ui-progressbar-text" style="width:#{width};text-align:#{textAlign}">#{text}</span>',
				'</div>',
			'</div>',
		'<tpl else>', 
			'<span id="ui-progressbar-#{sequence}" name="loading"><div id="ui-progressbar-ico-#{sequence}" class="ui-progressbar-ico #{loadingCls}"></div>',
			'<span id="ui-progressbar-text-#{sequence}" class="ui-progressbar-ico-text">#{text}</span></span>',
		'</tpl>', 
		'<tpl if(#{allowLock})>',
			'<div id="progressbar-mask" class="ui-opacity"></div>',
		'</tpl>'
    ],
    /**
	 * @property {Array} tplParam
	 * 控件模板中所需要使用到的参数
	 * @readonly
	 */
    "tplParam": ["model", "width","sequence", "text", "textAlign", "allowLock", "loadingCls"],
	// 使用父类文档说明
    "ready": function (options, global) {
		//获取唯一标识
		global.sequence = fastDev.getID();
		//container需要指定原生dom对象,如果容器是组件对象,则取其中的dom对象
        options.container = fastDev(fastDev.isComponent(options.container) ? options.container.elems[0] : options.container);
        var fn = fastDev.Util.StringUtil.stripUnits;
        // 进度条模式时，减去阴影3px左右宽度，默认200px宽
        options.width = (fn(options.width, Math.max(options.container.width() - 3, 0)) || 200) + "px";
        //当前进度和总进度修正
        options.totalValue = parseFloat(options.totalValue) || 100;
        options.value = Math.min(parseFloat(options.value) || 0,options.totalValue);
        //根据配置的模式设置是否使用屏蔽层
        options.allowLock = options.allowLock === null ? options.model === "graphical" ? true : false : !! options.allowLock;
        //根据配置的模式设置当进度满时是否自动关闭
        options.allowAutoClose = options.allowAutoClose === null ? options.model === "graphical" ? true : false : !! options.allowAutoClose;
        //没有设置文本时,loading默认不显示文本,进度条默认显示进度百分比
        if (!options.text) {
            options.text = options.model === "graphical" ? "" : this.getPercentage();
        }
    },
	// 使用父类文档说明
    "construct": function (options, global) {
		//保存常用的dom元素对象
        global.mask = this.find("#progressbar-mask");
        var sequence = global.sequence;
        if (typeof options.onOverlayClick === "function" && !fastDev.isNoop(options.onOverlayClick)) {
            global.mask.bind("click", fastDev.setFnInScope(this, options.onOverlayClick));
        }
        global.box = this.find("#ui-progressbar-"+sequence);
        global.ico = options.model === "progress" ? global.box : this.find("#ui-progressbar-ico-"+sequence);
        global.text = this.find("#ui-progressbar-text-"+sequence);
        global.body = fastDev(document.body);
        this.elems.splice((options.allowLock || options.model === "graphical") ? 0 : 1, 0, "none");
    },
	// 使用父类文档说明
    "init": function (options, global) {
        //隐藏
        if (!(options.display = !(options.display === "none" || options.display === false))) {
            this.hide();
        }
        //进度条模式时的配置
        if (options.model === "progress") {
			var box = global.box;
			//left和top设置
            if (options.left) {
                box.css("left", options.left);
            }
            if (options.top) {
                box.css("top", options.top);
            }
            //初始进度条宽度
            global.gradient = this.find("#ui-progressbar-gradient-"+global.sequence).css("width", this.getPercentage());
            if (!options.allowLock) {
                options.container.append(box);
            }
        }
    },
    /**
     * 定位
     * @param {DomObject} elem 需定位的元素
     * @return {fastDev.Ui.ProgressBar}
     * @private
     */
    "position": function (elem) {
        // 图形模式
        var options = this._options,
            global = this._global,
            container = options.container;
        if ((options.allowLock || options.model === "graphical") && options.display && !container.isEmpty()) {
            // offsetWidth变量用来取特殊属性值，用来触发浏览器刷新DOM操作（reflow），以便读取正确的绝对坐标值
            var offset = container.offset(),
                width = container.width(),
                height = container.height(),
                fixed = container.css("position") === "fixed",
                body = global.body,
                bodyBorder = {
                    "left": fixed ? 0 : parseInt(body.css("borderLeftWidth"), 10) || 0,
                    "top": fixed ? 0 : parseInt(body.css("borderTopWidth"), 10) || 0
                },
                loading = global.ico,
                left, top;
            // 容器内部居中坐标计算，需算上容器的相应边框及边距
            // borderTopWidth属性即上边框的高度，注意，没有borderTopHeight样式属性
            left = offset.left + bodyBorder.left + (parseInt(container.css("borderLeftWidth"), 10) || 0) + (parseInt(container.css("paddingLeft"), 10) || 0);
            top = offset.top + bodyBorder.top + (parseInt(container.css("borderTopWidth"), 10) || 0) + (parseInt(container.css("paddingTop"), 10) || 0);
            // 定位
            elem.appendTo(body).css({
                "position": "absolute",
                "left": Math.max(0.5 * (width - elem.outerWidth(true)) + left, left),
                // 0.382系数为黄金分割比例位置，如果需要完全居中，改为0.5系数即可
                "top": Math.max(0.42 * (height - loading.outerHeight(true)) + top, top),
                "zIndex": options.zIndex + 1
            });
            if (options.allowLock) {
                // 使用遮罩覆盖容器内部
                global.mask.css({
                    "position": "absolute",
                    "left": left,
                    "top": top,
                    "width": width,
                    "height": height,
                    "zIndex": options.zIndex,
                    "opacity": options.opacity
                }).appendTo(body);
                global.mask.elems[0].style.opacity=options.opacity;
            }
        }
        return this;
    },
    /**
     * 进度值改变处理
     * @param {Number} oldValue
     * @param {Number} oldTotal
     * @param {Number} newValue
     * @param {Number} newTotal
     * @private
     */
    "valueChange": function (oldValue, oldTotal, newValue, newTotal) {
        var options = this._options;
        //当进度不满时执行值改变事件
        if ((oldValue / (oldTotal || 1)) !== (newValue / (newTotal || 1))) {
			//设置进度文本
			this.setText(this.getPercentage());
			//进度改变的回调事件
            options.onValueChange.call(this, newValue, newTotal);
        }
        //配置自动关闭时,进度满则自动关闭
        if (newValue === newTotal && options.allowAutoClose) {
            this.close();
        }
        return this;
    },
    /**
     * 获取当前进度百分比
     * 注意，返回值为一个字符串类型的百分数
     * @return {String} xx%
     */
    "getPercentage": function () {
		return (Math.floor(Math.abs(100 * (this._options.value / (this._options.totalValue || 100))))) + "%";
    },
    /**
     * 设置当前进度值
     * 用于刷新当前进度值
     * @param {Number} value 当前进度值
     * @param {Number} [total] 总进度值（可选）
     * @return {fastDev.Ui.ProgressBar}
     */
    "setValue": function (value, total) {
        var options = this._options,
            global = this._global,
            //保存旧值
            oldValue = options.value,
            oldTotal = options.totalValue;
        //保存所设置的新值
        options.value = parseFloat(value)||0;
        if (total !== undefined) {
            options.totalValue = parseFloat(total)||100;
        }
        //设置进度条长度
        if (global.gradient) {
			global.gradient.css("width", this.getPercentage());
        }
        return this.valueChange(oldValue, oldTotal, options.value, options.totalValue).position(global.box);
    },
    /**
     * 设置显示文本
     * 可用于刷新文本提示信息
     * @return {fastDev.Ui.ProgressBar}
     */
    "setText": function (text) {
        var global = this._global;
        if (global.closed) {
            return this;
        }
        global.text.setText(text);
        return this.position(global.box);
    },
    /**
     * 获取当前进度值
     * @return {Number}
     */
    "getValue": function () {
        return this._options.value;
    },
    /**
     * 设置进度条的总数值
     * @param {Number} value 总进度值
     * @return {fastDev.Ui.ProgressBar}
     */
    "setTotalValue": function (value) {
		return this.setValue(this._options.value, value);
    },
    /**
     * 获取进度条的总数值
     * @return {Number}
     */
    "getTotalValue": function () {
		return this._options.totalValue;
    },
    /**
     * 显示隐藏切换
     * @param {Boolean} show 是否是显示
     * @private
     */
    "toggle": function (show) {
        var global = this._global;
        if (global.closed) {
            return this;
        }
        this._options.display = !! show;
        if ( !! global.mask) {
            global.mask[show ? "show" : "hide"]();
        }
        if ( !! global.box) {
            global.box[show ? "show" : "hide"]();
        }
        return this;
    },
    /**
     * 显示进度条控件
     * @return {fastDev.Ui.ProgressBar}
     */
    "show": function () {
        if (!this._options.display) {
            return this.toggle(true).position(this._global.box);
        }
        return this;
    },
    /**
     * 隐藏进度条控件
     * @return {fastDev.Ui.ProgressBar}
     */
    "hide": function () {
        return this.toggle();
    },
    /**
     * 关闭并销毁进度条控件
     * @return {fastDev.Ui.ProgressBar}
     */
    "close": function () {
        var global = this._global;
        if (global.closed) {
            return this;
        }
        this._options.display = !(global.closed = true);
        this.destroy();
        return this;
    }
});
/**
 * @class fastDev.Ui.SWFFileUpload
 * @extends fastDev.Ui.FileUpload
 * @author luming
 * <p>flash文件上传控件。</p>
 * <p>可以不依赖于服务器端实时获取上传进度信息。</p>
 * <p>作者：禄铭</p>
 *     
 *     <input itype="SWFFileUpload" flashUrl="../../data/swfupload.swf" 
 *            action="../../data/fileupload.jsp"/>
 */
fastDev.define("fastDev.Ui.SWFFileUpload", {
    "alias": "SWFFileUpload",
    "extend": "fastDev.Ui.FileUpload",
    "_options": {
        /**
         * @cfg {String}
         * flash上传控件的链接地址（swf文件）
         * <strong>相对于当前页面</strong>
         */
        "flashUrl": "swfupload.swf",
        /**
         * @cfg {String}
         * 文件类型描述，文件选取弹窗上文件类型处将显示该类型描述信息
         */
        "fileTypeDescription": "",
        /**
         * @event onUploadProgress
         * 文件上传过程中的回调函数
         * 回调函数内this指向本控件
         * @param {Number} compelte 已完成字节数
         * @param {Number} total 文件的总字节数
         */
        "onUploadProgress": function (file, complete, total) {}
    },
    "_global" : {
		//是否是flash上传控件,则父类中不创建HTML文件域
		"isSWFUploader" : true,
		//上传按钮对象
		"swfUploadBtn" : null,
		//添加flash上传控件对象
		"swfUploader" : null,
		//是否上传的全部文件
		"uploadAllFile" : null,
		//上传队列最后一个文件的id
		"lastFileID" : null
    },
    /**
	 * @property {Array} template
	 * 控件模板
	 * @readonly
	 */
    "template" : [
		'<div style="width:#{width}"><table class="ui-form-upload-wrap" style="width:#{wrapperWidth}"><tbody><tr>',
			'<tpl if(#{showTextInput})>',
			'<td id="fileupload-text-box-#{sequence}" class="ui-form-upload-cell"></td>',
			'</tpl>',
			'<td style="width:1px">',
				'<div id="fileupload-fileinput-container-#{sequence}" style="position:relative;overflow:hidden;">',
					'<div id="fileupload-choosebtn-#{sequence}" class="ui-form-upload-btn"></div>',
					'<div id="swffileupload-button-#{sequence}" class="ui-form-upload-file">',
						'<div id="swffileupload-placeholder-#{sequence}"></div>',
					'</div>',
				'</div>',
			'</td>',
			'<tpl if(#{showUploadBtnContainer})>',
				'<td style="width:18px">',
					'<tpl if(#{showUploadBtn})>',
						'<div id="fileupload-uploadbtn-#{sequence}"></div>',
					'</tpl>',
					'<tpl if(#{showLoading})>',
						'<span id="fileupload-loading-#{sequence}" class="ui-loading-indicator" style="display:none;background-position:0 0;padding:0">　</span>',
					'</tpl>',
				'</td>',
			'</tpl>',
			'</tr></tbody></table>',
		'</div>'
    ],
	// 使用父类文档说明
    "ready": function (options, global) {
		//检测配置是否正确
        if (!options.action || !options.flashUrl) {
            fastDev.error("SWFFileUpload", "ready", "action参数或flashUrl参数为空");
            return false;
        }
        // 转换成绝对地址，解决SWFUpload控件对地址处理的BUG
        options.action = this.toAbsURL(options.action);
        // 适配参数
        if (options.typeLimit.length > 0) {
            fastDev.each(options.typeLimit, function (idx, type) {
                options.typeLimit.push("*." + fastDev.Util.StringUtil.trim(type));
            });
            options.typeLimit = options.typeLimit.join(";");
        } else {
            options.typeLimit = "*.*";
        }
        options.sizeLimit = options.sizeLimit === -1 ? 0 : options.sizeLimit;
        options.fileLimit = options.fileLimit === -1 ? 0 : Math.abs(options.fileLimit);
        options.onUploadProgress = typeof options.onUploadProgress === "function" ? options.onUploadProgress : fastDev.noop;
    },
	// 使用父类文档说明
    "construct": function (options, global) {
        var sequence = global.sequence,
            // HTML按钮容器
            chooseBtn = this.find("#fileupload-choosebtn-" + sequence);
        global.swfUploadBtn = this.find("#swffileupload-button-" + sequence);
        // 添加flash上传控件按钮
        global.swfUploader = new SWFUpload({
            "upload_url": options.action,
            "flash_url": options.flashUrl,
            "file_post_name": options.name || ("file" + fastDev.getID()),
            "post_params": options.params,
            "preserve_relative_urls": true,
            "prevent_swf_caching": true,
            "file_types": options.typeLimit,
            "file_types_description": options.fileTypeDescription,
            "file_size_limit": options.sizeLimit,
            "file_upload_limit": options.fileLimit,
            "button_placeholder_id": "swffileupload-placeholder-" + sequence,
            "button_width": chooseBtn.width() - 6, // HTML按钮有6px的有效外边距
            "button_height": chooseBtn.height(),
            "button_window_mode": SWFUpload.WINDOW_MODE.TRANSPARENT,
            "button_action": options.multiple ? SWFUpload.BUTTON_ACTION.SELECT_FILES : SWFUpload.BUTTON_ACTION.SELECT_FILE,
            "button_cursor": SWFUpload.CURSOR.HAND,
            "file_queued_handler": fastDev.setFnInScope(this, this.fileQueuedHandler),
            "file_queue_error_handler": fastDev.setFnInScope(this, this.fileQueuedErrorHandler),
            "upload_start_handler": fastDev.setFnInScope(this, this.uploadStartHandler),
            "upload_progress_handler": fastDev.setFnInScope(this, this.uploadProgressHandler),
            "upload_success_handler": fastDev.setFnInScope(this, this.uploadSuccessHandler),
            "upload_error_handler": fastDev.setFnInScope(this, this.uploadErrorHandler),
            "upload_complete_handler": fastDev.setFnInScope(this, this.uploadCompleteHandler)
        });
    },
	// 使用父类文档说明
    "init": function (options, global) {
		//为以下方法添加before和after事件
		//flash上传控件就一个按钮,其他dom元素都是控件库的，所以在做这些操作的时候需要一起调用相关方法
        this.proxy("cleanFileQueue", function () {
            fastDev.each(this.getFileQueue(), function (idx, file) {
                global.swfUploader.cancelUpload(file.id, false);
            });
        }, true);
        this.proxy("removeFile", function (id) {
            if (id) {
                global.swfUploader.cancelUpload(id, false);
            }
        });
        this.proxy("enable", function () {
            global.swfUploadBtn.show();
        });
        this.proxy("disable", function () {
            global.swfUploadBtn.hide();
        });
        this.proxy("setReadonly", function (readonly) {
            global.swfUploadBtn[readonly === false ? "show" : "hide"]();
        });
    },
    /**
     * 文件添加进队列回调
     * @param {Object} file 文件对象
     * @private
     */
    "fileQueuedHandler": function (file) {
        var options = this._options,
            global = this._global;
        if (options.onFileChoose.call(this, (file = this.toFile(file))) !== false) {
            if (!options.multiple) {
                this.removeFile(global.lastFileID, true);
                global.lastFileID = file.id;
            }
            this.addFile(file);
            if (options.autoUpload) {
                this.startUpload(file.id);
            }
        } else {
            global.swfUploader.cancelUpload(file.id, false);
        }
    },
    /**
     * 文件添加进队列异常时的回调
     * @param {Object} file 文件对象
     * @param {String} code 错误码
     * @param {String} msg 默认消息
     * @private
     */
    "fileQueuedErrorHandler": function (file, code, msg) {
        var options = this._options,
			errEnum = SWFUpload.QUEUE_ERROR;
        file = this.toFile(file);
        switch (code) {
            case errEnum.INVALID_FILETYPE:
                options.onChooseError.call(this, file, 1, "文件类型受到限制");
                break;
            case errEnum.FILE_EXCEEDS_SIZE_LIMIT:
                options.onChooseError.call(this, file, 2, "文件大小超过限制");
                break;
            case errEnum.QUEUE_LIMIT_EXCEEDED:
                options.onChooseError.call(this, file, 3, "超过最大可上传文件数");
        }
    },
    /**
     * 上传开始回调
     * @param {Object} file 文件对象
     * @private
     */
    "uploadStartHandler": function (file) {
        var options = this._options,
            global = this._global;
        global.uploadFile = this.nextFile(file.id);
        if (options.onUploadStart.call(this, (file = this.toFile(file))) !== false) {
            global.swfUploader.setUploadURL(this.getRequestAction());
            this.uploadReady();
        } else {
            this.cancelUpload(file.id);
            return false;
        }
    },
    /**
     * 上传过程回调
     * @param {Object} file 文件对象
     * @param {Number} complete 完成字节数
     * @param {Number} total 总字节数
     * @private
     */
    "uploadProgressHandler": function (file, complete, total) {
        this._options.onUploadProgress.call(this, this.toFile(file), complete, total);
    },
    /**
     * 上传成功回调
     * @param {Object} file 文件对象
     * @param {Object} data 服务器返回的数据
     * @param {Boolean} response 状态量
     * @private
     */
    "uploadSuccessHandler": function (file, data, response) {
        response = fastDev.Util.StringUtil.trim(data);
        try {
            data = fastDev.Util.JsonUtil.parseJson(response);
        } catch (e) {} finally {
            response = !! data ? data : response;
        }
        this["do" + (this._options.onUploadComplete.call(this, file = this.toFile(file), response) !== false ? "Success" : "Fail")](file, response);
    },
    /**
     * 上传失败回调
     * @param {Object} file 文件对象
     * @param {String} code 错误码
     * @param {String} msg 默认提示消息
     * @private
     */
    "uploadErrorHandler": function (file, code, msg) {
        var errEnum = SWFUpload.UPLOAD_ERROR;
        switch (code) {
            case errEnum.FILE_VALIDATION_FAILED:
            case errEnum.SPECIFIED_FILE_ID_NOT_FOUND:
            case errEnum.UPLOAD_LIMIT_EXCEEDED:
            case errEnum.FILE_CANCELLED:
            case errEnum.UPLOAD_STOPPED:
                return;
        }
        this._options.onUploadComplete.call(this, file = this.toFile(file), null);
        this.doFail(file, null, msg);
    },
    /**
     * 上传完成回调
     * @param {Object} file 文件对象
     * @private
     */
    "uploadCompleteHandler": function (file) {
        var global = this._global;
        this.uploadFinish();
        if (global.uploadAllFile) {
            global.swfUploader.startUpload();
        }
    },
    /**
     * 开始文件上传
     * 若未指定需上传的文件ID，则上传文件队列中的所有文件
     * @param {String} id 文件ID值
     * @return {fastDev.Ui.SWFFileUpload} 本控件实例
     */
    "startUpload": function (id) {
        var global = this._global,
            options = this._options;
        global.uploadAllFile = !id || options.autoUpload;
        global.swfUploader.startUpload(id);
        return this;
    },
    /**
     * 立即取消当前上传进程并停止整个上传队列
     * @return {fastDev.Ui.FileUpload} 本控件实例
     */
    "stopUpload": function () {
        var global = this._global;
        global.uploadAllFile = false;
        this.cancelUpload();
        return this;
    },
    /**
     * 取消当前的上传过程
     * 若上传队列中存在其他待上传的文件，仍会继续上传下一个文件
     * 若要取消整个上传进程，请调用stopUpload方法
     * @return {fastDev.Ui.FileUpload} 本控件实例
     */
    "cancelUpload": function () {
        var global = this._global,
            options = this._options,
            file = global.uploadFile;
        if ( !! file) {
            global.swfUploader.cancelUpload(file.id, false);
            options.onUploadCancel.call(this, file);
            global.fileStats.cancelled++;
            this.cleanTextInput();
            this.uploadFinish();
        }
        if (global.uploadAllFile) {
            this.startUpload();
        }
        return this;
    },
    /**
     * 适配文件对象
     * @return {Object}
     * @private
     */
    "toFile": function (file) {
        file = file || {};
        return {
            "id": file.id,
            "name": file.name,
            "size": file.size,
            "path": file.name,
            "type": file.type.replace(".", "")
        };
    },
    /**
     * 函数代理
     * @param {Object} name 函数名
     * @param {Object} func 代理函数
     * @param {Boolean} before 是否在被代理函数之前执行代理函数
     * @private
     */
    "proxy": function (name, func, before) {
        var that = this,
            fn = that[name];
        that[name] = function () {
            var result;
            if (before) {
                func.apply(that, arguments);
            }
            result = fn.apply(that, arguments);
            if (!before) {
                func.apply(that, arguments);
            }
            return result;
        };
    },
    /**
     * 相对地址转换为绝对地址，解决swfupload控件upload地址存在的bug
     * @param {Object} url 相对地址
     * @return {String} 绝对地址
     * @private
     */
    "toAbsURL": (function () {
        var link = function (url) {
            var a = document.createElement("a");
            a.href = url;
            return a.href;
        };
        return link("") === "" ? function (url) {
            var div = document.createElement('div');
            div.innerHTML = '<a href="' + url.replace(/"/g, "%22") + '"/>';
            return div.firstChild.href;
        } : link;
    })()
});
/**
 * @class fastDev.Ui.Validation
 * @extends fastDev.Core.Base
 * 验证类继承自Base，实现了表单类控件的大部分验证功能，包括非空验证、长度验证、邮箱验证、身份证验证、手机验证等等
 */
fastDev.Core.Validation = {
	doubleByte : /[^\x00-\xff]/g,
	number : /^[\-\+]?\d+\.?\d*$/,
	email : /^[a-zA-Z0-9_\\.]+@[a-zA-Z0-9\-]+[\\.a-zA-Z]+$/,
	code : /^[0-9]{6}$/,
	idCard : /^\d{14}(\d{1}|\d{4}|(\d{3}[xX]))$/,
	mobile : /^((\(\d{2,3}\))|(\d{3}\-))?1[3,8,5]\d{9}$/,
	telPhone : /^((\(0\d{2}\)[\- ]?\d{8})|(0\d{2}[\- ]?\d{8})|(\(0\d{3}\)[\- ]?\d{7,8})|(0\d{3}[\- ]?\d{7,8}))?$/,
	ipAddress : /^(([0-9]|([0-9]\d)|(1\d\d)|(2([0-4]\d|5[0-5])))\.)(([0-9]|([0-9]\d)|(1\d\d)|(2([0-4]\d|5[0-5])))\.){2}([0-9]|([0-9]\d)|(1\d\d)|(2([0-4]\d|5[0-5])))$/,
	/**
	 * 验证控件值是否为空
	 * @param {Object} ctrl 控件对象
	 */
	checkRequired : function(value) {
		if(!fastDev.isValid(value) || fastDev.Util.StringUtil.trim(value) === "") {
			return "不能为空";
		}
	},
	/**
	 * 控件值最大长度验证
	 * @param {Object} ctrl 控件对象
	 * @param {String} rule 验证规则
	 * @return {Boolean}
	 */
	checkMaxLength : function(value, rule) {
		if(value.replace(this.doubleByte, '..').length > rule) {
			return "长度只能在" + rule + "以内";
		}
	},
	/**
	 * 控件值最小长度验证
	 * @param {Object} ctrl 控件对象
	 * @param {String} rule 验证规则
	 * @return {Boolean}
	 */
	checkMinLength : function(value, rule) {
		if(value.replace(this.doubleByte, '..').length < rule) {
			return "长度只能在" + rule + "以上";
		}
	},
	/**
	 * 控件值长度验证
	 * @param {Object} ctrl 控件对象
	 * @param {String} rule 验证规则
	 * @return {Boolean}
	 */
	checkLenEqual : function(value, rule) {
		if(value.length !== +rule) {
			return "长度只能是" + rule;
		}
	},
	/**
	 * 数字验证
	 * @param {Object} ctrl 控件对象
	 * @return {Boolean}
	 */
	checkIsNumber : function(value) {
		if(!this.number.test(value)) {
			return "必须是数字";
		}
	},
	/**
	 * 最小数字验证
	 * @param {Object} ctrl 控件对象
	 * @param {String} rule 验证规则
	 * @return {Boolean}
	 */
	checkMinNumber : function(value, rule) {
		if(+value < +rule) {
			return "数值必须大于" + rule;
		}
	},
	/**
	 * 最大数字验证
	 * @param {Object} ctrl 控件对象
	 * @param {String} rule 验证规则
	 * @return {Boolean}
	 */
	checkMaxNumber : function(value, rule) {
		if(+value > +rule) {
			return "数值必须小于" + rule;
		}
	},
	/**
	 * 值相等验证
	 * @param {Object} ctrl 控件对象
	 * @param {String} rule 验证规则
	 * @return {Boolean}
	 */
	checkIsEqual : function(value, rule) {
		var col=fastDev("[id=" + rule + "]").elems.length>0?fastDev("[id=" + rule + "]"):fastDev("[name=" + rule + "]");
		var val=col.prop("value") || col.attr("value");
		if(value !== val) {
			return "两次输入的值必须相等";
		}
	},
	/**
	 * 邮箱验证
	 * @param {Object} ctrl 控件对象
	 * @return {Boolean}
	 */
	checkIsEmail : function(value) {
		if(!this.email.test(value)) {
			return "必须是邮箱格式";
		}
	},
	/**
	 * 邮编验证
	 * @param {Object} ctrl 控件对象
	 * @return {Boolean}
	 */
	checkIsCode : function(value) {
		if(!this.code.test(value)) {
			return "必须是邮编格式";
		}
	},
	/**
	 * 身份证验证
	 * @param {Object} ctrl 控件对象
	 * @return {Boolean}
	 */
	checkIsIdCard : function(value) {
		if(!this.idCard.test(value)) {
			return "必须是身份证号码格式";
		}
	},
	/**
	 * 手机号码验证
	 * @param {Object} ctrl 控件对象
	 * @return {Boolean}
	 */
	checkIsMobile : function(value) {
		if(!this.mobile.test(value)) {
			return "必须是手机号码格式";
		}
	},
	/**
	 * 电话号码验证
	 * @param {Object} ctrl 控件对象
	 * @return {Boolean}
	 */
	checkIsTel : function(value) {
		if(!this.telPhone.test(value)) {
			return "必须是电话号码格式";
		}
	},
	/**
	 * Ip地址验证
	 * @param {Object} ctrl 控件对象
	 * @return {Boolean}
	 */
	checkIsIp : function(value) {
		if(!this.ipAddress.test(value)) {
			return "必须是IP格式";
		}
	},
	/**
	 * 自定义验证
	 * @param {Object} ctrl 控件对象
	 * @param {String} rule 验证规则
	 * @return {Boolean}
	 */
	checkSelfRegular : function(value, rule) {
		if(!RegExp(rule).test(value)) {
			return "值不合法";
		}
	},
	/**
	 *
	 * @param {String} rule
	 * @param {String} href
	 * @param {string} model 错误提示模型
	 */
	checkAjax : function(value, url, ctrl, handle,async) {
		var errorMsg="";
		fastDev.Ajax.doGet(url, {
			data : "value=" + value,
			async : async,
			success : function() {
				handle.call(ctrl);
			},
			complete : function(result) {
				var msg = (fastDev.isString(result) ? result : result.text).replace(/[\r\n\t]/g,"");
				if(fastDev.isString(msg) && msg.length > 0){
					ctrl.initError(msg);
					errorMsg+=msg;
				}else{
					ctrl.destroyError();
				}
			}
		});
		return errorMsg;
	},
	/**
	 * 验证接口
	 */
	validate : function(rule, value, errorConfig) {
		var me = this, rules = rule.split(";"), errorList = [];

		while(rules[0]) {
			rule = rules.shift().split(":");

			var msg, method, param = rule[1];

			method = fastDev.Util.StringUtil.capitalize(rule[0]);
			if(!value && method !== "Required"){
				continue;
			}
			msg = me["check"+method](value, param);

			if(fastDev.isString(msg)) {
				msg = (errorConfig ? errorConfig[rule[0]] || msg : msg).replace(new RegExp("#{"+method+"}","g"), param || "");
				errorList.push( msg );
			}
		}

		return errorList.join(";");
	}
};
